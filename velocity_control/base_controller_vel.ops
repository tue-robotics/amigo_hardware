########################################################################
#                                                                      #
# Base controller deployer file 									   #
#                                                                      #
# Ton Peters                                                           #
# September 2014                                                       #
#                                                                      #
########################################################################


#### DECLARATION OF PARAMETERS ####
	# Part settings
var double 	Ts = 0.001
var int 	BODYNUMBER 			= 1
var string 	BODYPARTNAME 		= "base"
var bool 	HOMEABLE 			= false
var string 	BASE_SLAVE_1 		= "Soem.Slave_1002"
var string 	BASE_SLAVE_2 		= "Soem.Slave_1003"
	# System properties
var double 	WHEELRAD 			= 0.075*0.9825; 	# Corrected for effective wheel radius
var double 	HALFSQRT2 			= 0.7071
var double 	GEARRATIO 			= 9.0/169.0;		# Gearratio Maxxon GP42C
var double 	BITS2CURRENT 		= 25.0/2046.0; 		# Bit value to current value (check is it 15 or 25?)
var double 	CURRENT2TORQUE 		= 29.2e-3; 			# Torque constant of the motor Maxxon RE35
var double 	BITS2WHEELTORQUE 	= BITS2CURRENT * CURRENT2TORQUE * 1.0/GEARRATIO;
var double 	TWOPI 				= 2.0*3.141592
var double 	ENCODERCOUNTS 		= 500.0*4.0;		# Counts per cycle
var int 	ENCODERBITS 		= 65536;			# From encoder datasheet
var double 	ENC2RAD 			= TWOPI*GEARRATIO/ENCODERCOUNTS
var double 	DISTBETWEENFRONTANDREARWHEELS = 0.530; 
var double 	DISTBETWEENLEFTANDRIGHTWHEELS = 0.550;  
var double 	GEOMFACTOR 			= 0.540 ; 			# Distance from center base to wheel x+y direction
	# Safety
var int    	N_JOINTS			= 4; 				# number of joints
var int    	N_MOTORS			= 4; 				# number of motors
var array  	MAX_VELOCITIES 		= array (0.8, 0.8, 1.57);	  #AMIGO: (1.8, 1.0, 3.1415)
var array  	MAX_ERRORS     		= array (20.0, 20.0, 20.0, 20.0); #14.0 rad/s wheel = 1m/s robot forward
var array  	MAX_OUTPUT    		= array (2000.0, 2000.0, 2000.0, 2000.0);
var double 	MAX_SATURATION_TIME = 1.0;
	# Reference
var array 	MAX_ACC 			= array (0.7, 0.7, 2.0); # acceleration used to generate reference trajectory
var double 	MAX_START_VEL 		= 0.7; 				# Velocity limit at startup
var double 	MAX_INTERVAL 		= 1.0;				# Max interval between reference signals
	# Control



	 # Controller 3, test: STABLE (for identification)
#	var strings CONTROLLERS 				= strings ("WeakIntegrator","LeadLag","LowPass")
#	var array 	GAINS                     	= array (0.2, 0.2, 0.2, 0.2)
#	var array 	INTEGRATOR_ZERO_FREQUENCY 	= array (15.0, 15.0, 15.0, 15.0)
#	var array 	LEAD_FREQUENCY            	= array (45.0, 45.0, 45.0, 45.0)
#	var array 	LAG_FREQUENCY             	= array (55.0, 55.0, 55.0, 55.0)
#	var array 	LOWPASS_FREQUENCY         	= array (500.0, 500.0, 500.0, 500.0)
#	var array 	LOWPASS_DAMPING           	= array (0.7, 0.7, 0.7, 0.7)

	 # Controller 4, test (bw ~5.4Hz): 
	var strings CONTROLLERS 				= strings ("WeakIntegrator","LowPass")
	var array 	GAINS                     	= array (0.25, 0.25, 0.25, 0.25)
	var array 	INTEGRATOR_ZERO_FREQUENCY 	= array (30.0, 30.0, 30.0, 30.0)
	var array 	LOWPASS_FREQUENCY         	= array (500.0, 500.0, 500.0, 500.0)
	var array 	LOWPASS_DAMPING           	= array (0.7, 0.7, 0.7, 0.7)

### NameBodyPart ###
Supervisor.NameBodyPart( BODYNUMBER, BODYPARTNAME, HOMEABLE)

### ENCODER TO VELOCITY ###
loadComponent("BASE_EncoderToVelocity","MATH::Differentiate")
addPeer("Supervisor","BASE_EncoderToVelocity")
setActivity("BASE_EncoderToVelocity",0.0,HighestPriority,ORO_SCHED_RT)
BASE_EncoderToVelocity.vector_size = 4;
BASE_EncoderToVelocity.configure

### CONTROLLER COMPONENT ###
loadComponent("BASE_Controller","FILTERS::Controller")
addPeer("Supervisor","BASE_Controller")
setActivity("BASE_Controller",0.0,HighestPriority,ORO_SCHED_RT)
BASE_Controller.vector_size = 4;
BASE_Controller.sampling_time = Ts;
BASE_Controller.controllers = CONTROLLERS;
BASE_Controller.gains = GAINS;
BASE_Controller.zero_freq_WeakIntegrator = INTEGRATOR_ZERO_FREQUENCY;
#BASE_Controller.zero_freq_LeadLag = LEAD_FREQUENCY;
#BASE_Controller.pole_freq_LeadLag = LAG_FREQUENCY;
#BASE_Controller.zero_freq_Notch = NOTCH_ZERO_FREQ;
#BASE_Controller.zero_damp_Notch = NOTCH_ZERO_DAMP;
#BASE_Controller.pole_freq_Notch = NOTCH_POLE_FREQ;
#BASE_Controller.pole_damp_Notch = NOTCH_POLE_DAMP;
BASE_Controller.pole_freq_LowPass = LOWPASS_FREQUENCY;
BASE_Controller.pole_damp_LowPass = LOWPASS_DAMPING;
BASE_Controller.configure

### SI2BITS ###
loadComponent("BASE_SI2Bits","MATH::Gain")
addPeer("Supervisor","BASE_SI2Bits")
setActivity("BASE_SI2Bits",0.0,HighestPriority,ORO_SCHED_RT)
BASE_SI2Bits.vectorsize 	= 4;
BASE_SI2Bits.gain 			= array ( 1.0/BITS2WHEELTORQUE, 1.0/BITS2WHEELTORQUE, 1.0/BITS2WHEELTORQUE, 1.0/BITS2WHEELTORQUE)
BASE_SI2Bits.configure

### AnalogOuts ###
loadComponent("BASE_AnalogOuts", "SOEM::AnalogOutsGeneric")
addPeer("Supervisor", "BASE_AnalogOuts")
setActivity("BASE_AnalogOuts", 0.0, HighestPriority, ORO_SCHED_RT)
BASE_AnalogOuts.numberofinports    	= 1
BASE_AnalogOuts.numberofoutports    = 2
BASE_AnalogOuts.input_sizes 		= array (4.0)
BASE_AnalogOuts.output_sizes 		= array (2.0, 2.0)
BASE_AnalogOuts.output_positions	= array (1.0, 1.0, 1.0, 1.0)
BASE_AnalogOuts.configure;

### Safety ###
loadComponent("BASE_Safety","SUPERVISORY::Safety")
addPeer("Supervisor","BASE_Safety")
setActivity("BASE_Safety",0.0,HighestPriority,ORO_SCHED_RT)
BASE_Safety.NJ					= N_JOINTS
BASE_Safety.NM					= N_MOTORS
BASE_Safety.maxJointErrors		= MAX_ERRORS
BASE_Safety.motorSaturations	= MAX_OUTPUT
BASE_Safety.maxConSatTime		= MAX_SATURATION_TIME
BASE_Safety.configure

### DigitalOuts ###
loadComponent("BASE_DigitalOuts", "SOEM::DigitalOuts")
addPeer("Supervisor", "BASE_DigitalOuts")
setActivity("BASE_DigitalOuts", 0.0, HighestPriority, ORO_SCHED_RT)
BASE_DigitalOuts.number_of_bits 	= 4;
BASE_DigitalOuts.configure

### READ REFERENCE VELOCITIES ###
loadComponent("BASE_ReadReferences","ROS::ReadTwistMsg")
addPeer("Supervisor","BASE_ReadReferences")
setActivity("BASE_ReadReferences",Ts,LowestPriority,ORO_SCHED_OTHER)
BASE_ReadReferences.max_start_vel 	= MAX_START_VEL
BASE_ReadReferences.max_acc 		= MAX_ACC
BASE_ReadReferences.max_interval 	= MAX_INTERVAL
BASE_ReadReferences.max_vel 		= MAX_VELOCITIES
BASE_ReadReferences.configure

### DECOUPLE REFERENCE ###
loadComponent("BASE_JointToMotorSpace","MATH::MatrixTransform")
addPeer("Supervisor","BASE_JointToMotorSpace")
setActivity("BASE_JointToMotorSpace",Ts,LowestPriority,ORO_SCHED_OTHER)
BASE_JointToMotorSpace.Nrows 		= 4
BASE_JointToMotorSpace.Ncolumns 	= 3
BASE_JointToMotorSpace.configure
BASE_JointToMotorSpace.function1 	= array ( -1.0/WHEELRAD,  1.0/WHEELRAD,  1.0*GEOMFACTOR/WHEELRAD )
BASE_JointToMotorSpace.function2 	= array (  1.0/WHEELRAD,  1.0/WHEELRAD,  1.0*GEOMFACTOR/WHEELRAD )
BASE_JointToMotorSpace.function3 	= array (  1.0/WHEELRAD, -1.0/WHEELRAD,  1.0*GEOMFACTOR/WHEELRAD )
BASE_JointToMotorSpace.function4 	= array ( -1.0/WHEELRAD, -1.0/WHEELRAD,  1.0*GEOMFACTOR/WHEELRAD )

### DECOUPLE POSITION ###
loadComponent("BASE_MotorToJointSpace","MATH::MatrixTransform")
addPeer("Supervisor","BASE_MotorToJointSpace")
setActivity("BASE_MotorToJointSpace",0.0,HighestPriority,ORO_SCHED_RT)
BASE_MotorToJointSpace.Nrows 		= 3
BASE_MotorToJointSpace.Ncolumns 	= 4
BASE_MotorToJointSpace.configure
BASE_MotorToJointSpace.function1 	= array (-0.25*WHEELRAD,  0.25*WHEELRAD,  0.25*WHEELRAD, -0.25*WHEELRAD)
BASE_MotorToJointSpace.function2 	= array ( 0.25*WHEELRAD,  0.25*WHEELRAD, -0.25*WHEELRAD, -0.25*WHEELRAD)
BASE_MotorToJointSpace.function3 	= array ( 0.25*WHEELRAD/GEOMFACTOR, 0.25*WHEELRAD/GEOMFACTOR,  0.25*WHEELRAD/GEOMFACTOR,  0.25*WHEELRAD/GEOMFACTOR)

#### LOAD COMPONENT TO PUBLISH ODOMETRY ###
loadComponent("BASE_OdometryPublisher","ROS::PublishOdometry")
addPeer("Supervisor","BASE_OdometryPublisher")
setActivity("BASE_OdometryPublisher",0.05,LowestPriority,ORO_SCHED_OTHER)
BASE_OdometryPublisher.base_link_frame 	= "/sergio/base_link"
BASE_OdometryPublisher.odom_frame 		= "/sergio/odom"
BASE_OdometryPublisher.configure

### LOAD COMPONENT TO PUBLISH DIAGNOSTICS ###
loadComponent("BASE_Diagnostics","ROS::RosDiagnostics")
addPeer("Supervisor","BASE_Diagnostics")
setActivity("BASE_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
BASE_Diagnostics.statusname 			= "BaseController"
BASE_Diagnostics.NumberOfVectorPorts 	= 3
BASE_Diagnostics.NumberOfBoolPorts 		= 1
BASE_Diagnostics.configure
BASE_Diagnostics.vecname1 				= "Reference"
BASE_Diagnostics.vecname2 				= "Error"
BASE_Diagnostics.vecname3 				= "Voltage"
BASE_Diagnostics.boolname1 				= "Amplifiers"

### OFFSET OF THE ANALOG OUTPUTS ###
loadComponent("BASE_AnalogOffset","SOURCES::ConstantSignal")
addPeer("Supervisor","BASE_AnalogOffset")
setActivity("BASE_AnalogOffset",Ts,HighestPriority,ORO_SCHED_RT)
BASE_AnalogOffset.vector_size 	= 4;
BASE_AnalogOffset.value 		= array (-108.0, -105.0, -70.0, -70.0); 
BASE_AnalogOffset.configure

### ADD OFFSET ###
loadComponent("BASE_AddOffset","MATH::Addition")
addPeer("Supervisor","BASE_AddOffset")
BASE_AddOffset.vectorsize 		= 4
BASE_AddOffset.numberofinputs 	= 2
setActivity("BASE_AddOffset",0.0,HighestPriority,ORO_SCHED_RT)
BASE_AddOffset.configure

#### CONNECT COMPONENTS ####
# Control loop
connect ("BASE_ReadEncoders.out",		"BASE_EncoderToVelocity.in", 	ConnPolicy() ); #enc4[-]
connect ("BASE_EncoderToVelocity.out",	"BASE_Controller.pos_in", 	ConnPolicy() ); #enc4[-]
connect ("BASE_Controller.out",			"BASE_SI2Bits.in", 			ConnPolicy() )
connect ("BASE_SI2Bits.out", 			"BASE_AddOffset.in1_ev", 	ConnPolicy() );
connect ("BASE_AnalogOffset.out", 		"BASE_AddOffset.in2", 		ConnPolicy() );
connect ("BASE_AddOffset.out", 			"BASE_AnalogOuts.in1", 		ConnPolicy() );
connect ("BASE_AnalogOuts.out1", 		BASE_SLAVE_1+".analogOuts", ConnPolicy() );
connect ("BASE_AnalogOuts.out2", 		BASE_SLAVE_2+".analogOuts", ConnPolicy() );
 
# Safety
connect ("BASE_Controller.jointErrors",	"BASE_Safety.jointErrors", 	ConnPolicy() ); # jointerrors
connect ("BASE_AddOffset.out",			"BASE_Safety.controlEffort",ConnPolicy() )
connect ("BASE_Safety.error",			"Supervisor.base_error", 	ConnPolicy() ); # error
connect ("BASE_Safety.enable",			"BASE_Controller.enable", 	ConnPolicy() ); # error
connect ("BASE_Safety.enable", 			BASE_SLAVE_1+".enablePort", ConnPolicy() ); 
connect ("BASE_Safety.enable", 			BASE_SLAVE_2+".enablePort", ConnPolicy() ); 
connect ("BASE_Safety.enable", 			"BASE_DigitalOuts.in1", 	ConnPolicy() ); 
connect ("BASE_Safety.enable", 			"BASE_DigitalOuts.in2", 	ConnPolicy() ); 
connect ("BASE_DigitalOuts.digital_out", BASE_SLAVE_1+".digitalOuts", ConnPolicy() ); 
connect ("BASE_DigitalOuts.digital_out", BASE_SLAVE_2+".digitalOuts", ConnPolicy() ); 

# Reference signal
stream  ("BASE_ReadReferences.cmd_vel", 	ros.topic("/sergio/base/references"));
connect ("BASE_ReadReferences.out",		"BASE_JointToMotorSpace.in", ConnPolicy() )
connect ("BASE_JointToMotorSpace.out",	"BASE_Controller.ref_in", 	ConnPolicy() );

# Odom to ros
connect ("BASE_ReadEncoders.out",		"BASE_MotorToJointSpace.in", ConnPolicy() )
connect ("BASE_MotorToJointSpace.out", 	"BASE_OdometryPublisher.pos", ConnPolicy() );
stream ("BASE_OdometryPublisher.odom", 	ros.topic("/sergio/base/measurements"));
stream ("BASE_OdometryPublisher.reset", ros.topic("/sergio/base/reset_odometry"));

# Diagnostics
connect ("BASE_ReadReferences.out", 	"BASE_Diagnostics.vec1", ConnPolicy() )
connect ("BASE_Controller.jointErrors", "BASE_Diagnostics.vec2", ConnPolicy() )
connect ("BASE_SI2Bits.out", 			"BASE_Diagnostics.vec3", ConnPolicy() )
stream ("BASE_Diagnostics.diagnostics", ros.topic("/sergio/base_diagnostics"));



#### START COMPONENTS ####
# Control loop
Supervisor.AddAllwaysOnPeer ("BASE_EncoderToVelocity")
Supervisor.AddAllwaysOnPeer ("BASE_SI2Bits")
Supervisor.AddAllwaysOnPeer ("BASE_AnalogOffset")
Supervisor.AddAllwaysOnPeer ("BASE_AddOffset")
Supervisor.AddAllwaysOnPeer ("BASE_AnalogOuts")
# diagnostics
Supervisor.AddAllwaysOnPeer ("BASE_MotorToJointSpace")
Supervisor.AddAllwaysOnPeer ("BASE_OdometryPublisher")
Supervisor.AddAllwaysOnPeer ("BASE_Diagnostics")
Supervisor.AddAllwaysOnPeer ("BASE_DigitalOuts")
# safety and reference
Supervisor.AddEnabledPeer 	("BASE_Controller", 		BODYNUMBER)
Supervisor.AddEnabledPeer  	("BASE_Safety", 			BODYNUMBER)
Supervisor.AddEnabledPeer  	("BASE_ReadReferences",		BODYNUMBER )
Supervisor.AddEnabledPeer  	("BASE_JointToMotorSpace",	BODYNUMBER )






