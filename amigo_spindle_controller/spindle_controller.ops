import("amigo_spindle_controller")
spindle_ROStopics.start

### Loading Components ###
#Reading Encoders
loadComponent("ReadSpindleEncoder","ReadEncoders")
ReadSpindleEncoder.setPeriod(0.004)
ReadSpindleEncoder.encoderbits = 65536
ReadSpindleEncoder.enc2SI = array (4.1666667e-7)
ReadSpindleEncoder.configure

#Loading Homing component
loadComponent("SpindleHoming","SpindleHoming")
SpindleHoming.max_vel = 0.05
SpindleHoming.max_acc = 0.02
SpindleHoming.configure

#Calculating Feed Forward
loadComponent("CalculateFFW","CalculateFFW")
CalculateFFW.FFWgrav = 0.07
CalculateFFW.FFWstat = 0.05
CalculateFFW.FFWdyn = 0.4
CalculateFFW.FFWacc = 0.3
CalculateFFW.configure

#Calculating Output to encoders
loadComponent("CalculateOutput","MATH::Addition")
CalculateOutput.vectorsize = 1
CalculateOutput.configure

#Limiting the Output
loadComponent("SpindleOutputLimiter","OutputLimiter")
SpindleOutputLimiter.configure

#Publishing the spindle position to ROS
loadComponent("PublishPosition","PublishPosition")
PublishPosition.configure

#Calculating Spindle Position
loadComponent("CalculatePosition","Substraction")
CalculatePosition.vectorsize = 1
CalculatePosition.configure

#Calculating Errors
loadComponent("CalculateError","Substraction")
CalculateError.vectorsize = 1
CalculateError.configure

#Loading controller components
loadComponent("SpindleGain","MATH::Gain")
SpindleGain.vectorsize = 1
SpindleGain.gain = 40
SpindleGain.configure
loadComponent("SpindleLeadLag","FILTERS::LeadLags")
SpindleLeadLag.vector_size = 1
SpindleLeadLag.sampling_time = 0.004
SpindleLeadLag.zero_frequency = array (1.6)
SpindleLeadLag.pole_frequency = array (60.0)
SpindleLeadLag.configure
loadComponent("SpindleFirstOrderLowPass","FILTERS::FirstOrderLowPasses")
SpindleFirstOrderLowPass.vector_size = 1
SpindleFirstOrderLowPass.sampling_time = 0.004
SpindleFirstOrderLowPass.pole_frequency = array (20.0)
SpindleFirstOrderLowPass.configure
loadComponent("SpindleIntegrator","FILTERS::WeakIntegrators")
SpindleIntegrator.zero_frequency = array ( 0.3 )
SpindleIntegrator.vector_size = 1
SpindleIntegrator.sampling_time = 0.004
SpindleIntegrator.configure

#Loading Safety component
loadComponent("SpindleSafety","SpindleSafety")
SpindleSafety.configure

#Reading spindle setpoints 
loadComponent("ReadSpindleSetpoint","MSG::ReadSpindleSetpoint")
ReadSpindleSetpoint.setPeriod(0.004)
ReadSpindleSetpoint.homed_pos = 0.35
ReadSpindleSetpoint.configure

#Loading reference limiter component
loadComponent("SpindleReferenceLimiter","ReferenceLimiter")
SpindleReferenceLimiter.configure

#Loading Reference Generator
loadComponent("SpindleReferenceGenerator","ReferenceGenerator")
SpindleReferenceGenerator.setPeriod(0.004)
SpindleReferenceGenerator.NrInterpolators = 1
SpindleReferenceGenerator.InterpolatorDt = 0.004
SpindleReferenceGenerator.InterpolatorEps = 1.0
SpindleReferenceGenerator.configure
SpindleReferenceGenerator.interpolator1 = array (0.0, 0.01, 0.1)


### Setting up the connections between the components ###
connect ("Soem.Slave_1006.Slave_1006_value","ReadSpindleEncoder.enc1_in", ConnPolicy() )
connect ("ReadSpindleEncoder.out","CalculatePosition.in_minus", ConnPolicy() )
connect ("SpindleHoming.correction_out","CalculatePosition.in_plus", ConnPolicy() )
connect ("SpindleHoming.reset_generator","SpindleReferenceGenerator.resetValues", ConnPolicy() )
connect ("SpindleSafety.spindle_brake","DigitalOuts.spindlebrake", ConnPolicy() )
connect ("SpindleSafety.safety","SpindleOutputLimiter.safety", ConnPolicy() )
connect ("ReadSpindleSetpoint.ref_pos","SpindleReferenceLimiter.ref_pos_in", ConnPolicy() )
connect ("SpindleReferenceLimiter.ref_pos_out","SpindleHoming.ref_pos_in", ConnPolicy() )
connect ("SpindleHoming.ref_pos_out","SpindleReferenceGenerator.posin", ConnPolicy() )
connect ("SpindleReferenceGenerator.posout","CalculateError.in_plus", ConnPolicy() )
connect ("CalculatePosition.out","CalculateError.in_minus", ConnPolicy() )
connect ("CalculatePosition.out","PublishPosition.in", ConnPolicy() )
connect ("CalculatePosition.out","SpindleHoming.current_pos", ConnPolicy() )
connect ("CalculatePosition.out","SpindleReferenceLimiter.spindle_position", ConnPolicy() )
connect ("SpindleReferenceGenerator.velout","CalculateFFW.ref_vel", ConnPolicy() )
connect ("SpindleReferenceGenerator.accout","CalculateFFW.ref_acc", ConnPolicy() )
connect ("CalculateError.out","SpindleGain.in", ConnPolicy() )
connect ("CalculateError.out","SpindleHoming.error_pos", ConnPolicy() )
connect ("CalculateError.out","SpindleSafety.error_pos", ConnPolicy() )
connect ("SpindleGain.out","SpindleLeadLag.in", ConnPolicy() )
connect ("SpindleLeadLag.out","SpindleFirstOrderLowPass.in", ConnPolicy() )
connect ("SpindleFirstOrderLowPass.out","SpindleIntegrator.in", ConnPolicy() )
connect ("SpindleIntegrator.out","CalculateOutput.in2_event", ConnPolicy() )
connect ("CalculateFFW.FFW_out","CalculateOutput.in1", ConnPolicy() )
connect ("CalculateOutput.out","SpindleOutputLimiter.input", ConnPolicy() )
connect ("SpindleOutputLimiter.output","AnalogOuts.spindle", ConnPolicy() )
connect ("ReadSpindleEncoder.out","SpindleHoming.encoder_in", ConnPolicy() )

#Setting up the connections with ROS-topics
stream("ReadSpindleSetpoint.spindle_setpoint",spindle_ROStopics.spindle_setpoint);
stream("PublishPosition.out",spindle_ROStopics.spindle_position);
stream("ReadSpindleSetpoint.afterhoming_pos",spindle_ROStopics.spindle_setpoint);
stream("SpindleReferenceLimiter.right_tip",spindle_ROStopics.right_tip);
stream("SpindleReferenceLimiter.left_tip",spindle_ROStopics.left_tip);


### Setting up reporting ###
loadComponent("SpindleReporter", "OCL::FileReporting")
SpindleReporter.ReportFile = "/home/amigo/spindlereports.dat"
addPeer("SpindleReporter","SpindleOutputLimiter")
addPeer("SpindleReporter","CalculatePosition")
addPeer("SpindleReporter","SpindleReferenceGenerator")
addPeer("SpindleReporter","CalculateError")
addPeer("SpindleReporter","SpindleFirstOrderLowPass")
addPeer("SpindleReporter","ReadSpindleSetpoint")
addPeer("SpindleReporter","SpindleIntegrator")
SpindleReporter.reportPort("ReadSpindleSetpoint","ref_pos")
SpindleReporter.reportPort("SpindleOutputLimiter","output")
SpindleReporter.reportPort("CalculatePosition","out")
SpindleReporter.reportPort("SpindleReferenceGenerator","posout")
SpindleReporter.reportPort("CalculateError","out")
SpindleReporter.reportPort("SpindleReferenceGenerator","velout")
SpindleReporter.reportPort("SpindleReferenceGenerator","accout")
SpindleReporter.reportPort("SpindleFirstOrderLowPass","out")
SpindleReporter.reportPort("SpindleIntegrator","out")


### Starting all the components ###
ReadSpindleSetpoint.start
ReadSpindleEncoder.start
SpindleReferenceGenerator.start
SpindleHoming.start
SpindleGain.start
SpindleLeadLag.start
SpindleFirstOrderLowPass.start
SpindleIntegrator.start
CalculateError.start
CalculateFFW.start
CalculatePosition.start
CalculateOutput.start
SpindleOutputLimiter.start
PublishPosition.start
SpindleSafety.start
SpindleReporter.start
SpindleReferenceLimiter.start
