########################################################################
#                                                                      #
# left Philips Experimental Robotic Arm deployer file.                 #
#                                                                      #
# Max Baeten                       									   #
#                                                                      #
########################################################################

#### DECLARATION OF PARAMETERS ####
var double TS 					= 0.001
var string LEFT_ARM_SHOULDER 	= "Soem.Slave_1015"
var string LEFT_ARM_UPPERARM 	= "Soem.Slave_1016"
var string LEFT_ARM_LOWERARM 	= "Soem.Slave_1017"
var strings JOINT_NAMES 		= strings( "shoulder_yaw_joint_left", "shoulder_pitch_joint_left", "shoulder_roll_joint_left", "elbow_pitch_joint_left", "elbow_roll_joint_left", "wrist_pitch_joint_left", "wrist_yaw_joint_left" )
var strings DUMMY_JOINT_NAMES 	= strings( "finger1_joint_left", "finger1_tip_joint_left", "finger2_joint_left", "finger2_tip_joint_left" )
var array UPPERJOINTLIMIT 		= array (   0.0,	 	1.57,	  	1.57, 	 	2.23,  		1.83, 		0.95,  		0.61,   	4.0		)
var array LOWERJOINTLIMIT 		= array ( 	-1.57,		-1.57,	 	-1.57,  	0.0, 		-1.83,		-0.95, 		-0.61,  	-4.0	)
var array UPPERJOINTTORQUELIMIT = array (  	26.4,	 	26.4,	   	9.8, 	 	11.8,  		11.8,  		2.5,   		2.5 				)
var array LOWERJOINTTORQUELIMIT = array (  	-26.4, 		-26.4,	  	-9.8, 		-11.8, 		-11.8, 		-2.5,  		-2.5 				)
var array MAXERRORS 			= array (  	0.09,     	0.09,     	0.09,     	0.09, 	   	0.09,    	0.09, 	   	0.19, 	 	5.0		)
var array HOMED_POS 			= array (  	390.0,		544.0,		1.5708,		0.0,		1.8326,		0.985,		0.7854				)
var double TWOPI 				= 2.0*3.141592
var double GEARRATIO_SM			= 1.0/550.0
var double GEARRATIO_S3		    = 1.0/371.25
var double GEARRATIO_EM			= 1.0/410.0
var double GEARRATIO_WM			= 1.0/290.0
var double GEARRATIO_HM			= 196.0/3249.0
var double ENCODERCOUNTS_SM		= 256.0*4.0
var double ENCODERCOUNTS_S3	    = 256.0*4.0
var double ENCODERCOUNTS_EM		= 500.0*4.0 
var double ENCODERCOUNTS_WM		= 128.0*4.0
var double ENCODERCOUNTS_HM		= 8.0*128.0*4.0 ;# (TO DO: should be 16*4, remove this factor 8)
var double ENC2SI_SM			= TWOPI*GEARRATIO_SM/ENCODERCOUNTS_SM
var double ENC2SI_S3			= TWOPI*GEARRATIO_S3/ENCODERCOUNTS_S3
var double ENC2SI_EM			= TWOPI*GEARRATIO_EM/ENCODERCOUNTS_EM
var double ENC2SI_WM			= TWOPI*GEARRATIO_WM/ENCODERCOUNTS_WM
var double ENC2SI_HM 			= TWOPI*GEARRATIO_HM/ENCODERCOUNTS_HM
var int N						= 8
var int BODYNUMBER 				= 3
var string BODYNAME 			= "left_arm"
var bool HOMEABLE 				= true
var bool REQUIREHOMING   		= true
var bool REQUIREGRIPPERHOMING   = true
 
### NameBodyPart ###
Supervisor.NameBodyPart( BODYNUMBER, BODYNAME, HOMEABLE)

#### HIGH PRIORITY COMPONENTS ####
### Read reference joint angles ###
loadComponent("LPERA_ReadReferences","ROS::JointStateToDoubles")
addPeer("Supervisor","LPERA_ReadReferences")
setActivity("LPERA_ReadReferences",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_ReadReferences.NumberOfJoints = 7
LPERA_ReadReferences.configure

### Vector concatenate ###
loadComponent("LPERA_VectorConcatenate","SIGNALROUTING::VectorConcatenate")
addPeer("Supervisor","LPERA_VectorConcatenate")
setActivity("LPERA_VectorConcatenate",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_VectorConcatenate.vector_size 	= 2
LPERA_VectorConcatenate.event_port 		= array (1.0, 1.0)
LPERA_VectorConcatenate.configure

### Motor to joint angles ###
loadComponent("LPERA_MotorToJointSpace","MATH::MatrixTransform")
addPeer("Supervisor","LPERA_MotorToJointSpace")
setActivity("LPERA_MotorToJointSpace",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_MotorToJointSpace.Nrows 		= N
LPERA_MotorToJointSpace.Ncolumns 	= N
LPERA_MotorToJointSpace.configure
LPERA_MotorToJointSpace.function1 	= array  ( 0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_MotorToJointSpace.function2 	= array  (-0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_MotorToJointSpace.function3 	= array  ( 0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_MotorToJointSpace.function4 	= array  ( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
LPERA_MotorToJointSpace.function5 	= array  ( 0.0,  0.0,  0.0,  0.5, -0.5,  0.0,  0.0,  0.0)
LPERA_MotorToJointSpace.function6 	= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
LPERA_MotorToJointSpace.function7 	= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5, -0.5,  0.0)
LPERA_MotorToJointSpace.function8 	= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### Interpolator (DO NOT INCREASE VALUES !!!) ### <-- At least state why we should not increase values!!
loadComponent("LPERA_ReferenceInterpolator","SOURCES::ReferenceGenerator")
addPeer("Supervisor","LPERA_ReferenceInterpolator")
setActivity("LPERA_ReferenceInterpolator",TS,HighestPriority,ORO_SCHED_RT)
LPERA_ReferenceInterpolator.NrInterpolators 	= N
LPERA_ReferenceInterpolator.InterpolatorDt 		= TS
LPERA_ReferenceInterpolator.InterpolatorEps 	= 1.0
LPERA_ReferenceInterpolator.configure
LPERA_ReferenceInterpolator.interpolator1 		= array (0.0, 0.4, 0.2)
LPERA_ReferenceInterpolator.interpolator2 		= array (0.0, 0.4, 0.2)
LPERA_ReferenceInterpolator.interpolator3 		= array (0.0, 0.6, 0.3)
LPERA_ReferenceInterpolator.interpolator4 		= array (0.0, 0.8, 0.5)
LPERA_ReferenceInterpolator.interpolator5 		= array (0.0, 0.8, 0.5)
LPERA_ReferenceInterpolator.interpolator6 		= array (0.0, 1.0, 0.5)
LPERA_ReferenceInterpolator.interpolator7 		= array (0.0, 1.0, 0.5)
LPERA_ReferenceInterpolator.interpolator8 		= array (0.0, 10.0, 100.0)

### PERA Homing ###
loadComponent("LPERA_Homing","AMIGOPERA::PeraHoming")
addPeer("Supervisor","LPERA_Homing")
setActivity("LPERA_Homing",TS,HighestPriority,ORO_SCHED_RT)
LPERA_Homing.requireHoming			= REQUIREHOMING
LPERA_Homing.requireGripperHoming	= REQUIREGRIPPERHOMING
LPERA_Homing.maxJointErrors 		= MAXERRORS
LPERA_Homing.jointNames				= JOINT_NAMES
LPERA_Homing.stepSize 				= 0.5
LPERA_Homing.startJoint 			= 7
LPERA_Homing.absSenDir 				= array (	1.0,	1.0,	1.0,	1.0,	1.0,	1.0,	-1.0		)
LPERA_Homing.homedPos 				= HOMED_POS
LPERA_Homing.absOrRel 				= array (	0.0,	0.0, 	1.0,	1.0,	1.0,	1.0,	1.0,	1.0	)
LPERA_Homing.endPose				= array (  -0.1,   -0.2, 	0.2, 	0.8,	0.0,	0.0, 	0.0)
LPERA_Homing.configure

### LOAD READENCODERS
loadComponent("LPERA_ReadEncoders","SOEM::ReadEncoders")
addPeer("Supervisor","LPERA_ReadEncoders")
setActivity("LPERA_ReadEncoders",TS,HighestPriority,ORO_SCHED_RT)
LPERA_ReadEncoders.encoderbits = 65536
LPERA_ReadEncoders.enc2SI = array (ENC2SI_SM ,ENC2SI_SM, ENC2SI_S3 , ENC2SI_EM , ENC2SI_EM , ENC2SI_WM , ENC2SI_WM , ENC2SI_HM )
LPERA_ReadEncoders.configure

### Gripper force controller ###
loadComponent("LPERA_GripperControl","AMIGOPERA::GripperControl")
addPeer("Supervisor","LPERA_GripperControl")
setActivity("LPERA_GripperControl",TS,HighestPriority,ORO_SCHED_RT)
LPERA_GripperControl.threshold_closed 	= 50.0
LPERA_GripperControl.max_pos 			= 5.3
LPERA_GripperControl.gripper_gain 		= 0.1
LPERA_GripperControl.sensorPos 			= 8
LPERA_GripperControl.configure

### Joint to motor torques ###
loadComponent("LPERA_JointToMotorSpace","MATH::MatrixTransform")
addPeer("Supervisor","LPERA_JointToMotorSpace")
setActivity("LPERA_JointToMotorSpace",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_JointToMotorSpace.Nrows 		= N
LPERA_JointToMotorSpace.Ncolumns 	= N
LPERA_JointToMotorSpace.configure
LPERA_JointToMotorSpace.function1	= array ( 0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_JointToMotorSpace.function2	= array (-0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_JointToMotorSpace.function3 	= array ( 0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_JointToMotorSpace.function4 	= array ( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
LPERA_JointToMotorSpace.function5 	= array ( 0.0,  0.0,  0.0,  0.5, -0.5,  0.0,  0.0,  0.0)
LPERA_JointToMotorSpace.function6 	= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
LPERA_JointToMotorSpace.function7 	= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5, -0.5,  0.0)
LPERA_JointToMotorSpace.function8 	= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### Negative feedback controller ###
loadComponent("LPERA_Controller","FILTERS::Controller")
setActivity("LPERA_Controller",0.0,LowestPriority,ORO_SCHED_OTHER)
addPeer("Supervisor","LPERA_Controller")
LPERA_Controller.vector_size    				= N
LPERA_Controller.gains							= array(20000.0, 	20000.0, 	10000.0, 	17500.0, 	17500.0, 	17500.0, 	21500.0, 	5000.0);
LPERA_Controller.controllers					= strings("WeakIntegrator","LeadLag","LowPass")
LPERA_Controller.sampling_time					= TS
LPERA_Controller.max_errors						= MAXERRORS
LPERA_Controller.motor_saturation				= array (1000.0, 	1000.0,	 	400.0, 	   	500.0,  	500.0, 	   	500.0, 		500.0, 		900.0)
LPERA_Controller.max_sat_time					= 5.0
LPERA_Controller.zero_freq_WeakIntegrator		= array(0.0065,	  	0.0065,		0.009, 		0.004, 		0.004, 		0.02, 		0.02, 		0.000001); 
LPERA_Controller.zero_freq_LeadLag				= array(25.0, 		25.0, 		15.0, 		100.0, 		100.0,		5.0,  		5.0,  		4.5)
LPERA_Controller.pole_freq_LeadLag				= array(80.0, 		80.0, 		40.0, 		200.0, 		200.0, 		40.0, 		40.0, 		45.0)
LPERA_Controller.pole_freq_LowPass				= array(125.0, 		125.0, 		125.0, 		125.0, 		62.5, 		125.0, 		125.0, 		125.0)
LPERA_Controller.pole_damp_LowPass				= array(0.7, 		0.7, 		0.7, 		0.7, 		0.7, 		0.7, 		0.7, 		0.7)
LPERA_Controller.configure

### Output limiter ###
loadComponent("LPERA_JointOutputLimiter","DISCONTINUITIES::Saturation")
addPeer("Supervisor","LPERA_JointOutputLimiter")
setActivity("LPERA_JointOutputLimiter",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_JointOutputLimiter.upper_limit = UPPERJOINTLIMIT
LPERA_JointOutputLimiter.lower_limit = LOWERJOINTLIMIT
LPERA_JointOutputLimiter.vector_size = N
LPERA_JointOutputLimiter.configure

### Publishing joint angles on ROS-topic ###
loadComponent("LPERA_WriteClippedJointAngles","ROS::DoublesToJointState")
addPeer("Supervisor","LPERA_WriteClippedJointAngles")
setActivity("LPERA_WriteClippedJointAngles",0.05,LowestPriority,ORO_SCHED_OTHER)
LPERA_WriteClippedJointAngles.JointNames = JOINT_NAMES
LPERA_WriteClippedJointAngles.configure

### Conversion analog PERA_IO values to torques ###
loadComponent("LPERA_SensorTorques","ARM::SensorTorques")
addPeer("Supervisor","LPERA_SensorTorques")
setActivity("LPERA_SensorTorques",(TS),LowestPriority,ORO_SCHED_OTHER)
LPERA_SensorTorques.vector_size	= N
LPERA_SensorTorques.c1 			= array (35.0,		87.0,		1050.0,		35.0,		300.0,		1.0,		1.0,		32.34	)
LPERA_SensorTorques.c2 			= array (-0.2,		0.2,		6.0,		-0.8,		1.0,		1.0,		1.0,		0.2		)
LPERA_SensorTorques.c3 			= array (-76.26,	-95.29,	    -145.16,	-38.71,		-111.7,		1.0,		1.0,		-34.66	)
LPERA_SensorTorques.configure

#### Diagnostics ###
loadComponent("LPERA_Diagnostics","ROS::RosDiagnostics")
addPeer("Supervisor","LPERA_Diagnostics")
setActivity("LPERA_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
LPERA_Diagnostics.statusname 			= "LPERA"
LPERA_Diagnostics.NumberOfVectorPorts 	= 3
LPERA_Diagnostics.NumberOfBoolPorts 	= 0
LPERA_Diagnostics.configure
LPERA_Diagnostics.vecname1 				= "Reference Interpolator"
LPERA_Diagnostics.vecname2 				= "Joint Errors"
LPERA_Diagnostics.vecname3 				= "Reference Path Planning"

#### SET UP JOINTSTATE AGGREGATOR ####
JointStateAggregator.addJointNames(JOINT_NAMES)
JointStateAggregator.addJointNames(DUMMY_JOINT_NAMES)
JointStateAggregator.addAggregationPort(BODYNAME)

#### CONNECT COMPONENTS ####
## Control loop	## 
connect ("Soem.Slave_1014.encoderAngle1",			"LPERA_ReadEncoders.enc1_in", 				ConnPolicy() ) 
connect ("Soem.Slave_1014.encoderAngle2",			"LPERA_ReadEncoders.enc2_in", 				ConnPolicy() ) 
connect ("Soem.Slave_1015.encoderAngle1",			"LPERA_ReadEncoders.enc3_in", 				ConnPolicy() ) 
connect ("Soem.Slave_1015.encoderAngle2",			"LPERA_ReadEncoders.enc4_in", 				ConnPolicy() ) 
connect ("Soem.Slave_1015.encoderAngle3",			"LPERA_ReadEncoders.enc5_in", 				ConnPolicy() ) 
connect ("Soem.Slave_1016.encoderAngle1",			"LPERA_ReadEncoders.enc6_in", 				ConnPolicy() ) 
connect ("Soem.Slave_1016.encoderAngle2",			"LPERA_ReadEncoders.enc7_in", 				ConnPolicy() ) 
connect ("Soem.Slave_1016.encoderAngle3",			"LPERA_ReadEncoders.enc8_in", 				ConnPolicy() )
connect ("LPERA_ReadEncoders.out",					"LPERA_MotorToJointSpace.in", 				ConnPolicy() ) 
connect ("LPERA_MotorToJointSpace.out",				"LPERA_Controller.pos_in", 					ConnPolicy() )
connect ("LPERA_Controller.out",					"LPERA_JointToMotorSpace.in", 				ConnPolicy() )
connect ("LPERA_JointToMotorSpace.out",				"LPERA_AnalogOuts.in1", 					ConnPolicy() )

## References ##
connect ("LPERA_ReadReferences.pos_out",			"LPERA_VectorConcatenate.in1", 				ConnPolicy() )
connect ("LPERA_GripperControl.gripper_ref",		"LPERA_VectorConcatenate.in2",				ConnPolicy() )
connect ("LPERA_VectorConcatenate.out",				"LPERA_ReferenceInterpolator.posin", 		ConnPolicy() )
connect ("LPERA_ReferenceInterpolator.posout",		"LPERA_Controller.ref_in", 					ConnPolicy() )

## Gripper control ##
connect ("LPERA_AnalogIns.out1",					"LPERA_SensorTorques.voltage_in", 			ConnPolicy() )
##connect ("LPERA_SensorTorques.measured_torques_out","LPERA_GripperControl.torque_in", 			ConnPolicy() )
connect ("LPERA_MotorToJointSpace.out", 			"LPERA_GripperControl.position_in", 		ConnPolicy() )
connect ("LPERA_GripperControl.gripper_measurement","LPERA_Homing.gripper_measurement", 		ConnPolicy() )
connect ("LPERA_Homing.gripper_command",			"LPERA_GripperControl.gripper_command", 	ConnPolicy() )

## Ros communication ##
connect ("LPERA_MotorToJointSpace.out",				"LPERA_JointOutputLimiter.in", 				ConnPolicy() )
connect ("LPERA_JointOutputLimiter.out",			"LPERA_WriteClippedJointAngles.pos_in", 	ConnPolicy() )
connect ("LPERA_WriteClippedJointAngles.out", 		"JointStateAggregator.left_arm", 			ConnPolicy() )

## Safety ##
connect ("LPERA_Controller.safe",					"Supervisor.left_arm_error", 				ConnPolicy() )
connect ("LPERA_Controller.safe",					"Soem.Slave_1014.enablePort", 				ConnPolicy() )
connect ("LPERA_Controller.safe",					"Soem.Slave_1015.enablePort", 				ConnPolicy() )
connect ("LPERA_Controller.safe",					"Soem.Slave_1016.enablePort", 				ConnPolicy() )

## Homing ##
connect ("LPERA_Homing.homing_finished",			"Supervisor.left_arm_homingfinished", 		ConnPolicy() )
connect ("LPERA_AnalogIns.out2",					"LPERA_Homing.measAbsJointAnglesPort", 		ConnPolicy() )
connect ("LPERA_Homing.homJntAnglesPort",			"LPERA_VectorConcatenate.in1", 				ConnPolicy() )
connect ("LPERA_Homing.resetInterpolatorPort",		"LPERA_ReferenceInterpolator.resetValues", 	ConnPolicy() )
connect ("LPERA_Homing.reNullPort",					"LPERA_ReadEncoders.in_reNull", 			ConnPolicy() )
connect ("LPERA_Homing.reNullPort",					"LPERA_GripperControl.reNullPort", 			ConnPolicy() )
connect ("LPERA_Controller.controlerrors",			"LPERA_Homing.errorPort", 					ConnPolicy() )
connect ("LPERA_MotorToJointSpace.out",				"LPERA_Homing.measRelJointAnglesPort", 		ConnPolicy() )
connect ("LPERA_Homing.endpos_out",					"LPERA_VectorConcatenate.in1", 				ConnPolicy() ) 

## Diagnostics ##
connect ("LPERA_VectorConcatenate.out", 			"LPERA_Diagnostics.vec1", 					ConnPolicy() )
connect ("LPERA_Controller.controlerrors",			"LPERA_Diagnostics.vec2", 					ConnPolicy() )
connect ("LPERA_ReadReferences.pos_out", 			"LPERA_Diagnostics.vec3", 					ConnPolicy() )

#### CONNECT ROS STREAMS ####
stream ("LPERA_WriteClippedJointAngles.out", 		ros.topic("/amigo/left_arm/measurements"))
stream ("LPERA_ReadReferences.in", 					ros.topic("/amigo/left_arm/references"))
stream ("LPERA_GripperControl.gripper_measurement", ros.topic("/amigo/left_gripper/measurements"))
stream ("LPERA_GripperControl.gripper_command", 	ros.topic("/amigo/left_gripper/references"))
stream ("LPERA_Diagnostics.diagnostics", 			ros.topic("/diagnostics"));

#### START COMPONENTS ####
Supervisor.AddAllwaysOnPeer ("LPERA_Diagnostics")
Supervisor.AddAllwaysOnPeer ("LPERA_WriteClippedJointAngles")
Supervisor.AddAllwaysOnPeer ("LPERA_ReadEncoders")
Supervisor.AddAllwaysOnPeer ("LPERA_Controller")
Supervisor.AddAllwaysOnPeer ("LPERA_ReferenceInterpolator")

Supervisor.AddHomingOnlyPeer ("LPERA_Homing", BODYNUMBER )

Supervisor.AddOpOnlyPeer ("LPERA_ReadReferences", BODYNUMBER )

Supervisor.AddEnabledPeer ("LPERA_VectorConcatenate", BODYNUMBER )
Supervisor.AddEnabledPeer ("LPERA_MotorToJointSpace", BODYNUMBER )
Supervisor.AddEnabledPeer ("LPERA_JointToMotorSpace", BODYNUMBER )
Supervisor.AddEnabledPeer ("LPERA_JointOutputLimiter", BODYNUMBER )
Supervisor.AddEnabledPeer ("LPERA_SensorTorques", BODYNUMBER )
Supervisor.AddEnabledPeer ("LPERA_GripperControl", BODYNUMBER )
