#Import all the dependencies from the amigo_etherCAT package. 
#This enables you to import components from all these packages.
import("amigo_etherCAT")
trigger
var ConnPolicy positionsData;		positionsData.size = 1;		positionsData.transport = 3;	positionsData.name_id = "positionsData";		
var ConnPolicy forcesData;			forcesData.size = 1;		forcesData.transport = 3;		forcesData.name_id = "forcesData";		
var ConnPolicy supplyData;			supplyData.size = 1;		supplyData.transport = 3;		supplyData.name_id = "supplyData";	
var ConnPolicy spareanalogData;		spareanalogData.size = 1;	spareanalogData.transport = 3;	spareanalogData.name_id = "spareanalogData";		
var ConnPolicy encoderData;			encoderData.size = 1;		encoderData.transport = 3;		encoderData.name_id = "encoderData";	
var ConnPolicy currentsData;		currentsData.size = 1;		currentsData.transport = 3;		currentsData.name_id = "currentsData";
var double Ts = 0.001

### LOAD SOEM COMPONENT FOR ETHERCAT COMMUNICATION ###
#This component enables communication with EtherCAT through the SoemMaster component.
loadComponent("Soem","soem_master::SoemMasterComponent")
#Configure the component. This looks for connected EtherCAT slaves and creates ports for all of the slaves.
Soem.configure
#Set a realtime priority to this component and run it every 1ms.
setActivity("Soem",Ts,HighestPriority,ORO_SCHED_RT)

### SINEWAVE GENERATOR
#loadComponent("SineWave","SOURCES::SineWave")
#SineWave.frequency = array (1.0, 1.0, 1.0)
#SineWave.phase = array (0.0, 0.0, 0.0)
#SineWave.amplitude = array (20.0, 20.0, 20.0)
#SineWave.bias = array (0.0, 0.0, 0.0)
#SineWave.vector_size = 3
#SineWave.setPeriod(Ts)
#SineWave.configure	

### GENERATE A CONST SIGNAL
loadComponent("CONST","SOURCES::ConstantSignal")
CONST.value = array (-1.0, -1.0, -1.0)
CONST.vector_size = 3
CONST.setPeriod(Ts)
CONST.configure

### STREAM TO ROS AND CONNECT FEEDFORWARD
stream("Soem.Slave_1002.positionSensors"	,positionsData)
stream("Soem.Slave_1002.forceSensors"		,forcesData)
stream("Soem.Slave_1002.supplyVoltages"		,supplyData)
stream("Soem.Slave_1002.spareAnalogIns"		,spareanalogData)
stream("Soem.Slave_1002.encoderAngles"		,encoderData)
connect("CONST.out","Soem.Slave_1002.pwmDutyMotorsIn", ConnPolicy() )

Soem.start
CONST.start
#Slave_1002.write_pwm(0,0,0)

#waitForInterrupt
#kickOutAll 
#quit
