########################################################################
#                                                                      #
# Simple Open EtherCAT Master (SOEM) deployer file 				   	   #
#                                                                      #
#                                                                      #
#                                                                      #
#                                                                      #
########################################################################

#### IMPORT PACKAGE ####
# To be able to load components from this package and all packages in the manifest
import("amigo_etherCAT")
trigger

#### DECLARATION OF PARAMETERS ####
var double Ts = 0.001

#### LOAD SUPERVISOR ###
loadComponent("Supervisor","AMIGO::Supervisor")
Supervisor.configure
setActivity("Supervisor",0.0,LowestPriority,ORO_SCHED_OTHER)
#Supervisor.start
stream("Supervisor.rosemergency", ros.topic("/emergency_switch"));
stream("Supervisor.rosshutdown", ros.topic("/etherCAT_shutdown")); 
stream("Supervisor.rosetherCATenabled", ros.topic("/etherCAT_enabled")); 

#### LOAD JOINTSTATEAGGREGATOR ####
# Is used to push all joint measurement into one message for the /joint_states topic for the state publisher
# By listing ALL joints, rviz and the environment server will work properly even if some components are not initialized
loadComponent("JointStateAggregator","ROS::JointStateAggregator")
addPeer("Supervisor","JointStateAggregator")
setActivity("JointStateAggregator",0.02,LowestPriority, ORO_SCHED_OTHER)
JointStateAggregator.configure
stream("JointStateAggregator.out", ros.topic("/amigo/joint_states"))

### LOAD SOEM COMPONENT FOR ETHERCAT COMMUNICATION ###
#This component enables communication with EtherCAT through the SoemMaster component.
loadComponent("Soem","soem_master::SoemMasterComponent")
addPeer("Supervisor","Soem")
#Configure the component. This looks for connected EtherCAT slaves and creates ports for all of the slaves.
Soem.configure
#Set a realtime priority to this component and run it every 1ms.
setActivity("Soem",Ts,HighestPriority,ORO_SCHED_RT)
connect ("Soem.Slave_100f.running", "Supervisor.serialRunning", ConnPolicy() )

#### LOAD COMPONENT TO ENABLE ANALOG OUTS ###
#This component aggregates all the signals from the controllers and sends them to the EtherCAT stack at once.
loadComponent("AnalogOuts","SOEM::AnalogOuts")
addPeer("Supervisor","AnalogOuts")
AnalogOuts.configure
setActivity("AnalogOuts",0.0,HighestPriority,ORO_SCHED_RT)
AnalogOuts.max_volt = array ( 5.0, 5.0, 5.0, 5.0, 5.0, 0.0, 0.0, 0.0 )
connect ("AnalogOuts.Analog_out","Soem.Slave_100d.values", ConnPolicy() ); # 4x[volt]

#### LOAD COMPONENT TO ENABLE ANALOG INS ###
loadComponent("AnalogIns","SOEM::AnalogIns")
addPeer("Supervisor","AnalogIns")
AnalogIns.configure
setActivity("AnalogIns",1.0,LowestPriority,ORO_SCHED_OTHER)
connect ("AnalogIns.in","Soem.Slave_100e.values", ConnPolicy() );
stream("AnalogIns.out1", ros.topic("/battery_value"))

#### LOAD COMPONENT TO ENABLE DIGITAL OUTS (Slave_100b) ###
loadComponent("DigitalOuts","SOEM::DigitalOuts")
addPeer("Supervisor","DigitalOuts")
connect ("DigitalOuts.digital_out","Soem.Slave_100b.bits", ConnPolicy() )
DigitalOuts.configure
setActivity("DigitalOuts",0.0,HighestPriority/2,ORO_SCHED_RT)

#### LOAD COMPONENT TO ENABLE DIGITAL OUTS (Slave_100c) ###
loadComponent("DigitalOuts2","SOEM::DigitalOuts")
addPeer("Supervisor","DigitalOuts2")
connect ("DigitalOuts2.digital_out","Soem.Slave_100c.bits", ConnPolicy() )
DigitalOuts2.configure
setActivity("DigitalOuts2",0.0,HighestPriority/2,ORO_SCHED_RT)

#### LOAD COMPONENT TO ENABLE DIGITAL INS (Slave_1009) ###
loadComponent("DigitalIns","SOEM::DigitalIns")
addPeer("Supervisor","DigitalIns")
DigitalIns.setPeriod(0.1)
connect ("Soem.Slave_1009.bits", "DigitalIns.in", ConnPolicy() )
stream("DigitalIns.out1", ros.topic("/fuse1"))
stream("DigitalIns.out2", ros.topic("/fuse2"))
stream("DigitalIns.out3", ros.topic("/fuse3"))
stream("DigitalIns.out4", ros.topic("/fuse4"))
DigitalIns.flip_out5 = 1
stream("DigitalIns.out5", ros.topic("/runstop"))
DigitalIns.flip_out6 = 1
stream("DigitalIns.out6", ros.topic("/emergency_switch"))
DigitalIns.configure
setActivity("DigitalIns",0.1,LowestPriority,ORO_SCHED_OTHER)

#### LOAD COMPONENT TO ENABLE DIGITAL INS (Slave_100a) ###
loadComponent("DigitalIns2","SOEM::DigitalIns")
addPeer("Supervisor","DigitalIns2")
connect ("Soem.Slave_100a.bits", "DigitalIns2.in", ConnPolicy() )
DigitalIns2.configure
setActivity("DigitalIns2",Ts,HighestPriority,ORO_SCHED_RT)
# Temp
stream("DigitalIns2.out2", ros.topic("/spindle_endstop") )

#### LOAD COMPONENT TO ENABLE ANALOG OUTS PERA ###
#This component splits the doubles vector from the controllers and sends them to the right Soem Slaves
loadComponent("RPERA_AnalogOutsPera","SOEM::AnalogOutsPera")
addPeer("Supervisor","RPERA_AnalogOutsPera")
RPERA_AnalogOutsPera.configure
setActivity("RPERA_AnalogOutsPera",0.0,HighestPriority,ORO_SCHED_RT)
connect ("RPERA_AnalogOutsPera.out1","Soem.Slave_1010.pwmDutyMotorsIn", ConnPolicy() );
connect ("RPERA_AnalogOutsPera.out2","Soem.Slave_1011.pwmDutyMotorsIn", ConnPolicy() );
connect ("RPERA_AnalogOutsPera.out3","Soem.Slave_1012.pwmDutyMotorsIn", ConnPolicy() );

#### LOAD COMPONENT TO ENABLE ANALOG OUTS PERA ###
#This component splits the doubles vector from the controllers and sends them to the right Soem Slaves
loadComponent("LPERA_AnalogOutsPera","SOEM::AnalogOutsPera")
addPeer("Supervisor","LPERA_AnalogOutsPera")
LPERA_AnalogOutsPera.configure
setActivity("LPERA_AnalogOutsPera",0.0,HighestPriority,ORO_SCHED_RT)
connect ("LPERA_AnalogOutsPera.out1","Soem.Slave_1014.pwmDutyMotorsIn", ConnPolicy() );
connect ("LPERA_AnalogOutsPera.out2","Soem.Slave_1015.pwmDutyMotorsIn", ConnPolicy() );
connect ("LPERA_AnalogOutsPera.out3","Soem.Slave_1016.pwmDutyMotorsIn", ConnPolicy() );

#### LOAD COMPONENT TO ENABLE ANALOG INS PERA ###
#This component aggregates all the signals from the Soem Slaves and puts them into a doubles for the position 
# and a doubles for the force and then sends these doubles to the right component
loadComponent("RPERA_AnalogInsPera","SOEM::AnalogInsPera")
addPeer("Supervisor","RPERA_AnalogInsPera")
RPERA_AnalogInsPera.configure
setActivity("RPERA_AnalogInsPera",Ts,HighestPriority,ORO_SCHED_RT)
connect ("Soem.Slave_1010.forceSensors","RPERA_AnalogInsPera.in_for1", ConnPolicy() )  
connect ("Soem.Slave_1011.forceSensors","RPERA_AnalogInsPera.in_for2", ConnPolicy() )  
connect ("Soem.Slave_1012.forceSensors","RPERA_AnalogInsPera.in_for3", ConnPolicy() )   
connect ("Soem.Slave_1010.positionSensors","RPERA_AnalogInsPera.in_pos1", ConnPolicy() )  
connect ("Soem.Slave_1011.positionSensors","RPERA_AnalogInsPera.in_pos2", ConnPolicy() )  
connect ("Soem.Slave_1012.positionSensors","RPERA_AnalogInsPera.in_pos3", ConnPolicy() )

#### LOAD COMPONENT TO ENABLE ANALOG INS PERA ###
#This component aggregates all the signals from the Soem Slaves and puts them into a doubles for the position 
# and a doubles for the force and then sends these doubles to the right component
loadComponent("LPERA_AnalogInsPera","SOEM::AnalogInsPera")
addPeer("Supervisor","LPERA_AnalogInsPera")
LPERA_AnalogInsPera.configure
setActivity("LPERA_AnalogInsPera",Ts,HighestPriority,ORO_SCHED_RT)
connect ("Soem.Slave_1014.forceSensors","LPERA_AnalogInsPera.in_for1", ConnPolicy() )  
connect ("Soem.Slave_1015.forceSensors","LPERA_AnalogInsPera.in_for2", ConnPolicy() )  
connect ("Soem.Slave_1016.forceSensors","LPERA_AnalogInsPera.in_for3", ConnPolicy() )   
connect ("Soem.Slave_1014.positionSensors","LPERA_AnalogInsPera.in_pos1", ConnPolicy() )  
connect ("Soem.Slave_1015.positionSensors","LPERA_AnalogInsPera.in_pos2", ConnPolicy() )  
connect ("Soem.Slave_1016.positionSensors","LPERA_AnalogInsPera.in_pos3", ConnPolicy() )

#### LOAD COMPONENT TO ENABLE AMPLIFIERS (D04) ####
loadComponent("EnableAmps","SOURCES::ConstantBool")
addPeer("Supervisor","EnableAmps")
setActivity("EnableAmps",Ts,HighestPriority,ORO_SCHED_RT)
EnableAmps.configure
EnableAmps.value = true
connect ("EnableAmps.out", "DigitalOuts.in1", ConnPolicy() ); # Enable amps (D04:DO1)
connect ("EnableAmps.out", "DigitalOuts.in2", ConnPolicy() ); # tue-logo

#### START COMPONENTS ####
Supervisor.AddAllwaysOnPeer ("JointStateAggregator")
Supervisor.AddAllwaysOnPeer ("AnalogOuts")
Supervisor.AddAllwaysOnPeer ("RPERA_AnalogOutsPera")
Supervisor.AddAllwaysOnPeer ("LPERA_AnalogOutsPera")
Supervisor.AddAllwaysOnPeer ("DigitalOuts")
Supervisor.AddAllwaysOnPeer ("DigitalOuts2")
Supervisor.AddAllwaysOnPeer ("Soem")
Supervisor.AddAllwaysOnPeer ("AnalogIns")
Supervisor.AddAllwaysOnPeer ("RPERA_AnalogInsPera")
Supervisor.AddAllwaysOnPeer ("LPERA_AnalogInsPera")
Supervisor.AddAllwaysOnPeer ("DigitalIns")
Supervisor.AddAllwaysOnPeer ("DigitalIns2")
Supervisor.AddAllwaysOnPeer ("EnableAmps")
Supervisor.start()
