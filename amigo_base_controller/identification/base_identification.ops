import("amigo_base_controller")

var double Ts = 0.001

var double WHEELRAD = 0.075*0.9825; # Corrected for effective wheel radius
var double DIS2CENT = 0.29072
var double HALFSQRT2 = 0.7071
var double TORQUE2CURRENT = 1.0/0.0302; # [Amp/Nm]
var double CURRENT2VOLT = 1.0/1.0
var double GEARRATIO = 8.0/343.0
var double TWOPI = 2*3.141592
var double ENCODERCOUNTS = 500.0*4.0

var double ENC2SI = TWOPI*GEARRATIO/ENCODERCOUNTS

#Setting up reporting
var ConnPolicy NoBuffer;
NoBuffer.type = BUFFER;
NoBuffer.size = 1 # 100 seconds of data

### READ WHEEL ENCODERS ###
loadComponent("ReadWheelEncoders","SOEM::ReadEncoders")
#loadService("ReadWheelEncoders","rosparam")
#ReadWheelEncoders.rosparam.refreshProperties()
ReadWheelEncoders.encoderbits = 65536
ReadWheelEncoders.enc2SI = array (ENC2SI, ENC2SI, ENC2SI, ENC2SI)
ReadWheelEncoders.configure
setActivity("ReadWheelEncoders",Ts,HighestPriority,ORO_SCHED_RT)
connect ("Soem.Slave_1002.Slave_1002_value","ReadWheelEncoders.enc1_in", NoBuffer ); #enc1[-]
connect ("Soem.Slave_1003.Slave_1003_value","ReadWheelEncoders.enc2_in", NoBuffer ); #enc2[-]
connect ("Soem.Slave_1004.Slave_1004_value","ReadWheelEncoders.enc3_in", NoBuffer ); #enc3[-]
connect ("Soem.Slave_1005.Slave_1005_value","ReadWheelEncoders.enc4_in", NoBuffer ); #enc4[-]

### DECOUPLE POSITION ###
loadComponent("BaseDecouplePosition","MatrixTransform")
BaseDecouplePosition.Nrows = 3
BaseDecouplePosition.Ncolumns = 4
BaseDecouplePosition.configure
setActivity("BaseDecouplePosition",0.0,HighestPriority,ORO_SCHED_RT)
BaseDecouplePosition.function1 = array (-0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2)
BaseDecouplePosition.function2 = array ( 0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2)
BaseDecouplePosition.function3 = array ( 0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT)
connect ("ReadWheelEncoders.out","BaseDecouplePosition.in", NoBuffer ) #4x[rad]

### READ REFERENCE VELOCITIES ###
loadComponent("BaseReadReferenceVelocities","SOURCES::ConstantSignal")
BaseReadReferenceVelocities.vector_size = 3
BaseReadReferenceVelocities.value = array( 0.0, 0.0, 1.0)
setActivity("BaseReadReferenceVelocities",0.01,LowestPriority,ORO_SCHED_OTHER)
BaseReadReferenceVelocities.configure

    
### VELOCITY TO POSITION ###
loadComponent("BaseVel2Pos","MATH::Integrator")
BaseVel2Pos.vector_size = 3
BaseVel2Pos.configure
setActivity("BaseVel2Pos",0.0,LowestPriority,ORO_SCHED_OTHER)
connect ("BaseReadReferenceVelocities.out","BaseVel2Pos.in", NoBuffer ); #[m/s \n m/s \n rad/s]

### DECOUPLE REFERENCE ###
loadComponent("BaseDecoupleReference","MatrixTransform")
BaseDecoupleReference.Nrows = 4
BaseDecoupleReference.Ncolumns = 3
BaseDecoupleReference.configure
setActivity("BaseDecoupleReference",0.0,LowestPriority,ORO_SCHED_OTHER)
BaseDecoupleReference.function1 = array ( -HALFSQRT2/WHEELRAD,  HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BaseDecoupleReference.function2 = array ( -HALFSQRT2/WHEELRAD, -HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BaseDecoupleReference.function3 = array (  HALFSQRT2/WHEELRAD, -HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BaseDecoupleReference.function4 = array (  HALFSQRT2/WHEELRAD,  HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
connect ("BaseVel2Pos.out","BaseDecoupleReference.in", NoBuffer ); # [N \n N \n Nm]
    
    
### CALCULATE ERRORS ###
loadComponent("BaseCalculateErrors","MATH::Subtraction")
BaseCalculateErrors.vectorsize = 4;
connect ("BaseDecoupleReference.out","BaseCalculateErrors.in_plus", NoBuffer ); #[m \n m \n rad]
connect ("ReadWheelEncoders.out","BaseCalculateErrors.in_minus", NoBuffer ); #[m \n m \n rad]
BaseCalculateErrors.configure
setActivity("BaseCalculateErrors",0.0,HighestPriority,ORO_SCHED_RT)

### GAIN ###
loadComponent("BaseControllerGains","MATH::Gains")
connect ("BaseCalculateErrors.out","BaseControllerGains.in", NoBuffer )
BaseControllerGains.vectorsize = 4;
BaseControllerGains.gain = array (1.0, 1.0, 1.0, 1.0)
BaseControllerGains.configure
setActivity("BaseControllerGains",0.0,HighestPriority,ORO_SCHED_RT)

### LEADLAG ###
loadComponent("BaseLeadLag","FILTERS::LeadLags")
connect ("BaseControllerGains.out","BaseLeadLag.in", NoBuffer )
BaseLeadLag.vector_size = 4;
BaseLeadLag.sampling_time = Ts
BaseLeadLag.zero_frequency = array (5.0, 5.0, 5.0, 5.0)
BaseLeadLag.pole_frequency = array (20.0, 20.0, 20.0, 20.0)
BaseLeadLag.configure
setActivity("BaseLeadLag",0.0,HighestPriority,ORO_SCHED_RT)

### LOWPASS ###
loadComponent("BaseSecondOrderLowPass","FILTERS::SecondOrderLowPasses")
connect ("BaseLeadLag.out","BaseSecondOrderLowPass.in", NoBuffer )
BaseSecondOrderLowPass.vector_size = 4;
BaseSecondOrderLowPass.sampling_time = Ts
BaseSecondOrderLowPass.pole_frequency = array (250.0, 250.0, 250.0, 250.0)
BaseSecondOrderLowPass.pole_damping = array (0.7, 0.7, 0.7, 0.7)
BaseSecondOrderLowPass.configure
setActivity("BaseSecondOrderLowPass",0.0,HighestPriority,ORO_SCHED_RT)


### ADD NOISE ###
loadComponent("BaseNoise","SOURCES::UniformRandomNumber")
setActivity("BaseNoise",Ts/3,HighestPriority,ORO_SCHED_RT)
BaseNoise.vector_size = 4
BaseNoise.configure
BaseNoise.minimum = noise_min
BaseNoise.maximum = noise_max


loadComponent("BaseAddNoise","MATH::Addition")
BaseAddNoise.vectorsize = 4
connect ("BaseNoise.out","BaseAddNoise.in1", NoBuffer );
connect ("BaseSecondOrderLowPass.out","BaseAddNoise.in2_event", NoBuffer )
setActivity("BaseAddNoise",0.0,HighestPriority,ORO_SCHED_RT)
BaseAddNoise.configure


### SI2VOLT ###
loadComponent("BaseSI2Volt","MATH::Gains")
connect ("BaseAddNoise.out","BaseSI2Volt.in", NoBuffer ); # 4x[Nm]
connect ("BaseSI2Volt.out", "AnalogOuts.wheels", NoBuffer ); # Volt
BaseSI2Volt.vectorsize = 4;
var double SI2V = TORQUE2CURRENT * CURRENT2VOLT * GEARRATIO
BaseSI2Volt.gain = array (SI2V, SI2V, SI2V, SI2V)
BaseSI2Volt.configure
setActivity("BaseSI2Volt",0.0,HighestPriority,ORO_SCHED_RT)


#### LOAD COMPONENT FOR SAFETY ###
loadComponent("BaseSafety","AMIGO::BaseSafety")
BaseSafety.max_velocities = array (1.8, 1.0, 3.1415)
BaseSafety.max_errors = array ( 6.0, 6.0, 6.0, 6.0 )
BaseSafety.max_voltage = 3.5
connect ("BaseReadReferenceVelocities.out", "BaseSafety.ref", NoBuffer )
connect ("BaseCalculateErrors.out", "BaseSafety.error", NoBuffer )
connect ("BaseSI2Volt.out", "BaseSafety.voltage", NoBuffer )
connect ("BaseSafety.wheel_amplifiers", "DigitalOuts.amplifiers", NoBuffer ); # amplifiers
connect ("BaseSafety.wheel_amplifiers", "DigitalOuts.tuelights", NoBuffer ); # lights
BaseSafety.configure
setActivity("BaseSafety",0.0,HighestPriority/2,ORO_SCHED_RT)


#### LOAD COMPONENT FOR RESET ###
loadComponent("BaseReset","AMIGO::BaseReset")
connect ("BaseReset.integratorreset", "BaseVel2Pos.reset", NoBuffer )
connect ("BaseDecouplePosition.out", "BaseReset.pos", NoBuffer )
connect ("BaseSafety.wheel_amplifiers", "BaseReset.safe", NoBuffer )
connect ("BaseReset.reset", "BaseSafety.reset", NoBuffer )
stream("BaseReset.rosreset", ros.topic("/reset_base"));
stream("BaseReset.rosemergency", ros.topic("/emergency_switch"));
BaseReset.configure
setActivity("BaseReset",0.0,LowestPriority,ORO_SCHED_OTHER)


#### LOAD COMPONENT TO PUBLISH ODOMETRY ###
loadComponent("Odometry","AMIGO::PublishOdometry")
connect ("BaseDecouplePosition.out", "Odometry.pos", NoBuffer )
stream("Odometry.odom", ros.topic("/odom"));
Odometry.configure
setActivity("Odometry",0.05,LowestPriority,ORO_SCHED_OTHER)

#### LOAD COMPONENT TO PUBLISH DIAGNOSTICS ###
loadComponent("BaseDiagnostics","ROS::RosDiagnostics")
stream("BaseDiagnostics.diagnostics", ros.topic("/diagnostics"));
stream("BaseDiagnostics.diagnostics", ros.topic("/base_diagnostics"));
BaseDiagnostics.statusname = "BaseController"
BaseDiagnostics.NumberOfVectorPorts = 3
BaseDiagnostics.NumberOfBoolPorts = 1
BaseDiagnostics.configure
setActivity("BaseDiagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
BaseDiagnostics.vecname1 = "Reference"
connect ("BaseReadReferenceVelocities.out", "BaseDiagnostics.vec1", NoBuffer )
BaseDiagnostics.vecname2 = "Error"
connect ("BaseCalculateErrors.out", "BaseDiagnostics.vec2", NoBuffer )
BaseDiagnostics.vecname3 = "Voltage"
connect ("BaseSI2Volt.out", "BaseDiagnostics.vec3", NoBuffer )
BaseDiagnostics.boolname1 = "Amplifiers"
connect ("BaseSafety.wheel_amplifiers", "BaseDiagnostics.bool1", NoBuffer )


#### LOAD COMPONENT TO PUBLISH STATUS ###
loadComponent("BaseStatus","ROS::BoolToROS")
BaseStatus.NumberOfBoolPorts = 1
BaseStatus.configure
setActivity("BaseStatus",1.0,LowestPriority,ORO_SCHED_OTHER)
connect ("BaseSafety.wheel_amplifiers", "BaseStatus.bool_in1", NoBuffer )
stream("BaseStatus.bool_out1", ros.topic("/base_status"));



#Setting up reporting
var ConnPolicy LargeBuffer;
LargeBuffer.type = BUFFER;
LargeBuffer.size = 100000 # 100 seconds of data

loadComponent("BaseReporterMux", "SIGNALROUTING::VectorConcatenate")
BaseReporterMux.number_of_inputs = 3
BaseReporterMux.configure
connect ("ReadWheelEncoders.out", "BaseReporterMux.in1", NoBuffer )
connect ("BaseSecondOrderLowPass.out", "BaseReporterMux.in2", NoBuffer )
connect ("BaseAddNoise.out", "BaseReporterMux.in3_event", NoBuffer )
setActivity("BaseReporterMux",0.0,HighestPriority,ORO_SCHED_RT)

loadComponent("BaseReporter", "CUSTOM::Reporter")
BaseReporter.ReportFile = "/home/amigo/basereports.dat"
BaseReporter.number_of_inputs = 1
BaseReporter.FirstLine = "TimeStamp PlantOut1 PlantOut2 PlantOut3 PlantOut4 ControllerOut1 ControllerOut2 ControllerOut3 ControllerOut4 PlantIn1 PlantIn2 PlantIn3 PlantIn4"
BaseReporter.configure
connect ("BaseReporterMux.out", "BaseReporter.in1", LargeBuffer )
connect ("BaseReporterMux.out", "BaseReporter.trigger", LargeBuffer )
setActivity("BaseReporter",0.0,LowestPriority,ORO_SCHED_OTHER)


#Starting components (BaseReset should(might) be started BEFORE BaseVel2Pos)
BaseDiagnostics.start
BaseReadReferenceVelocities.start
BaseReset.start
ReadWheelEncoders.start
BaseVel2Pos.start
BaseDecoupleReference.start
BaseCalculateErrors.start
BaseControllerGains.start
BaseLeadLag.start
BaseSecondOrderLowPass.start
BaseNoise.start
BaseAddNoise.start
BaseSI2Volt.start
BaseSafety.start
BaseDecouplePosition.start
Odometry.start
BaseStatus.start

BaseReporterMux.start
BaseReporter.start
