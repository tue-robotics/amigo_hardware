import("amigo_base_controller")
var int buffersize = 16384


### ADD NOISE COMPONENT ###
loadComponent("BaseNoise","SOURCES::UniformRandomNumber")
setActivity("BaseNoise",ReadWheelEncoders.getPeriod/3,HighestPriority,ORO_SCHED_RT); #Since this component is not triggered, it runs at a higher frequency to make sure every timestep a new random number is available
BaseNoise.vector_size = 4
BaseNoise.configure
BaseNoise.minimum = noise_min; #These parameters are set by a script
BaseNoise.maximum = noise_max


### Sum this noise with the signal coming from the controller ###
loadComponent("BaseAddNoise","MATH::Addition")
BaseAddNoise.vectorsize = 4
connect ("BaseNoise.out","BaseAddNoise.in1", ConnPolicy() )
BaseSecondOrderLowPass.out.disconnect()
connect ("BaseSecondOrderLowPass.out","BaseAddNoise.in2_event", ConnPolicy() )
connect ("BaseAddNoise.out","BaseSI2Volt.in", ConnPolicy() )
setActivity("BaseAddNoise",0.0,HighestPriority,ORO_SCHED_RT)
BaseAddNoise.configure


### Setting up tracing ###
var ConnPolicy tracingpolicy
tracingpolicy.type = BUFFER
tracingpolicy.size = buffersize
tracingpolicy.lock_policy = LOCKED

loadComponent("Tracing","Signal::Tracing")
setActivity("Tracing",0.0,HighestPriority,ORO_SCHED_RT)
Tracing.vector_sizes = array ( 4.0, 4.0, 4.0 )
Tracing.buffersize = buffersize
Tracing.filename = "/tmp/wheel.dat"
Tracing.Ts = ReadWheelEncoders.getPeriod
Tracing.Crash_if_done = 1; #If 1 the controllers are terminated after gathering data
Tracing.configure
connect ("ReadWheelEncoders.out","Tracing.in1", tracingpolicy )
connect ("BaseSecondOrderLowPass.out","Tracing.in2", tracingpolicy )
connect ("BaseAddNoise.out","Tracing.in3", tracingpolicy )


#Starting components
BaseNoise.start
BaseAddNoise.start

Tracing.start
