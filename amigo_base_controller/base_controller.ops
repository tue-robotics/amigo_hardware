import("amigo_base_controller")

var double Ts = 0.001

var double WHEELRAD = 0.075*0.9825; # Corrected for effective wheel radius
var double DIS2CENT = 0.29072
var double HALFSQRT2 = 0.7071
var double TORQUE2CURRENT = 1.0/0.0302; # [Amp/Nm]
var double CURRENT2VOLT = 1.0/1.0
var double GEARRATIO = 1.0/12.0
var double TWOPI = 2*3.141592

### READ WHEEL ENCODERS ###
loadComponent("ReadWheelEncoders","ReadEncoders")
ReadWheelEncoders.setPeriod(Ts)
#loadService("ReadWheelEncoders","rosparam")
#ReadWheelEncoders.rosparam.refreshProperties()
ReadWheelEncoders.encoderbits = 65536
ReadWheelEncoders.enc2SI = array (2.61799388e-4, 2.61799388e-4, 2.61799388e-4, 2.61799388e-4)
ReadWheelEncoders.configure
connect ("Soem.Slave_1002.Slave_1002_value","ReadWheelEncoders.enc1_in", ConnPolicy() ); #enc1[-]
connect ("Soem.Slave_1003.Slave_1003_value","ReadWheelEncoders.enc2_in", ConnPolicy() ); #enc2[-]
connect ("Soem.Slave_1004.Slave_1004_value","ReadWheelEncoders.enc3_in", ConnPolicy() ); #enc3[-]
connect ("Soem.Slave_1005.Slave_1005_value","ReadWheelEncoders.enc4_in", ConnPolicy() ); #enc4[-]

### DECOUPLE POSITION ###
loadComponent("BaseDecouplePosition","MatrixTransform")
BaseDecouplePosition.Nrows = 3
BaseDecouplePosition.Ncolumns = 4
BaseDecouplePosition.configure
BaseDecouplePosition.function1 = array (-0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2)
BaseDecouplePosition.function2 = array ( 0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2)
BaseDecouplePosition.function3 = array ( 0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT)
connect ("ReadWheelEncoders.out","BaseDecouplePosition.in", ConnPolicy() ) #4x[rad]

### READ REFERENCE VELOCITIES ###
loadComponent("BaseReadReferenceVelocities","MSG::ReadTwistMsg")
#loadService("BaseReadReferenceVelocities","rosparam")
#BaseReadReferenceVelocities.rosparam.refreshProperties()
BaseReadReferenceVelocities.max_start_vel = 0.1
BaseReadReferenceVelocities.max_acc = array (0.7, 0.7, 2.0)
BaseReadReferenceVelocities.max_interval = 1.0
#Setting up ROS-topics
stream("BaseReadReferenceVelocities.cmd_vel",base_ROStopics.cmd_vel);
BaseReadReferenceVelocities.setPeriod(0.01)
BaseReadReferenceVelocities.configure
    
### VELOCITY TO POSITION ###
loadComponent("BaseVel2Pos","MATH::Integrator")
BaseVel2Pos.vector_size = 3
BaseVel2Pos.configure
connect ("BaseReadReferenceVelocities.out","BaseVel2Pos.in", ConnPolicy() ); #[m/s \n m/s \n rad/s]

### DECOUPLE REFERENCE ###
loadComponent("BaseDecoupleReference","MatrixTransform")
BaseDecoupleReference.Nrows = 4
BaseDecoupleReference.Ncolumns = 3
BaseDecoupleReference.configure
BaseDecoupleReference.function1 = array ( -HALFSQRT2/WHEELRAD,  HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BaseDecoupleReference.function2 = array ( -HALFSQRT2/WHEELRAD, -HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BaseDecoupleReference.function3 = array (  HALFSQRT2/WHEELRAD, -HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BaseDecoupleReference.function4 = array (  HALFSQRT2/WHEELRAD,  HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
connect ("BaseVel2Pos.out","BaseDecoupleReference.in", ConnPolicy() ); # [N \n N \n Nm]
    
    
### CALCULATE ERRORS ###
loadComponent("BaseCalculateErrors","Substraction")
BaseCalculateErrors.vectorsize = 4;
connect ("BaseDecoupleReference.out","BaseCalculateErrors.in_plus", ConnPolicy() ); #[m \n m \n rad]
connect ("ReadWheelEncoders.out","BaseCalculateErrors.in_minus", ConnPolicy() ); #[m \n m \n rad]
BaseCalculateErrors.configure

### GAIN ###
loadComponent("BaseControllerGains","MATH::Gains")
connect ("BaseCalculateErrors.out","BaseControllerGains.in", ConnPolicy() )
BaseControllerGains.vectorsize = 4;
BaseControllerGains.gain = array (0.5, 0.5, 0.5, 0.5)
BaseControllerGains.configure

### LEADLAG ###
loadComponent("BaseLeadLag","FILTERS::LeadLags")
connect ("BaseControllerGains.out","BaseLeadLag.in", ConnPolicy() )
BaseLeadLag.vector_size = 4;
BaseLeadLag.sampling_time = Ts
BaseLeadLag.zero_frequency = array (5.0, 5.0, 5.0, 5.0)
BaseLeadLag.pole_frequency = array (20.0, 20.0, 20.0, 20.0)
BaseLeadLag.configure

### LOWPASS ###
loadComponent("BaseSecondOrderLowPass","FILTERS::SecondOrderLowPasses")
connect ("BaseLeadLag.out","BaseSecondOrderLowPass.in", ConnPolicy() )
BaseSecondOrderLowPass.vector_size = 4;
BaseSecondOrderLowPass.sampling_time = Ts
BaseSecondOrderLowPass.pole_frequency = array (250.0, 250.0, 250.0, 250.0)
BaseSecondOrderLowPass.pole_damping = array (0.7, 0.7, 0.7, 0.7)
BaseSecondOrderLowPass.configure

### FEEDFORWARD ###
#loadComponent("BaseFeedForward","MATH::Gains")
#connect ("BaseReadReferenceVelocities.out","BaseFeedForward.in", ConnPolicy() )
#BaseFeedForward.vectorsize = 3;
#BaseFeedForward.gain = array (0.0, 0.0, 0.0, 0.0)
#BaseFeedForward.configure

### ADDITION ###
#loadComponent("BaseSum","MATH::Addition")
#connect ("BaseFeedForward.out","BaseSum.in1", ConnPolicy() )
#connect ("BaseSecondOrderLowPass.out","BaseSum.in2_event", ConnPolicy() )
#BaseSum.vectorsize = 3;
#BaseSum.configure

### SI2VOLT ###
loadComponent("BaseSI2Volt","MATH::Gains")
connect ("BaseSecondOrderLowPass.out","BaseSI2Volt.in", ConnPolicy() ); # 4x[Nm]
connect ("BaseSI2Volt.out", "AnalogOuts.wheels", ConnPolicy() ); # Volt
BaseSI2Volt.vectorsize = 4;
var double SI2V = TORQUE2CURRENT * CURRENT2VOLT * GEARRATIO
BaseSI2Volt.gain = array (SI2V, SI2V, SI2V, SI2V)
BaseSI2Volt.configure

#### LOAD COMPONENT FOR SAFETY ###
loadComponent("BaseSafety","AMIGO::BaseSafety")
BaseSafety.max_velocities = array (1.8, 1.0, 3.1415)
BaseSafety.max_errors = array ( 6.0, 6.0, 6.0, 6.0 )
BaseSafety.max_voltage = 3.5
connect ("BaseReadReferenceVelocities.out", "BaseSafety.ref", ConnPolicy() )
connect ("BaseCalculateErrors.out", "BaseSafety.error", ConnPolicy() )
connect ("BaseSI2Volt.out", "BaseSafety.voltage", ConnPolicy() )
connect ("BaseSafety.wheel_amplifiers", "DigitalOuts.amplifiers", ConnPolicy() ); # amplifiers
connect ("BaseSafety.wheel_amplifiers", "DigitalOuts.tuelights", ConnPolicy() ); # lights
BaseSafety.configure

#### LOAD COMPONENT FOR RESET ###
loadComponent("BaseReset","AMIGO::BaseReset")
connect ("BaseReset.integratorreset", "BaseVel2Pos.reset", ConnPolicy() )
connect ("BaseDecouplePosition.out", "BaseReset.pos", ConnPolicy() )
connect ("BaseSafety.wheel_amplifiers", "BaseReset.safe", ConnPolicy() )
connect ("BaseReset.reset", "BaseSafety.reset", ConnPolicy() )
stream("BaseReset.rosreset",base_ROStopics.reset);
stream("BaseReset.rosemergency",base_ROStopics.emergency_switch);
BaseReset.configure

#### LOAD COMPONENT TO PUBLISH ODOMETRY ###
loadComponent("Odometry","AMIGO::PublishOdometry")
connect ("BaseDecouplePosition.out", "Odometry.pos", ConnPolicy() )
stream("Odometry.odom",base_ROStopics.odom);
Odometry.configure
Odometry.setPeriod(0.05)

#### LOAD COMPONENT TO PUBLISH DIAGNOSTICS ###
loadComponent("BaseDiagnostics","ROS::RosDiagnostics")
stream("BaseDiagnostics.diagnostics",hardware_ROStopics.diagnostics);
stream("BaseDiagnostics.diagnostics",base_ROStopics.base_diagnostics);
BaseDiagnostics.setPeriod(1)
BaseDiagnostics.statusname = "BaseController"
BaseDiagnostics.NumberOfVectorPorts = 3
BaseDiagnostics.NumberOfBoolPorts = 1
BaseDiagnostics.configure
BaseDiagnostics.vecname1 = "Reference"
connect ("BaseReadReferenceVelocities.out", "BaseDiagnostics.vec1", ConnPolicy() )
BaseDiagnostics.vecname2 = "Error"
connect ("BaseCalculateErrors.out", "BaseDiagnostics.vec2", ConnPolicy() )
BaseDiagnostics.vecname3 = "Voltage"
connect ("BaseSI2Volt.out", "BaseDiagnostics.vec3", ConnPolicy() )
BaseDiagnostics.boolname1 = "Amplifiers"
connect ("BaseSafety.wheel_amplifiers", "BaseDiagnostics.bool1", ConnPolicy() )

#### LOAD COMPONENT TO PUBLISH STATUS ###
LoadComponent("BaseStatus","ROS::BoolToROS")
connect ("BaseSafety.wheel_amplifiers", "BaseStatus.bool_in1", ConnPolicy() )
stream("BaseStatus.bool_out1",base_ROStopics.base_status);
BaseStatus.setPeriod(1)
BaseStatus.configure


#Setting up reporting
loadComponent("BaseReporter", "OCL::FileReporting")
#BaseReporter.ReportFile = "/home/amigo/basereports.dat"
#addPeer("BaseReporter","BaseReset.integratorreset")
#BaseReporter.reportPort("BaseReset","out")
#addPeer("BaseReporter","BaseReadReferenceVelocities")
#BaseReporter.reportPort("BaseReadReferenceVelocities","out")
#addPeer("BaseReporter","BaseVel2Pos")
#BaseReporter.reportPort("BaseVel2Pos","out")
#addPeer("BaseReporter","ReadWheelEncoders")
#BaseReporter.reportPort("ReadWheelEncoders","out")
#addPeer("BaseReporter","WheelVel")
#BaseReporter.reportPort("WheelVel","out")
#addPeer("BaseReporter","BaseDecouplePosition")
#BaseReporter.reportPort("BaseDecouplePosition","out")
#addPeer("BaseReporter","BaseCalculateErrors")
#BaseReporter.reportPort("BaseCalculateErrors","out")
#addPeer("BaseReporter","BaseSecondOrderLowPass")
#BaseReporter.reportPort("BaseSecondOrderLowPass","out")
#addPeer("BaseReporter","BaseSI2Volt")
#BaseReporter.reportPort("BaseSI2Volt","out")
#BaseReporter.NullSample = "-1"
#BaseReporter.setPeriod(Ts)


#Starting components (BaseReset should(might) be started BEFORE BaseVel2Pos)
BaseDiagnostics.start
BaseReadReferenceVelocities.start
BaseReset.start
ReadWheelEncoders.start
BaseVel2Pos.start
BaseDecoupleReference.start
BaseCalculateErrors.start
BaseControllerGains.start
BaseLeadLag.start
BaseSecondOrderLowPass.start
#BaseFeedForward.start
#BaseSum.start
BaseSI2Volt.start
BaseSafety.start
BaseDecouplePosition.start
Odometry.start
BaseStatus.start

#BaseReporter.start
