########################################################################
#                                                                      #
# Base controller deployer file to load the controllers for the wheels #
#                                                                      #
# Tim Clephas                                                          #
# Mostly 2011                                                          #
#                                                                      #
# Uses the DeployerComponent available within the OCL for deploying    #
# and connecting components.                                           #
#                                                                      #
########################################################################

### Import amigo_base_controller package. All the components in this package,       ###
### as well as all components from packages mentioned in the manifest can be loaded ###
import("amigo_base_controller")

### Declare several variables that are typical for this setup ###
var double Ts = 0.001
var double WHEELRAD = 0.075*0.9825; # Corrected for effective wheel radius
var double DIS2CENT = 0.29072
var double HALFSQRT2 = 0.7071
var double TORQUE2CURRENT = 1.0/0.0302; # [Amp/Nm]
var double CURRENT2VOLT = 1.0/1.0
var double GEARRATIO = 8.0/343.0
var double TWOPI = 2*3.141592
var double ENCODERCOUNTS = 500.0*4.0
var double ENC2SI = TWOPI*GEARRATIO/ENCODERCOUNTS




### We start by reading the encoders and sending the position information to ROS: ###


### READ WHEEL ENCODERS ###
loadComponent("ReadWheelEncoders","SOEM::ReadEncoders")
ReadWheelEncoders.encoderbits = 65536
ReadWheelEncoders.enc2SI = array (ENC2SI, ENC2SI, ENC2SI, ENC2SI)
ReadWheelEncoders.configure
setActivity("ReadWheelEncoders",Ts,HighestPriority,ORO_SCHED_RT)
connect ("Soem.Slave_1002.Slave_1002_value","ReadWheelEncoders.enc1_in", ConnPolicy() ); #enc1[-]
connect ("Soem.Slave_1003.Slave_1003_value","ReadWheelEncoders.enc2_in", ConnPolicy() ); #enc2[-]
connect ("Soem.Slave_1004.Slave_1004_value","ReadWheelEncoders.enc3_in", ConnPolicy() ); #enc3[-]
connect ("Soem.Slave_1005.Slave_1005_value","ReadWheelEncoders.enc4_in", ConnPolicy() ); #enc4[-]


### DECOUPLE POSITION ###
loadComponent("BaseDecouplePosition","MatrixTransform")
BaseDecouplePosition.Nrows = 3
BaseDecouplePosition.Ncolumns = 4
BaseDecouplePosition.configure
setActivity("BaseDecouplePosition",0.0,HighestPriority,ORO_SCHED_RT)
BaseDecouplePosition.function1 = array (-0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2)
BaseDecouplePosition.function2 = array ( 0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2)
BaseDecouplePosition.function3 = array ( 0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT)
connect ("ReadWheelEncoders.out","BaseDecouplePosition.in", ConnPolicy() )


#### LOAD COMPONENT TO PUBLISH ODOMETRY ###
loadComponent("Odometry","AMIGO::PublishOdometry")
Odometry.configure
setActivity("Odometry",0.05,LowestPriority,ORO_SCHED_OTHER)
connect ("BaseDecouplePosition.out", "Odometry.pos", ConnPolicy() );
stream("Odometry.odom", ros.topic("/odom"));




### Now we read the reference velocities from ROS and close the control loop:


### READ REFERENCE VELOCITIES ###
loadComponent("BaseReadReferenceVelocities","MSG::ReadTwistMsg")
#loadService("BaseReadReferenceVelocities","rosparam")
#BaseReadReferenceVelocities.rosparam.refreshProperties()
BaseReadReferenceVelocities.max_start_vel = 0.7
BaseReadReferenceVelocities.max_acc = array (0.7, 0.7, 2.0)
BaseReadReferenceVelocities.max_interval = 1.0
BaseReadReferenceVelocities.configure
setActivity("BaseReadReferenceVelocities",0.01,LowestPriority,ORO_SCHED_OTHER)
stream ("BaseReadReferenceVelocities.cmd_vel", ros.topic("/cmd_vel"));

### DECOUPLE REFERENCE ###
loadComponent("BaseDecoupleVelReference","MatrixTransform")
BaseDecoupleVelReference.Nrows = 4
BaseDecoupleVelReference.Ncolumns = 3
BaseDecoupleVelReference.configure
setActivity("BaseDecoupleVelReference",0.0,LowestPriority,ORO_SCHED_OTHER)
BaseDecoupleVelReference.function1 = array ( -HALFSQRT2/WHEELRAD,  HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BaseDecoupleVelReference.function2 = array ( -HALFSQRT2/WHEELRAD, -HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BaseDecoupleVelReference.function3 = array (  HALFSQRT2/WHEELRAD, -HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BaseDecoupleVelReference.function4 = array (  HALFSQRT2/WHEELRAD,  HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
connect ("BaseReadReferenceVelocities.out","BaseDecoupleVelReference.in", ConnPolicy() )


### VELOCITY TO POSITION ###
loadComponent("BaseWheelVel2WheelPos","MATH::Integrator")
BaseWheelVel2WheelPos.vector_size = 4
BaseWheelVel2WheelPos.configure
setActivity("BaseWheelVel2WheelPos",0.0,LowestPriority,ORO_SCHED_OTHER)
connect ("BaseDecoupleVelReference.out","BaseWheelVel2WheelPos.in", ConnPolicy() )
connect ("ReadWheelEncoders.out","BaseWheelVel2WheelPos.initial", ConnPolicy() ); # Use current position as initial position


### CALCULATE ERRORS ###
loadComponent("BaseCalculateErrors","MATH::Subtraction")
BaseCalculateErrors.vectorsize = 4;
BaseCalculateErrors.configure
setActivity("BaseCalculateErrors",0.0,HighestPriority,ORO_SCHED_RT)
connect ("BaseWheelVel2WheelPos.out","BaseCalculateErrors.in_plus", ConnPolicy() );
connect ("ReadWheelEncoders.out","BaseCalculateErrors.in_minus", ConnPolicy() ); #[m \n m \n rad]


### GAIN ###
loadComponent("BaseControllerGains","MATH::Gains")
BaseControllerGains.vectorsize = 4;
#BaseControllerGains.gain = array (0.4, 0.4, 0.4, 0.4) # 10-08-12
BaseControllerGains.gain = array (5.0, 5.0, 5.0, 5.0)
BaseControllerGains.configure
setActivity("BaseControllerGains",0.0,HighestPriority,ORO_SCHED_RT)
connect ("BaseCalculateErrors.out","BaseControllerGains.in", ConnPolicy() )


### INTEGRATOR ###
loadComponent("BaseIntegrator","FILTERS::WeakIntegrator")
BaseIntegrator.vector_size = 4;
BaseIntegrator.sampling_time = Ts
BaseIntegrator.zero_frequency = array (0.0001, 0.0001, 0.0001, 0.0001)
BaseIntegrator.configure
setActivity("BaseIntegrator",0.0,HighestPriority,ORO_SCHED_RT)
connect ("BaseControllerGains.out","BaseIntegrator.in", ConnPolicy() )


### LEADLAG ###
loadComponent("BaseLeadLag","FILTERS::LeadLags")
BaseLeadLag.vector_size = 4;
BaseLeadLag.sampling_time = Ts
BaseLeadLag.zero_frequency = array (15.0, 15.0, 15.0, 15.0)
BaseLeadLag.pole_frequency = array (50.0, 50.0, 50.0, 50.0)
BaseLeadLag.configure
setActivity("BaseLeadLag",0.0,HighestPriority,ORO_SCHED_RT)
connect ("BaseIntegrator.out","BaseLeadLag.in", ConnPolicy() )


### LOWPASS ###
loadComponent("BaseSecondOrderLowPass","FILTERS::SecondOrderLowPasses")
BaseSecondOrderLowPass.vector_size = 4;
BaseSecondOrderLowPass.sampling_time = Ts
BaseSecondOrderLowPass.pole_frequency = array (100.0, 100.0, 100.0, 100.0)
BaseSecondOrderLowPass.pole_damping = array (0.7, 0.7, 0.7, 0.7)
BaseSecondOrderLowPass.configure
setActivity("BaseSecondOrderLowPass",0.0,HighestPriority,ORO_SCHED_RT)
connect ("BaseLeadLag.out","BaseSecondOrderLowPass.in", ConnPolicy() )


### SI2VOLT ###
loadComponent("BaseSI2Volt","MATH::Gains")
BaseSI2Volt.vectorsize = 4;
var double SI2V = TORQUE2CURRENT * CURRENT2VOLT * GEARRATIO
BaseSI2Volt.gain = array (SI2V, SI2V, SI2V, SI2V)
BaseSI2Volt.configure
setActivity("BaseSI2Volt",0.0,HighestPriority,ORO_SCHED_RT)
connect ("BaseSecondOrderLowPass.out","BaseSI2Volt.in", ConnPolicy() )
connect ("BaseSI2Volt.out", "AnalogOuts.wheels", ConnPolicy() ); # Send to Soem again for output



### Now the whole control loop is closed. Lets add some aditional components for fun and safety:


#### LOAD COMPONENT FOR SAFETY ###
loadComponent("BaseSafety","AMIGO::BaseSafety")
BaseSafety.max_velocities = array (1.8, 1.0, 3.1415)
BaseSafety.max_errors = array ( 2.2, 2.2, 2.2, 2.2 )
BaseSafety.max_voltage = 9.9
BaseSafety.configure
setActivity("BaseSafety",0.0,HighestPriority/2,ORO_SCHED_RT)
connect ("BaseReadReferenceVelocities.out", "BaseSafety.ref", ConnPolicy() )
connect ("BaseCalculateErrors.out", "BaseSafety.error", ConnPolicy() )
connect ("BaseSI2Volt.out", "BaseSafety.voltage", ConnPolicy() )
connect ("BaseSafety.wheel_amplifiers", "DigitalOuts.amplifiers", ConnPolicy() ); # amplifiers
connect ("BaseSafety.wheel_amplifiers", "DigitalOuts.tuelights", ConnPolicy() ); # lights


#### LOAD COMPONENT TO PUBLISH DIAGNOSTICS ###
loadComponent("BaseDiagnostics","ROS::RosDiagnostics")
BaseDiagnostics.statusname = "BaseController"
BaseDiagnostics.NumberOfVectorPorts = 3
BaseDiagnostics.NumberOfBoolPorts = 1
BaseDiagnostics.configure
setActivity("BaseDiagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
BaseDiagnostics.vecname1 = "Reference"
BaseDiagnostics.vecname2 = "Error"
BaseDiagnostics.vecname3 = "Voltage"
BaseDiagnostics.boolname1 = "Amplifiers"
connect ("BaseReadReferenceVelocities.out", "BaseDiagnostics.vec1", ConnPolicy() )
connect ("BaseCalculateErrors.out", "BaseDiagnostics.vec2", ConnPolicy() )
connect ("BaseSI2Volt.out", "BaseDiagnostics.vec3", ConnPolicy() )
connect ("BaseSafety.wheel_amplifiers", "BaseDiagnostics.bool1", ConnPolicy() )
stream("BaseDiagnostics.diagnostics", ros.topic("/diagnostics"));
stream("BaseDiagnostics.diagnostics", ros.topic("/base_diagnostics"));


#### LOAD COMPONENT TO PUBLISH STATUS ###
loadComponent("BaseStatus","ROS::BoolToROS")
BaseStatus.NumberOfBoolPorts = 1
BaseStatus.configure
setActivity("BaseStatus",1.0,LowestPriority,ORO_SCHED_OTHER)
connect ("BaseSafety.wheel_amplifiers", "BaseStatus.bool_in1", ConnPolicy() )
stream("BaseStatus.bool_out1", ros.topic("/base_status"));


#### LOAD COMPONENT THATS STOPS THE CONTROLLER IF REQUESTED OR REQUIRED ###
loadComponent("BaseSupervisor","AMIGO::BaseSupervisor")
addPeer("BaseSupervisor","BaseReadReferenceVelocities")
BaseSupervisor.AddBaseSupervisoredPeer ("BaseReadReferenceVelocities")
addPeer("BaseSupervisor","BaseDecoupleVelReference")
BaseSupervisor.AddBaseSupervisoredPeer ("BaseDecoupleVelReference")
addPeer("BaseSupervisor","BaseWheelVel2WheelPos")
BaseSupervisor.AddBaseSupervisoredPeer ("BaseWheelVel2WheelPos")
addPeer("BaseSupervisor","BaseCalculateErrors")
BaseSupervisor.AddBaseSupervisoredPeer ("BaseCalculateErrors")
addPeer("BaseSupervisor","BaseControllerGains")
BaseSupervisor.AddBaseSupervisoredPeer ("BaseControllerGains")
addPeer("BaseSupervisor","BaseIntegrator")
BaseSupervisor.AddBaseSupervisoredPeer ("BaseIntegrator")
addPeer("BaseSupervisor","BaseLeadLag")
BaseSupervisor.AddBaseSupervisoredPeer ("BaseLeadLag")
addPeer("BaseSupervisor","BaseSecondOrderLowPass")
BaseSupervisor.AddBaseSupervisoredPeer ("BaseSecondOrderLowPass")
addPeer("BaseSupervisor","BaseSI2Volt")
BaseSupervisor.AddBaseSupervisoredPeer ("BaseSI2Volt")
addPeer("BaseSupervisor","BaseSafety")
BaseSupervisor.AddBaseSupervisoredPeer ("BaseSafety")
stream("BaseSupervisor.rosemergency", ros.topic("/emergency_switch"));
stream("BaseSupervisor.rosstandby", ros.topic("/base_standby"));
stream("BaseSupervisor.base_started", ros.topic("/base_started"));
BaseSupervisor.configure
setActivity("BaseSupervisor",0.0,LowestPriority,ORO_SCHED_OTHER)


### We start by reading the encoders and sending the position information to ROS: ###
#### START COMPONENTS ####
addPeer("Supervisor","ReadWheelEncoders")
Supervisor.AddAllwaysOnPeer ("ReadWheelEncoders")
addPeer("Supervisor","BaseDecouplePosition")
Supervisor.AddAllwaysOnPeer ("BaseDecouplePosition")
addPeer("Supervisor","Odometry")
Supervisor.AddAllwaysOnPeer ("Odometry")


### Now we read the reference velocities from ROS and close the control loop:
BaseReadReferenceVelocities.start
BaseDecoupleVelReference.start
BaseWheelVel2WheelPos.start
BaseCalculateErrors.start
BaseControllerGains.start
BaseLeadLag.start
BaseIntegrator.start
BaseSecondOrderLowPass.start
BaseSI2Volt.start

### Now the whole control loop is closed. Lets add some aditional components for fun and safety:
BaseSafety.start
BaseDiagnostics.start
BaseStatus.start
BaseSupervisor.start

