########################################################################
#                                                                      #
# Head deployer file 											   	   #
#                                                                      #
#                                                                      #
#                                                                      #
#                                                                      #
########################################################################

#### IMPORT PACKAGE ####
# To be able to load components from this package and all packages in the manifest
import("amigo_head_controller")
trigger

#### DECLARATION OF PARAMETERS ####
var double RAD_TO_STEP 	= 195.37860814; # IF YOU CHANGE THIS VARIABLE, ALSO RECALCULATE PAN_MIN, PAN_MAX, TILT_MIN AND TILT_MAX, (From header file) 
var strings JOINT_NAMES = strings( "neck_pan_joint", "neck_tilt_joint" )
# If you want to correct pan or tilt offsets, please add it EXPLICITLY to the pan or tilt offset, e.g. var int PAN_OFFSET = 512 + 3
var int PAN_OFFSET 		= 512; # Center pan dynamixel
var int TILT_OFFSET 	= 512; # Center tilt dynamixel
var int PAN_MIN 		= -306 	;# -1.57*RAD_TO_STEP
var int PAN_MAX 		= 306	;#  1.57*RAD_TO_STEP
var int TILT_MIN 		= -97	;# -0.5 *RAD_TO_STEP
var int TILT_MAX 		= 171	;#  0.88*RAD_TO_STEP
var int BODYNUMBER 		= 5
var string BODYNAME 	= "head"
var bool HOMEABLE 		= false

### NameBodyPart ###
Supervisor.NameBodyPart( BODYNUMBER, BODYNAME, HOMEABLE)

## Pan-tilt controller
loadComponent("HEAD_PanTiltController", "PanTiltController")
addPeer("Supervisor","HEAD_PanTiltController")
HEAD_PanTiltController.joint_names 	= JOINT_NAMES
HEAD_PanTiltController.pan_id 		= 2
HEAD_PanTiltController.tilt_id 		= 1
HEAD_PanTiltController.pan_offset 	= PAN_OFFSET
HEAD_PanTiltController.tilt_offset 	= TILT_OFFSET
HEAD_PanTiltController.pan_max 		= PAN_OFFSET + PAN_MAX
HEAD_PanTiltController.pan_min 		= PAN_OFFSET + PAN_MIN
HEAD_PanTiltController.tilt_max 	= TILT_OFFSET + TILT_MAX
HEAD_PanTiltController.tilt_min 	= TILT_OFFSET + TILT_MIN
HEAD_PanTiltController.pan_speed 	= 50
HEAD_PanTiltController.tilt_speed 	= 25
HEAD_PanTiltController.setPeriod(0.001)
HEAD_PanTiltController.configure

## Pan-tilt controller
loadComponent("HEAD_Enabler", "AMIGO::HEADEnabler")
addPeer("Supervisor","HEAD_Enabler")
HEAD_Enabler.setPeriod(0.001)
HEAD_Enabler.configure

#### CONNECT COMPONENTS ####
connect ("Soem.Slave_100f.data_tx", "HEAD_PanTiltController.instruction", ConnPolicy() )
connect ("Soem.Slave_100f.data_rx", "HEAD_PanTiltController.status", ConnPolicy() )
connect ("Soem.Slave_100f.ready_rx", "HEAD_PanTiltController.serialReadyRx", ConnPolicy() )
connect ("Soem.Slave_100f.running", "HEAD_PanTiltController.serialRunning", ConnPolicy() )
connect ("HEAD_PanTiltController.errortosupervisor","Supervisor.head_error", ConnPolicy() )
connect ("HEAD_Enabler.out","HEAD_PanTiltController.enabler", ConnPolicy() )

#### CONNECT ROS STREAMS ####
stream( "HEAD_PanTiltController.goalPos", ros.topic("/amigo/neck/references"))
stream( "HEAD_PanTiltController.currentPos", ros.topic("/amigo/neck/measurements"))
stream( "HEAD_PanTiltController.currentPos", ros.topic("/amigo/joint_states"))

#### START COMPONENTS ####
Supervisor.AddAllwaysOnPeer ("HEAD_PanTiltController")
Supervisor.AddEnabledPeer ("HEAD_Enabler",BODYNUMBER)
