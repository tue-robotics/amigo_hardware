########################################################################
#                                                                      #
# Left Philips Experimental Robotic Arm deployer file.                 #
#                                                                      #
# Bas Willems                                                          #
# September 2011                                                       #
#                                                                      #
# Uses the DeploymentComponent available within the OCL for deploying  #
# and connecting components.                                           #
#                                                                      #
########################################################################

### Import amigo_pera_controller package ###
import("amigo_pera_controller")
trigger

### Read reference joint angles ###
loadComponent("RPERA_ReadReferenceAngles","PERA::ReadArmJointsMsg")
RPERA_ReadReferenceAngles.offsets = array ( 0.0, 1.570796325, 0.0, 0.0, 0.0, 1.570796325, 0.0, 0.0 )
###RPERA_ReadReferenceAngles.offsets = array ( 0.0, 0.0, 0.0, 0.0, 0.0, 1.570796325, 0.0, 0.0 )#added by ROBJ & DENNISH for the new TF#
RPERA_ReadReferenceAngles.signs = array ( -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 )
RPERA_ReadReferenceAngles.configure

### Vector concatenate ###
loadComponent("RPERA_VectorConcatenate","PERA::Concatenate")
RPERA_VectorConcatenate.configure

### Interpolator (DO NOT INCREASE VALUES !!!) ###
loadComponent("RPERA_ReferenceInterpolator","ReferenceGenerator")
RPERA_ReferenceInterpolator.setPeriod(0.004)
RPERA_ReferenceInterpolator.NrInterpolators = 8
RPERA_ReferenceInterpolator.InterpolatorDt = 0.004
RPERA_ReferenceInterpolator.InterpolatorEps = 1.0
RPERA_ReferenceInterpolator.configure
RPERA_ReferenceInterpolator.interpolator1 = array (0.0, 0.4, 0.2)
RPERA_ReferenceInterpolator.interpolator2 = array (0.0, 0.4, 0.2)
RPERA_ReferenceInterpolator.interpolator3 = array (0.0, 0.6, 0.3)
RPERA_ReferenceInterpolator.interpolator4 = array (0.0, 0.8, 0.5)
RPERA_ReferenceInterpolator.interpolator5 = array (0.0, 0.8, 0.5)
RPERA_ReferenceInterpolator.interpolator6 = array (0.0, 1.0, 0.5)
RPERA_ReferenceInterpolator.interpolator7 = array (0.0, 1.0, 0.5)
RPERA_ReferenceInterpolator.interpolator8 = array (0.0, 0.4, 0.1)

### PERA Supervisor ###
loadComponent("RPERA_Supervisor","PERA::Supervisor")
RPERA_Supervisor.setPeriod(0.004)
RPERA_Supervisor.jointLowerBounds = array ( 0.0, -1.570796327, -1.570796327, 0.0, -1.832595715, -0.954837674, -0.785398164 )
RPERA_Supervisor.jointUpperBounds = array ( 1.570796327, 1.570796327, 1.570796327, 1.989675348, 1.832595715, 0.954837674, 0.785398164 )
RPERA_Supervisor.motorSaturations = array ( 25000.0, 25000.0, 20000.0, 20000.0, 15000.0, 15000.0, 25000.0, 32000.0 )
RPERA_Supervisor.maxJointErrors = array ( 0.0873, 0.0873, 0.0873, 0.0873, 0.0873, 0.1873, 0.1873, 20.0)
RPERA_Supervisor.maxAccelerations = array ( 0.2, 0.2, 0.3, 0.5, 0.5, 0.5, 0.5 )
RPERA_Supervisor.dynBreakEpsilon = 0.05;
# Note that these angles are published on a ROS-topic and will therefore be corrected with the offsets and signs as defined at the ReadReferenceAngles components
#RPERA_Supervisor.resetAngles = array ( 0.0, -1.570796325, 0.0, 0.5, 0.0, -1.570796325, 0.0, 0.0 )
RPERA_Supervisor.offsetAngles = array ( 0.0, 1.570796325, 0.0, 0.0, 0.0, 1.570796325, 0.0, 0.0 )
RPERA_Supervisor.absOrRel = array (0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)
RPERA_Supervisor.homedPos = array (484.0, 642.0, 1.5708, 0.0, 1.8326, 0.7857, 0.7854)
RPERA_Supervisor.maxConSatTime = 5.0
RPERA_Supervisor.stepSize = 0.001570796
RPERA_Supervisor.absSenDir = array (-1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0)
RPERA_Supervisor.enableOutput = true
RPERA_Supervisor.requireHoming = true
RPERA_Supervisor.startJoint = 5
RPERA_Supervisor.configure

### PERA USB IO ###
loadComponent("RPERA_IO","PERA::PERA_USB_IO")
RPERA_IO.setPeriod(0.004)
RPERA_IO.configure
RPERA_IO.absSenJumpPosProperty = array (1024.0, 732.0, 721.0, 1024.0, 706.0, 1024.0, 1024.0)
RPERA_IO.afterAbsSenJumpProperty = array (0.0, 100.0, 250.0, 0.0, 100.0, 0.0, 0.0)
RPERA_IO.gripperbits = 23000.0
RPERA_IO.grippersecs = 5.0
stream("RPERA_IO.gripperPort", ros.topic("/arm_left_controller/set_gripper"));

### Velocity and acceleration estimator ###
loadComponent("RPERA_RTD","AMIGO::RealTimeDerivator")
RPERA_RTD.setPeriod(0.004)
RPERA_RTD.vector_size=8
RPERA_RTD.bw = 10.0
RPERA_RTD.configure

### Gripper force controller ###
loadComponent("RPERA_GripperControl","PERA::GripperControl")
RPERA_GripperControl.threshold_closed = 25.0;
RPERA_GripperControl.setPeriod(0.004)
RPERA_GripperControl.configure

### Gravity Compensation ###
loadComponent("RPERA_GravityCompensation","PERA::GravityCompensation")
RPERA_GravityCompensation.configure

### Gearing and torque constants ###
loadComponent("RPERA_GC_Gains","MATH::Gains")
RPERA_GC_Gains.vectorsize = 8
RPERA_GC_Gains.gain = array (0.337952010814464E2, 0.337952010814464E2, -1.040001040001040E2, -1.238604835513278E2, 1.238604835513278E2, -1.626545217957059E2, -1.626545217957059E2, 0.0)
RPERA_GC_Gains.configure

### Amplifier polynomials ###
loadComponent("RPERA_Polynomials","MATH::Polynomials")
RPERA_Polynomials.vector_size = 8
RPERA_Polynomials.configure
RPERA_Polynomials.polynomial1= array (0.0, 56.973979683065004, -0.060356311372147, 0.000039192263845, -0.000000009835513)
RPERA_Polynomials.polynomial2= array (0.0, 56.973979683065004, -0.060356311372147, 0.000039192263845, -0.000000009835513)
RPERA_Polynomials.polynomial3= array (0.0, 49.748426243650833, -0.040065286680613, 0.000017587331607, -0.000000002605682)
RPERA_Polynomials.polynomial4= array (0.0, 44.604486108032354, -0.042237259213218, 0.000022759847059, -0.000000004411251)
RPERA_Polynomials.polynomial5= array (0.0, 44.604486108032354, -0.042237259213218, 0.000022759847059, -0.000000004411251)
RPERA_Polynomials.polynomial6= array (0.0, 52.253658384600797, 0.161846062082499, -0.000384960667380, 0.000000239542223)
RPERA_Polynomials.polynomial7= array (0.0, 52.253658384600797, 0.161846062082499, -0.000384960667380, 0.000000239542223)
RPERA_Polynomials.polynomial8= array (0.0)

### Adding the gravity compensational term ###
loadComponent("RPERA_AddGravComp","MATH::Addition")
RPERA_AddGravComp.vectorsize = 8
RPERA_AddGravComp.configure

### Motor to joint angles (includes encoder conversion factors) ###
loadComponent("RPERA_MotorToJointAngles","MatrixTransform")
RPERA_MotorToJointAngles.Nrows = 8
RPERA_MotorToJointAngles.Ncolumns = 8
RPERA_MotorToJointAngles.configure
RPERA_MotorToJointAngles.function1 = array (-0.00000563, 0.00000563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
RPERA_MotorToJointAngles.function2 = array (0.00000563, 0.00000563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
RPERA_MotorToJointAngles.function3 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00001653, 0.0)
RPERA_MotorToJointAngles.function4 = array (0.0, 0.0, 0.000003835, 0.000003835, 0.0, 0.0, 0.0, 0.0)
RPERA_MotorToJointAngles.function5 = array (0.0, 0.0, -0.000003835, 0.000003835, 0.0, 0.0, 0.0, 0.0)
RPERA_MotorToJointAngles.function6 = array (0.0, 0.0, 0.0, 0.0, 0.00002116, 0.00002116, 0.0, 0.0)
RPERA_MotorToJointAngles.function7 = array (0.0, 0.0, 0.0, 0.0, 0.00002116, -0.00002116, 0.0, 0.0)
# Compensated for lower encoder resolution on left PERA
RPERA_MotorToJointAngles.function8 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005236)

### Compute tracking error ###
loadComponent("RPERA_ComputeJointErrors","MATH::Subtraction")
RPERA_ComputeJointErrors.vectorsize = 8
RPERA_ComputeJointErrors.configure

### Joint to motor torques ###
loadComponent("RPERA_JointToMotorTorques","MatrixTransform")
RPERA_JointToMotorTorques.Nrows = 8
RPERA_JointToMotorTorques.Ncolumns = 8
RPERA_JointToMotorTorques.configure
RPERA_JointToMotorTorques.function1 = array (-0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
RPERA_JointToMotorTorques.function2 = array (0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
RPERA_JointToMotorTorques.function3 = array (0.0, 0.0, 0.0, 0.5, -0.5, 0.0, 0.0, 0.0)
RPERA_JointToMotorTorques.function4 = array (0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
RPERA_JointToMotorTorques.function5 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0)
RPERA_JointToMotorTorques.function6 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.5, -0.5, 0.0)
RPERA_JointToMotorTorques.function7 = array (0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)
RPERA_JointToMotorTorques.function8 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)

### Kp ###
loadComponent("RPERA_Gain","MATH::Gains")
RPERA_Gain.vectorsize = 8
RPERA_Gain.gain = array (2500000.0, 2900000.0, 1700000.0, 2000000.0, 1200000.0, 1100000.0, 900000.0, 00000.0)
RPERA_Gain.configure

### Lead Lag ###
loadComponent("RPERA_LeadLag","FILTERS::LeadLags")
RPERA_LeadLag.vector_size = 8
RPERA_LeadLag.sampling_time = 0.004
RPERA_LeadLag.zero_frequency = array (3.0, 3.0, 3.0, 3.0, 4.5, 4.5, 4.0, 4.5)
RPERA_LeadLag.pole_frequency = array (80.0, 80.0, 50.0, 100.0, 100.0, 45.0, 40.0, 45.0)
RPERA_LeadLag.configure

### 2nd Order Lowpass ###
loadComponent("RPERA_Lowpass","FILTERS::SecondOrderLowPasses")
RPERA_Lowpass.vector_size = 8
RPERA_Lowpass.sampling_time = 0.004
RPERA_Lowpass.pole_frequency = array (125.0, 125.0, 125.0, 125.0, 62.5, 125.0, 125.0, 125.0)
RPERA_Lowpass.pole_damping = array (0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7)
RPERA_Lowpass.configure

### Weak Integrators ###
loadComponent("RPERA_WeakIntegrator1","FILTERS::WeakIntegrators")
RPERA_WeakIntegrator1.zero_frequency = array(0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 1.0, 1.0, 1.5)
RPERA_WeakIntegrator1.vector_size = 8
RPERA_WeakIntegrator1.sampling_time = 0.004
RPERA_WeakIntegrator1.configure

### Saturation on the controller output ###
loadComponent("RPERA_OutputLimiter","DISCONTINUITIES::Saturation")
RPERA_OutputLimiter.upper_limit = array ( 25000.0, 25000.0, 20000.0, 20000.0, 15000.0, 15000.0, 25000.0, 32000.0 )
RPERA_OutputLimiter.lower_limit = array ( -25000.0, -25000.0, -20000.0, -20000.0, -15000.0, -15000.0, -25000.0, -32000.0 )
RPERA_OutputLimiter.vector_size = 8
RPERA_OutputLimiter.configure

### Publishing joint angles on ROS-topic ###
loadComponent("RPERA_WriteCurrentJointAngles","PERA::WriteArmJointsMsg")
RPERA_WriteCurrentJointAngles.offsets = array ( 0.0, 1.570796325, 0.0, 0.0, 0.0, 1.570796325, 0.0, 0.0 )
RPERA_WriteCurrentJointAngles.signs = array ( -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 )
RPERA_WriteCurrentJointAngles.configure

### Conversion analog PERA_IO values to torques ###
loadComponent("RPERA_SensorTorques","SensorTorques")
RPERA_SensorTorques.Ksensor = array (0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025)
RPERA_SensorTorques.Voffset = array (0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
RPERA_SensorTorques.Xoffset = array (0.00025, 0.00025, 0.0013875, 0.0013875, 0.00025, 0.00268, 0.0034488, 0.0048276)
RPERA_SensorTorques.Stiffness = array (777777.7, 777777.7, 2009211.0, 2009211.0, 700.0, 12935.0, 60739.73, 37274.25)
RPERA_SensorTorques.PivotDistance = array (0.03, 0.03, 0.025, 0.025, 1.0, 1.0, 0.017, 0.017)
RPERA_SensorTorques.setPeriod(0.02)
RPERA_SensorTorques.configure

#### Diagnostics ###
loadComponent("RPERA_Diagnostics","ROS::RosDiagnostics")
stream("RPERA_Diagnostics.diagnostics", ros.topic("/diagnostics"));
RPERA_Diagnostics.setPeriod(1)
RPERA_Diagnostics.statusname = "LPERA"
RPERA_Diagnostics.NumberOfVectorPorts = 3
RPERA_Diagnostics.NumberOfBoolPorts = 2
RPERA_Diagnostics.configure
RPERA_Diagnostics.vecname1 = "Reference Interpolator"
connect ("RPERA_VectorConcatenate.out", "RPERA_Diagnostics.vec1", ConnPolicy() )
RPERA_Diagnostics.vecname2 = "Joint Errors"
connect ("RPERA_ComputeJointErrors.out", "RPERA_Diagnostics.vec2", ConnPolicy() )
RPERA_Diagnostics.vecname3 = "Reference Path Planning"
connect ("RPERA_ReadReferenceAngles.pos", "RPERA_Diagnostics.vec3", ConnPolicy() )
RPERA_Diagnostics.boolname1 = "Amplifiers"
connect ("RPERA_Supervisor.enablePort", "RPERA_Diagnostics.bool1", ConnPolicy() )
RPERA_Diagnostics.boolname2 = "ReadRef Enable"
connect ("RPERA_Supervisor.enableReadRefPort", "RPERA_Diagnostics.bool2", ConnPolicy() )

### Setting up reporting ###
#loadComponent("RPERA_Reporter", "OCL::FileReporting")
##RPERA_Reporter.NullSample="-1 -1 -1 -1 -1 -1 -1 -1 "
#addPeer("RPERA_Reporter","RPERA_ReferenceInterpolator")
#RPERA_Reporter.reportPort("RPERA_ReferenceInterpolator","posout")
## log the errors
#addPeer("RPERA_Reporter","RPERA_ComputeJointErrors")
#RPERA_Reporter.reportPort("RPERA_ComputeJointErrors","out")
## log the total control u_tot
#addPeer("RPERA_Reporter","RPERA_AddGravComp")
#RPERA_Reporter.reportPort("RPERA_AddGravComp","out")
## log the controller output u_c
#addPeer("RPERA_Reporter","RPERA_WeakIntegrator1")
#RPERA_Reporter.reportPort("RPERA_WeakIntegrator1","out")
## log the measured joint angles
#addPeer("RPERA_Reporter","RPERA_MotorToJointAngles")
#RPERA_Reporter.reportPort("RPERA_MotorToJointAngles","out")
#RPERA_Reporter.ReportFile = "/home/amigo/undefined.dat"
#RPERA_Reporter.configure

########################################################################
# Connecting all the ports and streams. Be carefull with making        #
# changes below as this can easily result in system failure and/or     #
# damage.                                                              #
########################################################################

### Control loop ###
connect ("RPERA_IO.relEnc","RPERA_MotorToJointAngles.in", ConnPolicy() )
connect ("RPERA_MotorToJointAngles.out","RPERA_WriteCurrentJointAngles.pos", ConnPolicy() )
connect ("RPERA_MotorToJointAngles.out","RPERA_ComputeJointErrors.in_minus", ConnPolicy() )
connect ("RPERA_ComputeJointErrors.out","RPERA_Gain.in", ConnPolicy() )
connect ("RPERA_Gain.out","RPERA_LeadLag.in", ConnPolicy() )
connect ("RPERA_LeadLag.out","RPERA_Lowpass.in", ConnPolicy() )
connect ("RPERA_Lowpass.out","RPERA_WeakIntegrator1.in", ConnPolicy() )
connect ("RPERA_WeakIntegrator1.out","RPERA_AddGravComp.in2_event", ConnPolicy() )
connect ("RPERA_AddGravComp.out","RPERA_JointToMotorTorques.in", ConnPolicy() )
connect ("RPERA_JointToMotorTorques.out","RPERA_OutputLimiter.in", ConnPolicy() )
connect ("RPERA_OutputLimiter.out","RPERA_IO.cmdTorqueIn", ConnPolicy() )
connect ("RPERA_ReadReferenceAngles.pos","RPERA_VectorConcatenate.in1", ConnPolicy() )
connect ("RPERA_GripperControl.gripper_ref","RPERA_VectorConcatenate.in2", ConnPolicy() )
connect ("RPERA_VectorConcatenate.out","RPERA_ReferenceInterpolator.posin", ConnPolicy() )
connect ("RPERA_ReferenceInterpolator.posout","RPERA_ComputeJointErrors.in_plus", ConnPolicy() )

### Gravity compensation part ###
connect ("RPERA_ReferenceInterpolator.posout","RPERA_GravityCompensation.in", ConnPolicy() )
connect ("RPERA_GravityCompensation.out","RPERA_GC_Gains.in", ConnPolicy() )
connect ("RPERA_GC_Gains.out","RPERA_Polynomials.in", ConnPolicy() )
connect ("RPERA_Polynomials.out","RPERA_AddGravComp.in1", ConnPolicy() )

### Supervisor ###
connect ("RPERA_JointToMotorTorques.out","RPERA_Supervisor.controllerOutputPort", ConnPolicy() )
connect ("RPERA_ReadReferenceAngles.pos","RPERA_Supervisor.requestedJointAnglesPort", ConnPolicy() )
connect ("RPERA_Supervisor.enablePort","RPERA_IO.enablePort", ConnPolicy() )
connect ("RPERA_ComputeJointErrors.out","RPERA_Supervisor.errorPort", ConnPolicy() )
connect ("RPERA_MotorToJointAngles.out","RPERA_Supervisor.measRelJointAnglesPort", ConnPolicy() )
connect ("RPERA_Supervisor.resetInterpolatorPort","RPERA_ReferenceInterpolator.resetValues", ConnPolicy() )
connect ("RPERA_IO.absSen","RPERA_Supervisor.measAbsJointAnglesPort", ConnPolicy() )
connect ("RPERA_Supervisor.homJntAnglesPort","RPERA_VectorConcatenate.in1", ConnPolicy() )
connect ("RPERA_Supervisor.enableReadRefPort","RPERA_ReadReferenceAngles.enablePort", ConnPolicy() )
connect ("RPERA_Supervisor.reNullPort","RPERA_IO.reNullPort", ConnPolicy() )
connect ("RPERA_RTD.ude","RPERA_Supervisor.jointVelocity", ConnPolicy() )
connect ("RPERA_MotorToJointAngles.out","RPERA_RTD.u", ConnPolicy() )

stream("RPERA_Supervisor.eButtonPort", ros.topic("/emergency_switch"))
stream("RPERA_Supervisor.resetRefPort", ros.topic("/arm_left_controller/joint_coordinates"))
stream("RPERA_WriteCurrentJointAngles.joint_coordinates", ros.topic("/arm_position_left"))
stream("RPERA_ReadReferenceAngles.joint_coordinates", ros.topic("/arm_left_controller/joint_coordinates"))
stream("RPERA_IO.terminatePort", ros.topic("/terminate_io_left"))
stream("RPERA_Supervisor.peraStatusPort", ros.topic("/arm_left_status"))
stream("RPERA_RTD.derivatives", ros.topic("/pera_rtd_data"))

### Gripper control ###
connect ("RPERA_SensorTorques.measured_torques_out","RPERA_GripperControl.torque_in", ConnPolicy() )
connect ("RPERA_GripperControl.gripper_status","RPERA_Supervisor.gripperStatusPort", ConnPolicy() )
connect ("RPERA_Supervisor.gripperClosePort","RPERA_GripperControl.gripper_close", ConnPolicy() )
connect ("RPERA_IO.forceSen","RPERA_SensorTorques.voltage_in", ConnPolicy() )

stream("RPERA_GripperControl.gripper_close", ros.topic("/arm_left_controller/set_gripper"))
stream("RPERA_GripperControl.gripper_status", ros.topic("/gripper_status_left"))

RPERA_Supervisor.start
RPERA_ReadReferenceAngles.start
RPERA_VectorConcatenate.start
RPERA_ReferenceInterpolator.start
RPERA_MotorToJointAngles.start
RPERA_ComputeJointErrors.start
RPERA_JointToMotorTorques.start
RPERA_OutputLimiter.start
RPERA_WriteCurrentJointAngles.start
RPERA_IO.start
RPERA_RTD.start
RPERA_Gain.start
RPERA_LeadLag.start
RPERA_Lowpass.start
RPERA_WeakIntegrator1.start
RPERA_GravityCompensation.start
RPERA_GC_Gains.start
RPERA_Polynomials.start
RPERA_AddGravComp.start
RPERA_SensorTorques.start
RPERA_GripperControl.start
RPERA_Diagnostics.start
#RPERA_Reporter.start
