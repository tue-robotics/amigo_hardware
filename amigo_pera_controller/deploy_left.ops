import("philips_arm_controller_dev")
trigger
#runScript ("communication_left.ops")
#trigger
#communication_left.start
#trigger

### Read reference joint angles ###
loadComponent("ReadReferenceAngles","PERA::ReadArmJointsMsg")
ReadReferenceAngles.offsets = array ( 0.0, 1.570796325, 0.0, 0.0, 0.0, 1.570796325, 0.0, 0.0 )
ReadReferenceAngles.signs = array ( 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 )
ReadReferenceAngles.configure

#### Interpolator ###
loadComponent("ReferenceInterpolator","ReferenceGenerator")
ReferenceInterpolator.setPeriod(0.002)
ReferenceInterpolator.NrInterpolators = 8
ReferenceInterpolator.InterpolatorDt = 0.002
ReferenceInterpolator.InterpolatorEps = 1.0
ReferenceInterpolator.configure
ReferenceInterpolator.interpolator1 = array (0.0, 0.43, 0.2)
ReferenceInterpolator.interpolator2 = array (0.0, 0.43, 0.2)
ReferenceInterpolator.interpolator3 = array (0.0, 0.6, 0.25)
ReferenceInterpolator.interpolator4 = array (0.0, 0.5, 0.2)
ReferenceInterpolator.interpolator5 = array (0.0, 0.35, 0.15)
ReferenceInterpolator.interpolator6 = array (0.0, 3.1416, 0.5)
ReferenceInterpolator.interpolator7 = array (0.0, 3.1416, 0.5)
ReferenceInterpolator.interpolator8 = array (0.0, 0.4, 0.1)

### PERA watchdog ###
loadComponent("Watchdog","PERA::WATCHDOG")
Watchdog.setPeriod(0.004)
Watchdog.jointLowerBounds = array ( -1.570796327, -1.570796327, -1.570796327, 0.0, -1.832595715, -0.954837674, -0.785398164 )
Watchdog.jointUpperBounds = array ( 0.0, 1.570796327, 1.570796327, 1.989675348, 1.832595715, 0.954837674, 0.785398164 )
Watchdog.maxJointErrors = array ( 5.0, 5.0, 5.0, 5.0, 5.0, 25.0, 25.0, 35.0)

# Errors in radians
#Watchdog.maxJointErrors = array ( 0.0873, 0.0873, 0.0873, 0.0873, 0.0873, 0.4363, 0.4363, 0.6109)

# Note that these angles are published on a ROS-topic and will therefore be corrected with the offsets and signs as defined at the ReadReferenceAngles components
Watchdog.resetAngles = array ( -0.3, -1.570796325, 0.0, 0.5, 0.0, -1.570796325, 0.0, 0.0 )
Watchdog.absOrRel = array (0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)
#Watchdog.homedPos = array (481.0, 635.0, 767.0, 0.0, 105.0, 57.0, 45.0)
Watchdog.homedPos = array (481.0, 635.0, 90.0, 0.0, 105.0, 57.0, 45.0)
Watchdog.stepSize = 0.09
Watchdog.absSenDir = array (1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0)
Watchdog.enableOutput = true
Watchdog.configure

### PERA USB IO ###
loadComponent("PERA_IO","PERA::PERA_USB_IO")
PERA_IO.setPeriod(0.004)
PERA_IO.configure
PERA_IO.absSenJumpPosProperty = array (1024.0, 732.0, 721.0, 1024.0, 706.0, 1024.0, 1024.0)
PERA_IO.afterAbsSenJumpProperty = array (0.0, 100.0, 250.0, 0.0, 100.0, 0.0, 0.0)

### Gripper force controller ###
loadComponent("GripperControl","PERA::Gripper_control")
GripperControl.threshold_open = 23.5;
GripperControl.threshold_closed = 27.5;
GripperControl.encoder_compensation = 1.0;
GripperControl.setPeriod(0.004)
GripperControl.configure

### Gravity Compensation
loadComponent("GravityCompensation","PERA::GRAVCOM")
GravityCompensation.torqueFactors = array ( 3151.0, 3212.0, -8492.0, -9949.0, 0.0, 0.0, 0.0, 0.0 )
GravityCompensation.configure

### Adding the gravity compensational term
loadComponent("AddGravComp","MATH::Addition")
AddGravComp.vectorsize = 8
AddGravComp.configure

### Decouple motor angles to joint angles (includes encoder conversion factors!!!) ###
loadComponent("MotorToJointAngles","MatrixTransform")
MotorToJointAngles.Nrows = 8
MotorToJointAngles.Ncolumns = 8
MotorToJointAngles.configure
MotorToJointAngles.function1 = array (0.00032, -0.000323, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function2 = array (-0.00032, -0.000323, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function3 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00095, 0.0)
MotorToJointAngles.function4 = array (0.0, 0.0, 0.0002197, 0.0002197, 0.0, 0.0, 0.0, 0.0)
#MotorToJointAngles.function4 = array (0.0, 0.0, 0.0002525, 0.0002525, 0.0, 0.0, 0.0, 0.0)
#MotorToJointAngles.function5 = array (0.0, 0.0, -0.0002525, 0.0002525, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function5 = array (0.0, 0.0, -0.0002197, 0.0002197, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function6 = array (0.0, 0.0, 0.0, 0.0, 0.00121, 0.00121, 0.0, 0.0)
MotorToJointAngles.function7 = array (0.0, 0.0, 0.0, 0.0, 0.00121, -0.00121, 0.0, 0.0)
MotorToJointAngles.function8 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00375)

### Convert radians to degrees
loadComponent("RadToDeg","MATH::Gain")
RadToDeg.vectorsize = 8
RadToDeg.gain = 57.295779513
RadToDeg.configure 

### Compute the errors of the joints wrt reference angles
loadComponent("ComputeJointErrors","Substraction")
ComputeJointErrors.vectorsize = 8
ComputeJointErrors.configure

### Decouple joint torques to motor torques ###
loadComponent("JointToMotorTorques","MatrixTransform")
JointToMotorTorques.Nrows = 8
JointToMotorTorques.Ncolumns = 8
JointToMotorTorques.configure
JointToMotorTorques.function1 = array (0.5, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
JointToMotorTorques.function2 = array (-0.5, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
JointToMotorTorques.function3 = array (0.0, 0.0, 0.0, 0.5, -0.5, 0.0, 0.0, 0.0)
JointToMotorTorques.function4 = array (0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
JointToMotorTorques.function5 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0)
JointToMotorTorques.function6 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.5, -0.5, 0.0)
JointToMotorTorques.function7 = array (0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)
JointToMotorTorques.function8 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)

### PERA Controllers ###
loadComponent("JointControllers","FILTERS::PIDs")
#JointControllers.proportional_coefficient = array (35.5, 	35.0, 	20.0, 	20.0, 	20.0, 	30.0, 	30.0, 	4.0)
JointControllers.proportional_coefficient = array (17.75, 	17.5, 	10.0, 	10.0, 	10.0, 	15.0, 	15.0, 	2.0)
#JointControllers.integral_coefficient = 	array (0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0)
JointControllers.integral_coefficient = 	array (3.0, 	3.0, 	4.0, 	2.0, 	2.0, 	3.0, 	3.0, 	2.0)
#JointControllers.derivative_coefficient = 	array (0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0)
JointControllers.derivative_coefficient = 	array (1.0, 	1.0, 	0.2, 	0.1, 	0.1, 	0.03, 	0.03, 	0.008)
JointControllers.anti_windup_coefficient = 	array (0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0)
JointControllers.integrator_initial_value = array (0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0)
JointControllers.limit = 					array (5000.0, 	5000.0, 5000.0, 5000.0, 5000.0, 5000.0, 5000.0, 5000.0)
JointControllers.sampling_time = 0.004
JointControllers.vector_size = 8
JointControllers.configure

### Actuator constant
loadComponent("ActuatorConstant","MATH::Gain")
ActuatorConstant.vectorsize = 8
ActuatorConstant.gain = 1000.0
ActuatorConstant.configure

### Feedforward
loadComponent("FeedForward","PERA::FEEDFORWARD")
#FeedForward.kfcFeedForward = array (3000.0, 3000.0, 3000.0, 6000.0, 3000.0, 3000.0, 3000.0, 10000.0)
#FeedForward.kfcFeedForward = array (7000.0, 5000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
FeedForward.kfcFeedForward = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
FeedForward.configure

### Adding the feedforward terms
loadComponent("AddFeedForward","MATH::Addition")
AddFeedForward.vectorsize = 8
AddFeedForward.configure

### Saturation on the controller output
loadComponent("OutputLimiter","DISCONTINUITIES::Saturation")
OutputLimiter.upper_limit = array ( 25000.0, 25000.0, 20000.0, 20000.0, 10000.0, 10000.0, 25000.0, 32000.0 )
OutputLimiter.lower_limit = array ( -25000.0,-25000.0, -20000.0, -20000.0, -10000.0, -10000.0, -25000.0, -32000.0 )
OutputLimiter.vector_size = 8
OutputLimiter.configure

### Convert radians to degrees
loadComponent("DegToRad","MATH::Gain")
DegToRad.vectorsize = 8
DegToRad.gain = 0.0174532925
DegToRad.configure 

### Write the current joint angles ###
loadComponent("WriteCurrentJointAngles","PERA::WriteArmJointsMsg")
WriteCurrentJointAngles.offsets = array ( 0.0, 1.570796325, 0.0, 0.0, 0.0, 1.570796325, 0.0, 0.0 )
WriteCurrentJointAngles.signs = array ( 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 )
WriteCurrentJointAngles.configure

### Convert analog values from PERA_IO to torques ###
loadComponent("SensorTorques","SensorTorques")
SensorTorques.Ksensor = array (0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025)
SensorTorques.Voffset = array (0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
SensorTorques.Xoffset = array (0.00025, 0.00025, 0.0013875, 0.0013875, 0.00025, 0.00268, 0.0034488, 0.0048276)
SensorTorques.Stiffness = array (777777.7, 777777.7, 2009211.0, 2009211.0, 700.0, 12935.0, 60739.73, 37274.25)
#SensorTorques.Stiffness = array (1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0)
SensorTorques.PivotDistance = array (0.03, 0.03, 0.025, 0.025, 1.0, 1.0, 0.017, 0.017)
#SensorTorques.PivotDistance = array (1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)
SensorTorques.setPeriod(0.02)
SensorTorques.configure

### Write the computed torques to the ROS topic ###
loadComponent("WriteArmTorquesMsg","WriteArmTorquesMsg")
WriteArmTorquesMsg.setPeriod(0.02)
WriteArmTorquesMsg.configure

###Setting up reporting
loadComponent("Reporter", "OCL::FileReporting")
addPeer("Reporter","ReferenceInterpolator")
Reporter.reportPort("ReferenceInterpolator","posout")
addPeer("Reporter","ComputeJointErrors")
Reporter.reportPort("ComputeJointErrors","out")
addPeer("Reporter","OutputLimiter")
Reporter.reportPort("OutputLimiter","out")
addPeer("Reporter","ActuatorConstant")
Reporter.reportPort("ActuatorConstant","out")
addPeer("Reporter","RadToDeg")
Reporter.reportPort("RadToDeg","out")
addPeer("Reporter","MotorToJointAngles")
Reporter.reportPort("MotorToJointAngles","out")
addPeer("Reporter","Watchdog")
Reporter.reportPort("Watchdog","enablePort")
Reporter.ReportFile = "/home/amigo/reports_bas.dat"

### Workin version WITH gravity compensation and WITH feedforward ###

stream("GripperControl.gripper_close",ROStopics.set_gripper_left)
stream("GripperControl.gripperstatus",ROStopics.gripper_status_left)
connect ("SensorTorques.measured_torques_out","GripperControl.torquein", ConnPolicy() )
connect ("GripperControl.gripperposout","ReadReferenceAngles.gripper_pos", ConnPolicy() )

stream("ReadReferenceAngles.joint_coordinates",ROStopics.joint_coordinates_left)
connect ("ReadReferenceAngles.pos","ReferenceInterpolator.posin", ConnPolicy() )
connect ("ReferenceInterpolator.posout","RadToDeg.in", ConnPolicy() )
connect ("RadToDeg.out","ComputeJointErrors.in_plus", ConnPolicy() )
connect ("MotorToJointAngles.out","ComputeJointErrors.in_minus", ConnPolicy() )
connect ("MotorToJointAngles.out","DegToRad.in", ConnPolicy() )
connect ("DegToRad.out","WriteCurrentJointAngles.pos", ConnPolicy() )
connect ("ComputeJointErrors.out","JointControllers.in", ConnPolicy() )
connect ("JointControllers.out","ActuatorConstant.in", ConnPolicy() )
connect ("ActuatorConstant.out","AddFeedForward.in2_event", ConnPolicy() )
connect ("FeedForward.out","AddFeedForward.in1", ConnPolicy() )
connect ("AddFeedForward.out","AddGravComp.in2_event", ConnPolicy() )
connect ("MotorToJointAngles.out","GravityCompensation.in", ConnPolicy() )
connect ("GravityCompensation.out","AddGravComp.in1", ConnPolicy() )
connect ("AddGravComp.out","JointToMotorTorques.in", ConnPolicy() )
connect ("ReadReferenceAngles.vel","FeedForward.velport", ConnPolicy() )
connect ("JointToMotorTorques.out","OutputLimiter.in", ConnPolicy() )
connect ("OutputLimiter.out","PERA_IO.cmdTorqueIn", ConnPolicy() )
connect ("PERA_IO.relEnc","MotorToJointAngles.in", ConnPolicy() )
connect ("ReadReferenceAngles.pos","Watchdog.requestedJointAnglesPort", ConnPolicy() )
connect ("Watchdog.enablePort","PERA_IO.enablePort", ConnPolicy() )
connect ("ComputeJointErrors.out","Watchdog.errorPort", ConnPolicy() )
connect ("MotorToJointAngles.out","Watchdog.measRelJointAnglesPort", ConnPolicy() )
connect ("Watchdog.resetInterpolatorPort","ReferenceInterpolator.resetValues", ConnPolicy() )

connect ("PERA_IO.absSen","Watchdog.measAbsJointAnglesPort", ConnPolicy() )
connect ("Watchdog.homJntAnglesPort","ReferenceInterpolator.posin", ConnPolicy() )
connect ("Watchdog.enableReadRefPort","ReadReferenceAngles.enablePort", ConnPolicy() )
connect ("Watchdog.reNullPort","PERA_IO.reNullPort", ConnPolicy() )

stream("Watchdog.eButtonPort",ROStopics.emergency_switch)
stream("Watchdog.resetRefPort",ROStopics.joint_coordinates_left)
stream("WriteCurrentJointAngles.joint_coordinates",ROStopics.arm_angles_left)

connect ("PERA_IO.forceSen","SensorTorques.voltage_in", ConnPolicy() )
connect ("SensorTorques.measured_torques_out","WriteArmTorquesMsg.in", ConnPolicy() )
stream("WriteArmTorquesMsg.out",ROStopics.joint_torques_left)


Watchdog.start
ReadReferenceAngles.start
ReferenceInterpolator.start
MotorToJointAngles.start
RadToDeg.start
ComputeJointErrors.start
JointToMotorTorques.start
JointControllers.start
ActuatorConstant.start
OutputLimiter.start
DegToRad.start
WriteCurrentJointAngles.start
PERA_IO.start
FeedForward.start
AddFeedForward.start
GravityCompensation.start
AddGravComp.start
WriteArmTorquesMsg.start
SensorTorques.start
GripperControl.start
Reporter.start

