import("amigo_pera_controller")
trigger

### Read reference joint angles ###
loadComponent("LPERA_ReadReferenceAngles","PERA::ReadArmJointsMsg")
LPERA_ReadReferenceAngles.offsets = array ( 0.0, 1.570796325, 0.0, 0.0, 0.0, 1.570796325, 0.0, 0.0 )
LPERA_ReadReferenceAngles.signs = array ( 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 )
LPERA_ReadReferenceAngles.configure

#### Interpolator ###
loadComponent("LPERA_ReferenceInterpolator","ReferenceGenerator")
LPERA_ReferenceInterpolator.setPeriod(0.002)
LPERA_ReferenceInterpolator.NrInterpolators = 8
LPERA_ReferenceInterpolator.InterpolatorDt = 0.002
LPERA_ReferenceInterpolator.InterpolatorEps = 1.0
LPERA_ReferenceInterpolator.configure
LPERA_ReferenceInterpolator.interpolator1 = array (0.0, 0.43, 0.2)
LPERA_ReferenceInterpolator.interpolator2 = array (0.0, 0.43, 0.2)
LPERA_ReferenceInterpolator.interpolator3 = array (0.0, 0.6, 0.25)
LPERA_ReferenceInterpolator.interpolator4 = array (0.0, 0.5, 0.2)
LPERA_ReferenceInterpolator.interpolator5 = array (0.0, 0.35, 0.15)
LPERA_ReferenceInterpolator.interpolator6 = array (0.0, 0.3, 0.15)
LPERA_ReferenceInterpolator.interpolator7 = array (0.0, 0.3, 0.15)
LPERA_ReferenceInterpolator.interpolator8 = array (0.0, 0.4, 0.1)

### PERA watchdog ###
loadComponent("LPERA_Watchdog","PERA::WATCHDOG")
LPERA_Watchdog.setPeriod(0.004)
LPERA_Watchdog.jointLowerBounds = array ( -1.570796327, -1.570796327, -1.570796327, 0.0, -1.832595715, -0.954837674, -0.785398164 )
LPERA_Watchdog.jointUpperBounds = array ( 0.0, 1.570796327, 1.570796327, 1.989675348, 1.832595715, 0.954837674, 0.785398164 )
LPERA_Watchdog.maxJointErrors = array ( 0.0873, 0.0873, 0.0873, 0.0873, 0.0873, 1.25, 1.25, 0.6109)
# Note that these angles are published on a ROS-topic and will therefore be corrected with the offsets and signs as defined at the ReadReferenceAngles components
LPERA_Watchdog.resetAngles = array ( -0.3, -1.570796325, 0.0, 0.5, 0.0, -1.570796325, 0.0, 0.0 )
LPERA_Watchdog.absOrRel = array (0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)
LPERA_Watchdog.homedPos = array (481.0, 635.0, 1.5708, 0.0, 1.8326, 0.7857, 0.7854)
LPERA_Watchdog.stepSize = 0.001570796
LPERA_Watchdog.absSenDir = array (1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0)
LPERA_Watchdog.enableOutput = true
LPERA_Watchdog.requireHoming = true
LPERA_Watchdog.startJoint = 5
LPERA_Watchdog.configure

### PERA USB IO ###
loadComponent("LPERA_IO","PERA::PERA_USB_IO")
LPERA_IO.setPeriod(0.004)
LPERA_IO.configure
LPERA_IO.absSenJumpPosProperty = array (1024.0, 732.0, 721.0, 1024.0, 706.0, 1024.0, 1024.0)
LPERA_IO.afterAbsSenJumpProperty = array (0.0, 100.0, 250.0, 0.0, 100.0, 0.0, 0.0)

### Gripper force controller ###
loadComponent("LPERA_GripperControl","PERA::Gripper_control")
LPERA_GripperControl.threshold_open = 23.5;
LPERA_GripperControl.threshold_closed = 30.0;
LPERA_GripperControl.setPeriod(0.004)
LPERA_GripperControl.configure

### Gravity Compensation ###
loadComponent("LPERA_GravityCompensation","PERA::GRAVCOM")
#LPERA_GravityCompensation.torqueFactors = array ( 3151.0, 3212.0, -8492.0, -9949.0, 0.0, 0.0, 0.0, 0.0 )
LPERA_GravityCompensation.torqueFactors = array ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
LPERA_GravityCompensation.configure

### Adding the gravity compensational term ###
loadComponent("LPERA_AddGravComp","MATH::Addition")
LPERA_AddGravComp.vectorsize = 8
LPERA_AddGravComp.configure

### Decouple motor angles to joint angles (includes encoder conversion factors --> DEGREES!!!) ###
loadComponent("LPERA_MotorToJointAngles","MatrixTransform")
LPERA_MotorToJointAngles.Nrows = 8
LPERA_MotorToJointAngles.Ncolumns = 8
LPERA_MotorToJointAngles.configure
LPERA_MotorToJointAngles.function1 = array (0.00000563, -0.00000563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
LPERA_MotorToJointAngles.function2 = array (-0.00000563, -0.00000563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
LPERA_MotorToJointAngles.function3 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00001653, 0.0)
LPERA_MotorToJointAngles.function4 = array (0.0, 0.0, 0.000003835, 0.000003835, 0.0, 0.0, 0.0, 0.0)
LPERA_MotorToJointAngles.function5 = array (0.0, 0.0, -0.000003835, 0.000003835, 0.0, 0.0, 0.0, 0.0)
LPERA_MotorToJointAngles.function6 = array (0.0, 0.0, 0.0, 0.0, 0.00002116, 0.00002116, 0.0, 0.0)
LPERA_MotorToJointAngles.function7 = array (0.0, 0.0, 0.0, 0.0, 0.00002116, -0.00002116, 0.0, 0.0)
# Compensated for lower encoder resolution on left PERA
LPERA_MotorToJointAngles.function8 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005236)

### Compute the errors of the joints wrt reference angles ###
loadComponent("LPERA_ComputeJointErrors","Substraction")
LPERA_ComputeJointErrors.vectorsize = 8
LPERA_ComputeJointErrors.configure

### Decouple joint torques to motor torques ###
loadComponent("LPERA_JointToMotorTorques","MatrixTransform")
LPERA_JointToMotorTorques.Nrows = 8
LPERA_JointToMotorTorques.Ncolumns = 8
LPERA_JointToMotorTorques.configure
LPERA_JointToMotorTorques.function1 = array (0.5, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
LPERA_JointToMotorTorques.function2 = array (-0.5, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
LPERA_JointToMotorTorques.function3 = array (0.0, 0.0, 0.0, 0.5, -0.5, 0.0, 0.0, 0.0)
LPERA_JointToMotorTorques.function4 = array (0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
LPERA_JointToMotorTorques.function5 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0)
LPERA_JointToMotorTorques.function6 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.5, -0.5, 0.0)
LPERA_JointToMotorTorques.function7 = array (0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)
LPERA_JointToMotorTorques.function8 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)

### PERA Controllers ###
loadComponent("LPERA_JointControllers","FILTERS::PIDs")
LPERA_JointControllers.proportional_coefficient = array (1000.0, 	1000.0, 700.0, 	700.0, 	350.0, 	550.0, 	550.0, 	160.0)
LPERA_JointControllers.integral_coefficient = 	array (80.0, 	80.0, 	16.0, 	32.0, 	12.0, 	32.0, 	32.0, 	2.0)
LPERA_JointControllers.derivative_coefficient = 	array (40.0, 	40.0, 	16.0, 	20.0, 	16.0, 	4.0, 	4.0, 	0.05)
LPERA_JointControllers.anti_windup_coefficient = 	array (0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0)
LPERA_JointControllers.integrator_initial_value = array (0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0)
LPERA_JointControllers.limit = 					array (5000.0, 	5000.0, 5000.0, 5000.0, 5000.0, 5000.0, 5000.0, 5000.0)
LPERA_JointControllers.sampling_time = 0.004
LPERA_JointControllers.vector_size = 8
LPERA_JointControllers.configure

### Actuator constant ###
loadComponent("LPERA_ActuatorConstant","MATH::Gain")
LPERA_ActuatorConstant.vectorsize = 8
LPERA_ActuatorConstant.gain = 1000.0
LPERA_ActuatorConstant.configure

### Feedforward ###
loadComponent("LPERA_FeedForward","PERA::FEEDFORWARD")
#LPERA_FeedForward.kfcFeedForward = array (3000.0, 3000.0, 3000.0, 6000.0, 3000.0, 3000.0, 3000.0, 10000.0)
#LPERA_FeedForward.kfcFeedForward = array (7000.0, 5000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
LPERA_FeedForward.kfcFeedForward = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
LPERA_FeedForward.configure

### Adding the feedforward terms ###
loadComponent("LPERA_AddFeedForward","MATH::Addition")
LPERA_AddFeedForward.vectorsize = 8
LPERA_AddFeedForward.configure

### Saturation on the controller output ###
loadComponent("LPERA_OutputLimiter","DISCONTINUITIES::Saturation")
LPERA_OutputLimiter.upper_limit = array ( 25000.0, 25000.0, 20000.0, 20000.0, 15000.0, 15000.0, 25000.0, 32000.0 )
#LPERA_OutputLimiter.upper_limit = array ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
LPERA_OutputLimiter.lower_limit = array ( -25000.0,-25000.0, -20000.0, -20000.0, -15000.0, -15000.0, -25000.0, -32000.0 )
#LPERA_OutputLimiter.lower_limit = array ( -0.0,-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0 )
LPERA_OutputLimiter.vector_size = 8
LPERA_OutputLimiter.configure

### Write the current joint angles ###
loadComponent("LPERA_WriteCurrentJointAngles","PERA::WriteArmJointsMsg")
LPERA_WriteCurrentJointAngles.offsets = array ( 0.0, 1.570796325, 0.0, 0.0, 0.0, 1.570796325, 0.0, 0.0 )
LPERA_WriteCurrentJointAngles.signs = array ( 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 )
LPERA_WriteCurrentJointAngles.configure

### Convert analog values from PERA_IO to torques ###
loadComponent("LPERA_SensorTorques","SensorTorques")
LPERA_SensorTorques.Ksensor = array (0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025)
LPERA_SensorTorques.Voffset = array (0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
LPERA_SensorTorques.Xoffset = array (0.00025, 0.00025, 0.0013875, 0.0013875, 0.00025, 0.00268, 0.0034488, 0.0048276)
LPERA_SensorTorques.Stiffness = array (777777.7, 777777.7, 2009211.0, 2009211.0, 700.0, 12935.0, 60739.73, 37274.25)
#LPERA_SensorTorques.Stiffness = array (1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0)
LPERA_SensorTorques.PivotDistance = array (0.03, 0.03, 0.025, 0.025, 1.0, 1.0, 0.017, 0.017)
#LPERA_SensorTorques.PivotDistance = array (1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)
LPERA_SensorTorques.setPeriod(0.02)
LPERA_SensorTorques.configure

### Write the computed torques to the ROS topic ###
loadComponent("LPERA_WriteArmTorquesMsg","WriteArmTorquesMsg")
LPERA_WriteArmTorquesMsg.setPeriod(0.02)
LPERA_WriteArmTorquesMsg.configure

### Setting up reporting ###
loadComponent("LPERA_Reporter", "OCL::FileReporting")
addPeer("LPERA_Reporter","LPERA_ReferenceInterpolator")
LPERA_Reporter.reportPort("LPERA_ReferenceInterpolator","posout")
addPeer("LPERA_Reporter","LPERA_ComputeJointErrors")
LPERA_Reporter.reportPort("LPERA_ComputeJointErrors","out")
addPeer("LPERA_Reporter","LPERA_OutputLimiter")
LPERA_Reporter.reportPort("LPERA_OutputLimiter","out")
addPeer("LPERA_Reporter","LPERA_ActuatorConstant")
LPERA_Reporter.reportPort("LPERA_ActuatorConstant","out")
addPeer("LPERA_Reporter","LPERA_MotorToJointAngles")
LPERA_Reporter.reportPort("LPERA_MotorToJointAngles","out")
addPeer("LPERA_Reporter","LPERA_Watchdog")
LPERA_Reporter.reportPort("LPERA_Watchdog","enablePort")
LPERA_Reporter.ReportFile = "/home/amigo/rpera_test1.dat"
LPERA_Reporter.configure

### Component for streaming port data on a rostopic for visualisation with rxplot ###
loadComponent("LPERA_PlotData","AMIGO::PlotData")
LPERA_PlotData.selectJoint = 7
LPERA_PlotData.selectMotor1 = 7
LPERA_PlotData.selectMotor2 = 7
LPERA_PlotData.setPeriod(0.02)
LPERA_PlotData.configure

### Ports and streams for control and watchdog ###
connect ("LPERA_ReadReferenceAngles.pos","LPERA_ReferenceInterpolator.posin", ConnPolicy() )
connect ("LPERA_ReferenceInterpolator.posout","LPERA_ComputeJointErrors.in_plus", ConnPolicy() )
connect ("LPERA_MotorToJointAngles.out","LPERA_ComputeJointErrors.in_minus", ConnPolicy() )
connect ("LPERA_MotorToJointAngles.out","LPERA_WriteCurrentJointAngles.pos", ConnPolicy() )
connect ("LPERA_ComputeJointErrors.out","LPERA_JointControllers.in", ConnPolicy() )
connect ("LPERA_JointControllers.out","LPERA_ActuatorConstant.in", ConnPolicy() )
connect ("LPERA_ActuatorConstant.out","LPERA_AddFeedForward.in2_event", ConnPolicy() )
connect ("LPERA_FeedForward.out","LPERA_AddFeedForward.in1", ConnPolicy() )
connect ("LPERA_AddFeedForward.out","LPERA_AddGravComp.in2_event", ConnPolicy() )
connect ("LPERA_MotorToJointAngles.out","LPERA_GravityCompensation.in", ConnPolicy() )
connect ("LPERA_GravityCompensation.out","LPERA_AddGravComp.in1", ConnPolicy() )
connect ("LPERA_AddGravComp.out","LPERA_JointToMotorTorques.in", ConnPolicy() )
connect ("LPERA_ReadReferenceAngles.vel","LPERA_FeedForward.velport", ConnPolicy() )
connect ("LPERA_JointToMotorTorques.out","LPERA_OutputLimiter.in", ConnPolicy() )
connect ("LPERA_OutputLimiter.out","LPERA_IO.cmdTorqueIn", ConnPolicy() )
connect ("LPERA_IO.relEnc","LPERA_MotorToJointAngles.in", ConnPolicy() )
connect ("LPERA_ReadReferenceAngles.pos","LPERA_Watchdog.requestedJointAnglesPort", ConnPolicy() )
connect ("LPERA_Watchdog.enablePort","LPERA_IO.enablePort", ConnPolicy() )
connect ("LPERA_ComputeJointErrors.out","LPERA_Watchdog.errorPort", ConnPolicy() )
connect ("LPERA_MotorToJointAngles.out","LPERA_Watchdog.measRelJointAnglesPort", ConnPolicy() )
connect ("LPERA_Watchdog.resetInterpolatorPort","LPERA_ReferenceInterpolator.resetValues", ConnPolicy() )
connect ("LPERA_IO.absSen","LPERA_Watchdog.measAbsJointAnglesPort", ConnPolicy() )
connect ("LPERA_Watchdog.homJntAnglesPort","LPERA_ReferenceInterpolator.posin", ConnPolicy() )
connect ("LPERA_Watchdog.enableReadRefPort","LPERA_ReadReferenceAngles.enablePort", ConnPolicy() )
connect ("LPERA_Watchdog.reNullPort","LPERA_IO.reNullPort", ConnPolicy() )

stream("LPERA_Watchdog.eButtonPort",hardware_ROStopics.emergency_switch)
stream("LPERA_Watchdog.resetRefPort",lpera_ROStopics.joint_coordinates_left)
stream("LPERA_WriteCurrentJointAngles.joint_coordinates",lpera_ROStopics.arm_angles_left)
stream("LPERA_ReadReferenceAngles.joint_coordinates",lpera_ROStopics.joint_coordinates_left)

### Ports and streams for gripper control ###
connect ("LPERA_SensorTorques.measured_torques_out","LPERA_GripperControl.torque_in", ConnPolicy() )
connect ("LPERA_GripperControl.gripper_ref","LPERA_ReadReferenceAngles.gripper_pos", ConnPolicy() )
connect ("LPERA_GripperControl.gripper_status","LPERA_Watchdog.gripperStatusPort", ConnPolicy() )
connect ("LPERA_Watchdog.gripperClosePort","LPERA_GripperControl.gripper_close", ConnPolicy() )
connect ("LPERA_IO.forceSen","LPERA_SensorTorques.voltage_in", ConnPolicy() )
connect ("LPERA_SensorTorques.measured_torques_out","LPERA_WriteArmTorquesMsg.in", ConnPolicy() )

stream("LPERA_WriteArmTorquesMsg.out",lpera_ROStopics.joint_torques_left)
stream("LPERA_GripperControl.gripper_close",lpera_ROStopics.set_gripper_left)
stream("LPERA_GripperControl.gripper_status",lpera_ROStopics.gripper_status_left)

### Ports and stream for online data viewing using rxplot ###
connect ("LPERA_ReferenceInterpolator.posout",	"LPERA_PlotData.port1",					ConnPolicy() )
connect ("LPERA_MotorToJointAngles.out",	"LPERA_PlotData.port2",					ConnPolicy() )
connect ("LPERA_AddFeedForward.out",		"LPERA_PlotData.port4",					ConnPolicy() )
connect ("LPERA_ComputeJointErrors.out",	"LPERA_PlotData.port5",					ConnPolicy() )
connect ("LPERA_IO.relEnc",		            "LPERA_PlotData.port6",					ConnPolicy() )
connect ("LPERA_OutputLimiter.out",		 	"LPERA_PlotData.port8",					ConnPolicy() )

# Copy this statement into a terminal for online data viewing
#rxplot /jointDataLeft/data[0],/jointDataLeft/data[1] /jointDataLeft/data[4] /jointDataLeft/data[8],/jointDataLeft/data[9] /jointDataLeft/data[6],/jointDataLeft/data[7]
stream  ("LPERA_PlotData.dataPort", lpera_ROStopics.jointDataLeft)

LPERA_Watchdog.start
LPERA_ReadReferenceAngles.start
LPERA_ReferenceInterpolator.start
LPERA_MotorToJointAngles.start
LPERA_ComputeJointErrors.start
LPERA_JointToMotorTorques.start
LPERA_JointControllers.start
LPERA_ActuatorConstant.start
LPERA_OutputLimiter.start
LPERA_WriteCurrentJointAngles.start
LPERA_IO.start
LPERA_FeedForward.start
LPERA_AddFeedForward.start
LPERA_GravityCompensation.start
LPERA_AddGravComp.start
LPERA_WriteArmTorquesMsg.start
LPERA_SensorTorques.start
LPERA_GripperControl.start
#LPERA_Reporter.start
LPERA_PlotData.start

