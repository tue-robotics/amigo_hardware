########################################################################
#                                                                      #
# Right Philips Experimental Robotic Arm deployer file.                #
#                                                                      #
# Bas Willems Edited by Max Baeten for EtherCAT                        #
# September 2011                                                       #
#                                                                      #
########################################################################

#### IMPORT PACKAGE ####
# To be able to load components from this package and all packages in the manifest
import("amigo_pera_controller")
trigger

### LOAD WBC PARAMETER ###
var string wbcstr
wbcstr = os.getenv("wbc")

#### DECLARATION OF PARAMETERS ####
var double Ts = 0.001
var strings JOINT_NAMES = strings( "shoulder_yaw_joint_right", "shoulder_pitch_joint_right", "shoulder_roll_joint_right", "elbow_pitch_joint_right", "elbow_roll_joint_right", "wrist_pitch_joint_right", "wrist_yaw_joint_right" ) 
var strings DUMMY_JOINT_NAMES = strings( "finger1_joint_right", "finger1_tip_joint_right", "finger2_joint_right", "finger2_tip_joint_right" )
var array UPPERJOINTLIMIT 		= array (   0.0,  		1.57,  		1.57, 		2.23,  		1.83,  		0.95,  		0.61,  4.0		)
var array LOWERJOINTLIMIT 		= array (   -1.57, 		-1.57, 		-1.57,  	0.0, 		-1.83		-0.95, 		-0.61, -4.0		)
var array UPPERJOINTTORQUELIMIT = array (   26.4, 		26.4, 		9.8, 		11.8, 		11.8, 		2.5, 		2.5 			)
var array LOWERJOINTTORQUELIMIT = array (   -26.4, 		-26.4, 		-9.8, 		-11.8, 		-11.8, 		-2.5, 		-2.5 			)
var array MAXERRORS 			= array (   0.09,     	0.09,   	0.09,     	0.09, 	   	0.09,    	0.09, 	   	0.19, 	 5.0	)
var array HOMED_POS 			= array (	1380.0, 	646.0,  	1.5708, 	0.0, 		1.8326,		0.985,		0.7854			)
var double TWOPI 				= 2.0*3.141592
var double GEARRATIO_SM			= 1.0/550.0
var double GEARRATIO_S3		    = 1.0/371.25
var double GEARRATIO_EM			= 1.0/410.0 ;# value (348.0) from philips manual does not make sense
var double GEARRATIO_WM			= 1.0/350.0 ;# value (290.0) note that motors are replaced with a different transmission
var double GEARRATIO_HM			= 196.0/3249.0
var double ENCODERCOUNTS_SM		= 256.0*4.0
var double ENCODERCOUNTS_S3	    = 256.0*4.0
var double ENCODERCOUNTS_EM		= 500.0*4.0 
var double ENCODERCOUNTS_WM		= 128.0*4.0
var double ENCODERCOUNTS_HM		= 8.0*128.0*4.0 ;# (TO DO: should be 16*4, remove this factor 8)
var double ENC2SI_SM			= TWOPI*GEARRATIO_SM/ENCODERCOUNTS_SM
var double ENC2SI_S3			= TWOPI*GEARRATIO_S3/ENCODERCOUNTS_S3
var double ENC2SI_EM			= TWOPI*GEARRATIO_EM/ENCODERCOUNTS_EM
var double ENC2SI_WM			= TWOPI*GEARRATIO_WM/ENCODERCOUNTS_WM
var double ENC2SI_HM 			= TWOPI*GEARRATIO_HM/ENCODERCOUNTS_HM
var int Nj						= 8
var int Nm						= 9
var int BODYNUMBER 				= 4
var string BODYNAME 			= "right_arm"
var bool HOMEABLE 				= true
var bool REQUIREHOMING   		= true
var bool REQUIREGRIPPERHOMING   = true
if (wbcstr == "true") then {	
	REQUIREHOMING   			= false; 
	REQUIREGRIPPERHOMING		= false;
}
 
### NameBodyPart ###
Supervisor.NameBodyPart( BODYNUMBER, BODYNAME, HOMEABLE)

#### HIGH PRIORITY COMPONENTS ####
### Read reference joint angles ###
#loadComponent("RPERA_ReadReferences","PERA::ReadArmJointsMsg")
loadComponent("RPERA_ReadReferences","ROS::JointStateToDoubles")
addPeer("Supervisor","RPERA_ReadReferences")
setActivity("RPERA_ReadReferences",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_ReadReferences.NumberOfJoints = 7
RPERA_ReadReferences.configure

### Vector concatenate ###
loadComponent("RPERA_VectorConcatenate","PERA::Concatenate")
addPeer("Supervisor","RPERA_VectorConcatenate")
setActivity("RPERA_VectorConcatenate",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_VectorConcatenate.configure

### Motor to joint angles ###
loadComponent("RPERA_MotorToJointSpace","MatrixTransform")
addPeer("Supervisor","RPERA_MotorToJointSpace")
setActivity("RPERA_MotorToJointSpace",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_MotorToJointSpace.Nrows 		= Nj
RPERA_MotorToJointSpace.Ncolumns 	= Nm
RPERA_MotorToJointSpace.configure
RPERA_MotorToJointSpace.function1 	= array  ( 0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function2 	= array  ( 0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function3 	= array  ( 0.0,  0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function4 	= array  ( 0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function5 	= array  ( 0.0,  0.0,  0.0,  0.0, -0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function6 	= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
RPERA_MotorToJointSpace.function7 	= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,  0.5,  0.0)
RPERA_MotorToJointSpace.function8 	= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### Compute tracking error ###
loadComponent("RPERA_ComputeErrors","MATH::Subtraction")
addPeer("Supervisor","RPERA_ComputeErrors")
setActivity("RPERA_ComputeErrors",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_ComputeErrors.vectorsize = Nj
RPERA_ComputeErrors.configure

## Input torque limiter
loadComponent("RPERA_InputTorqueLimiter", "DISCONTINUITIES::Saturation")
addPeer("Supervisor","RPERA_InputTorqueLimiter")
setActivity("RPERA_InputTorqueLimiter", 0.0, HighestPriority, ORO_SCHED_RT)
RPERA_InputTorqueLimiter.upper_limit = UPPERJOINTTORQUELIMIT
RPERA_InputTorqueLimiter.lower_limit = LOWERJOINTTORQUELIMIT
RPERA_InputTorqueLimiter.vector_size = 7
RPERA_InputTorqueLimiter.configure
	
### Admittance controller
loadComponent("RPERA_AdmittanceController","FILTERS::AdmittanceControllers")
addPeer("Supervisor","RPERA_AdmittanceController")
setActivity("RPERA_AdmittanceController",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_AdmittanceController.vector_size 			= 7
RPERA_AdmittanceController.sampling_time 		= Ts
RPERA_AdmittanceController.masses 				= array( 38.0, 38.0, 6.0, 5.5, 5.5, 1.6, 1.6 )
RPERA_AdmittanceController.damping_coefficients = array( 35.0, 35.0, 8.6, 8.6, 8.4, 2.9, 2.9 )
RPERA_AdmittanceController.lower_joint_limits 	= LOWERJOINTLIMIT
RPERA_AdmittanceController.upper_joint_limits 	= UPPERJOINTLIMIT
RPERA_AdmittanceController.configure

### Interpolator (DO NOT INCREASE VALUES !!!) ###
loadComponent("RPERA_ReferenceInterpolator","SOURCES::ReferenceGenerator")
addPeer("Supervisor","RPERA_ReferenceInterpolator")
setActivity("RPERA_ReferenceInterpolator",Ts,HighestPriority,ORO_SCHED_RT)
RPERA_ReferenceInterpolator.setPeriod(Ts)
RPERA_ReferenceInterpolator.NrInterpolators 	= Nj
RPERA_ReferenceInterpolator.InterpolatorDt 		= Ts
RPERA_ReferenceInterpolator.InterpolatorEps 	= 1.0
RPERA_ReferenceInterpolator.configure
RPERA_ReferenceInterpolator.interpolator1 		= array (0.0, 0.4, 0.2)
RPERA_ReferenceInterpolator.interpolator2 		= array (0.0, 0.4, 0.2)
RPERA_ReferenceInterpolator.interpolator3 		= array (0.0, 0.6, 0.3)
RPERA_ReferenceInterpolator.interpolator4 		= array (0.0, 0.8, 0.5)
RPERA_ReferenceInterpolator.interpolator5 		= array (0.0, 0.8, 0.5)
RPERA_ReferenceInterpolator.interpolator6 		= array (0.0, 1.0, 0.5)
RPERA_ReferenceInterpolator.interpolator7 		= array (0.0, 1.0, 0.5)
RPERA_ReferenceInterpolator.interpolator8 		= array (0.0, 10.0, 100.0)

### PERA Safety ###
loadComponent("RPERA_Safety","SUPERVISORY::SafetyMonitor")
addPeer("Supervisor","RPERA_Safety")
setActivity("RPERA_Safety",Ts,HighestPriority,ORO_SCHED_RT)
RPERA_Safety.vectorsize_motorspace 	= Nm;
RPERA_Safety.vectorsize_jointspace 	= Nj;
RPERA_Safety.maxJointErrors 		= MAXERRORS;
RPERA_Safety.motorSaturations 		= array (  100.0, 	100.0,     10.0, 	 40.0, 	   50.0,  	50.0, 	   50.0, 	50.0, 	90.0)
RPERA_Safety.maxConSatTime 			= 5.0;
RPERA_Safety.partNr					= BODYNUMBER;
RPERA_Safety.configure

### PERA ActuatorEnabler ###
loadComponent("RPERA_ActuatorEnabler","SUPERVISORY::ActuatorEnabler")
addPeer("Supervisor","RPERA_ActuatorEnabler")
setActivity("RPERA_ActuatorEnabler",Ts,HighestPriority,ORO_SCHED_RT)
RPERA_ActuatorEnabler.configure

### PERA Homing ###
loadComponent("RPERA_Homing","PERA::PERAHoming")
addPeer("Supervisor","RPERA_Homing")
setActivity("RPERA_Homing",Ts,HighestPriority,ORO_SCHED_RT)
RPERA_Homing.requireHoming			= REQUIREHOMING
RPERA_Homing.requireGripperHoming	= REQUIREGRIPPERHOMING
RPERA_Homing.maxJointErrors 		= MAXERRORS
RPERA_Homing.jointNames				= JOINT_NAMES
RPERA_Homing.stepSize 				= 0.5
RPERA_Homing.startJoint 			= 7
RPERA_Homing.absSenDir 				= array (	1.0,	-1.0,	1.0,	1.0,	1.0,	1.0,	-1.0		)
RPERA_Homing.homedPos 				= HOMED_POS
RPERA_Homing.absOrRel 				= array (	0.0,	0.0, 	1.0,	1.0,	1.0,	1.0,	1.0,	1.0	)
RPERA_Homing.endPose				= array (  -0.1,   -0.2, 	0.2, 	0.8,	0.0,	0.0, 	0.0)
RPERA_Homing.configure

### LOAD READENCODERS
loadComponent("RPERA_ReadEncoders","SOEM::ReadEncoders")
addPeer("Supervisor","RPERA_ReadEncoders")
setActivity("RPERA_ReadEncoders",Ts,HighestPriority,ORO_SCHED_RT)
RPERA_ReadEncoders.encoderbits = 65536
RPERA_ReadEncoders.enc2SI = array (ENC2SI_SM ,ENC2SI_SM ,0.0 , ENC2SI_S3 , ENC2SI_EM , ENC2SI_EM , ENC2SI_WM , ENC2SI_WM , ENC2SI_HM )
RPERA_ReadEncoders.configure

### Gripper force controller ###
loadComponent("RPERA_GripperControl","PERA::GripperControl")
addPeer("Supervisor","RPERA_GripperControl")
setActivity("RPERA_GripperControl",Ts,HighestPriority,ORO_SCHED_RT)
RPERA_GripperControl.setPeriod(Ts)
RPERA_GripperControl.threshold_closed 	= 8.0
RPERA_GripperControl.max_pos 			= 5.3
RPERA_GripperControl.gripper_gain 		= 0.1
RPERA_GripperControl.sensorPos 			= 8
RPERA_GripperControl.configure

### Joint to motor torques ###
loadComponent("RPERA_JointToMotorSpace","MatrixTransform")
addPeer("Supervisor","RPERA_JointToMotorSpace")
setActivity("RPERA_JointToMotorSpace",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_JointToMotorSpace.Nrows 		= Nm
RPERA_JointToMotorSpace.Ncolumns 	= Nj
RPERA_JointToMotorSpace.configure
RPERA_JointToMotorSpace.function1	= array ( 0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function2	= array (-0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function3 	= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function4 	= array ( 0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function5 	= array ( 0.0,  0.0,  0.0,  0.5, -0.5,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function6 	= array ( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function7 	= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5, -0.5,  0.0)
RPERA_JointToMotorSpace.function8 	= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
RPERA_JointToMotorSpace.function9 	= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### GAINS ###
loadComponent("RPERA_Gains","MATH::Gains")
addPeer("Supervisor","RPERA_Gains")
setActivity("RPERA_Gains",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_Gains.vectorsize 	= Nj
RPERA_Gains.gain 		= array (2000.0, 2000.0, 1000.0, 1750.0, 1750.0, 1750.0, 2150.0, 500.0);
RPERA_Gains.configure

### LEADLAGS ###
loadComponent("RPERA_LeadLags","FILTERS::LeadLags")
addPeer("Supervisor","RPERA_LeadLags")
setActivity("RPERA_LeadLags",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_LeadLags.vector_size 		= Nj
RPERA_LeadLags.sampling_time 	= Ts
RPERA_LeadLags.zero_frequency 	= array (25.0, 25.0, 15.0, 100.0, 100.0,  5.0,  5.0,  4.5)
RPERA_LeadLags.pole_frequency 	= array (80.0, 80.0, 40.0, 200.0, 200.0, 40.0, 40.0, 45.0)
RPERA_LeadLags.configure

### LOWPASS ###
loadComponent("RPERA_Lowpasses","FILTERS::SecondOrderLowPasses")
addPeer("Supervisor","RPERA_Lowpasses")
setActivity("RPERA_Lowpasses",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_Lowpasses.vector_size 	= Nj
RPERA_Lowpasses.sampling_time 	= Ts
RPERA_Lowpasses.pole_frequency 	= array (125.0, 125.0, 125.0, 125.0, 62.5, 125.0, 125.0, 125.0)
RPERA_Lowpasses.pole_damping 	= array (0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7)
RPERA_Lowpasses.configure

### INTEGRATOR ###
loadComponent("RPERA_Integrators","FILTERS::WeakIntegrators")
addPeer("Supervisor","RPERA_Integrators")
setActivity("RPERA_Integrators",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_Integrators.zero_frequency = array(0.0065, 0.0065, 0.009, 0.004, 0.004, 0.02, 0.02, 0.000001); 
RPERA_Integrators.vector_size 	 = Nj
RPERA_Integrators.sampling_time  = Ts
RPERA_Integrators.configure

#### LOWER PRIORITY COMPONENTS ####
### Velocity and acceleration estimator ###
loadComponent("RPERA_RTD","AMIGO::RealTimeDerivator")
addPeer("Supervisor","RPERA_RTD")
setActivity("RPERA_RTD",Ts,LowestPriority,ORO_SCHED_OTHER)
RPERA_RTD.setPeriod(Ts)
RPERA_RTD.vector_size	= Nj
RPERA_RTD.bw 			= 10.0
RPERA_RTD.configure

### Output limiter ###
loadComponent("RPERA_JointOutputLimiter","DISCONTINUITIES::Saturation")
addPeer("Supervisor","RPERA_JointOutputLimiter")
setActivity("RPERA_JointOutputLimiter",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_JointOutputLimiter.upper_limit = UPPERJOINTLIMIT
RPERA_JointOutputLimiter.lower_limit = LOWERJOINTLIMIT
RPERA_JointOutputLimiter.vector_size = Nj
RPERA_JointOutputLimiter.configure

### Publishing joint angles on ROS-topic ###
loadComponent("RPERA_WriteClippedJointAngles","ROS::DoublesToJointState")
addPeer("Supervisor","RPERA_WriteClippedJointAngles")
setActivity("RPERA_WriteClippedJointAngles",0.05,LowestPriority,ORO_SCHED_OTHER)
RPERA_WriteClippedJointAngles.JointNames = JOINT_NAMES
RPERA_WriteClippedJointAngles.configure

### Publishing joint angles on ROS-topic ###
loadComponent("RPERA_WriteCurrentJointAngles","ROS::DoublesToJointState")
addPeer("Supervisor","RPERA_WriteCurrentJointAngles")
setActivity("RPERA_WriteCurrentJointAngles",0.05,LowestPriority,ORO_SCHED_OTHER)
RPERA_WriteCurrentJointAngles.JointNames = JOINT_NAMES
RPERA_WriteCurrentJointAngles.configure

### Conversion analog PERA_IO values to torques ###
loadComponent("RPERA_SensorTorques","SensorTorques")
addPeer("Supervisor","RPERA_SensorTorques")
setActivity("RPERA_SensorTorques",(Ts),LowestPriority,ORO_SCHED_OTHER)
RPERA_SensorTorques.setPeriod(Ts);#	SM1 		SM2			obsolete	SM3 		EM1 		EM2 		WM1 		WM2 		HM
RPERA_SensorTorques.c1 		= array (42.0,		4250.0,		1.0,		94.0,		20.0,		825.0,		1.0,		1.0,		32.3375		)
RPERA_SensorTorques.c2 		= array (-0.8,		12.0,		1.0,		1.0,		-2.2,		1.0,		1.0,		1.0,		0.2			)
RPERA_SensorTorques.c3 		= array (-35.63,	-294.40,	1.0,		-30.56,		-30.9,		-168.32,	1.0, 		1.0,		-34.66		)
RPERA_SensorTorques.configure

#### Diagnostics ###
loadComponent("RPERA_Diagnostics","ROS::RosDiagnostics")
addPeer("Supervisor","RPERA_Diagnostics")
setActivity("RPERA_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
RPERA_Diagnostics.setPeriod(1.0)
RPERA_Diagnostics.statusname 			= "RPERA"
RPERA_Diagnostics.NumberOfVectorPorts 	= 3
RPERA_Diagnostics.NumberOfBoolPorts 	= 0
RPERA_Diagnostics.configure
RPERA_Diagnostics.vecname1 				= "Reference Interpolator"
RPERA_Diagnostics.vecname2 				= "Joint Errors"
RPERA_Diagnostics.vecname3 				= "Reference Path Planning"

### Setting up tracing ###
#loadComponent("RPERA_Tracing","Signal::Tracing")
#addPeer("Supervisor","RPERA_Tracing")
#setActivity("RPERA_Tracing",0.0,HighestPriority,ORO_SCHED_RT)
#RPERA_Tracing.vector_sizes = array (9.0, 8.0, 8.0, 8.0, 8.0, 9.0)
#RPERA_Tracing.buffersize = 32768*2;
#RPERA_Tracing.filename = "/home/amigo/ros/groovy/rosbuild_ws/tue/user/max/FST5/GripperRight.dat"
#RPERA_Tracing.Ts = Ts
#RPERA_Tracing.configure
#connect ("RPERA_AnalogInsPera.out_for","RPERA_Tracing.in1", ConnPolicy() );				# force sensors	voltage input
#connect ("RPERA_ReferenceInterpolator.posout","RPERA_Tracing.in2", ConnPolicy() );			# reference after reference generator
#connect ("RPERA_MotorToJointSpace.out","RPERA_Tracing.in3", ConnPolicy() ); 				# position
#connect ("RPERA_ComputeErrors.out","RPERA_Tracing.in4", ConnPolicy() ); 					# error
#connect ("RPERA_Integrators.out","RPERA_Tracing.in5", ConnPolicy() ); 						# control effort
#connect ("RPERA_SensorTorques.measured_torques_out","RPERA_Tracing.in6", ConnPolicy() );  	# force sensors	after sensor calculation

#### SET UP JOINTSTATE AGGREGATOR ####
JointStateAggregator.addJointNames(JOINT_NAMES)
JointStateAggregator.addJointNames(DUMMY_JOINT_NAMES)
JointStateAggregator.addAggregationPort(BODYNAME)

#### CONNECT COMPONENTS ####
## Control loop	## 
connect ("Soem.Slave_1010.encoderAngle1","RPERA_ReadEncoders.enc1_in" , ConnPolicy() ); 
connect ("Soem.Slave_1010.encoderAngle2","RPERA_ReadEncoders.enc2_in" , ConnPolicy() ); 
connect ("Soem.Slave_1010.encoderAngle3","RPERA_ReadEncoders.enc3_in" , ConnPolicy() ); 
connect ("Soem.Slave_1011.encoderAngle1","RPERA_ReadEncoders.enc4_in" , ConnPolicy() ); 
connect ("Soem.Slave_1011.encoderAngle2","RPERA_ReadEncoders.enc5_in" , ConnPolicy() ); 
connect ("Soem.Slave_1011.encoderAngle3","RPERA_ReadEncoders.enc6_in" , ConnPolicy() ); 
connect ("Soem.Slave_1012.encoderAngle1","RPERA_ReadEncoders.enc7_in" , ConnPolicy() ); 
connect ("Soem.Slave_1012.encoderAngle2","RPERA_ReadEncoders.enc8_in" , ConnPolicy() );
connect ("Soem.Slave_1012.encoderAngle3","RPERA_ReadEncoders.enc9_in" , ConnPolicy() );
connect ("RPERA_ReadEncoders.out","RPERA_MotorToJointSpace.in" , ConnPolicy() ); 
connect ("RPERA_MotorToJointSpace.out","RPERA_ComputeErrors.in_minus", ConnPolicy() )
connect ("RPERA_ComputeErrors.out","RPERA_Gains.in", ConnPolicy() )
connect ("RPERA_Gains.out","RPERA_LeadLags.in", ConnPolicy() )
connect ("RPERA_LeadLags.out","RPERA_Lowpasses.in", ConnPolicy() )
connect ("RPERA_Lowpasses.out","RPERA_Integrators.in", ConnPolicy() )
connect ("RPERA_Integrators.out","RPERA_JointToMotorSpace.in", ConnPolicy() )
connect ("RPERA_JointToMotorSpace.out","RPERA_AnalogOutsPera.in_ev", ConnPolicy() )

## Whole body controller or reference generator loop	##
if (wbcstr == "true") then {
	connect ("RPERA_ReadReferences.eff_out","RPERA_InputTorqueLimiter.in", ConnPolicy() )
	connect ("RPERA_InputTorqueLimiter.out", "RPERA_AdmittanceController.force_in", ConnPolicy() )
	connect ("RPERA_MotorToJointSpace.out","RPERA_AdmittanceController.measured_position_in", ConnPolicy() )
	connect ("RPERA_AdmittanceController.out", "RPERA_VectorConcatenate.in1", ConnPolicy() )
	connect ("RPERA_VectorConcatenate.out","RPERA_ComputeErrors.in_plus", ConnPolicy() )
}
else if (wbcstr == "false") then {
	connect ("RPERA_ReadReferences.pos_out","RPERA_VectorConcatenate.in1", ConnPolicy() )
 	connect ("RPERA_VectorConcatenate.out","RPERA_ReferenceInterpolator.posin", ConnPolicy() )
    connect ("RPERA_ReferenceInterpolator.posout","RPERA_ComputeErrors.in_plus", ConnPolicy() )
}

## Reference and Ros communication ##
connect ("RPERA_GripperControl.gripper_ref","RPERA_VectorConcatenate.in2", ConnPolicy() )
connect ("RPERA_MotorToJointSpace.out","RPERA_WriteCurrentJointAngles.pos_in", ConnPolicy() )
connect ("RPERA_MotorToJointSpace.out","RPERA_JointOutputLimiter.in", ConnPolicy() )
connect ("RPERA_JointOutputLimiter.out","RPERA_WriteClippedJointAngles.pos_in", ConnPolicy() )
connect ("RPERA_WriteClippedJointAngles.out", "JointStateAggregator.right_arm", ConnPolicy() )

## Safety and ActuatorEnabler ##
connect ("RPERA_ComputeErrors.out","RPERA_Safety.jointErrors", ConnPolicy() )
connect ("RPERA_MotorToJointSpace.out","RPERA_Safety.jointAngles", ConnPolicy() )
connect ("RPERA_JointToMotorSpace.out","RPERA_Safety.controllerOutput", ConnPolicy() )
connect ("RPERA_Homing.homing_joint","RPERA_Safety.homing", ConnPolicy() )
connect ("RPERA_Safety.resetInt","RPERA_ReferenceInterpolator.resetValues", ConnPolicy() )
connect ("RPERA_Safety.safe","Supervisor.right_arm_error", ConnPolicy() )
connect ("RPERA_Safety.safe","RPERA_ActuatorEnabler.safe_in", ConnPolicy() )
connect ("RPERA_ActuatorEnabler.actuator_enable","Soem.Slave_1010.enablePort", ConnPolicy() )
connect ("RPERA_ActuatorEnabler.actuator_enable","Soem.Slave_1011.enablePort", ConnPolicy() )
connect ("RPERA_ActuatorEnabler.actuator_enable","Soem.Slave_1012.enablePort", ConnPolicy() )

## Homing ##
connect ("RPERA_Homing.homing_finished","Supervisor.right_arm_homingfinished", ConnPolicy() )
connect ("RPERA_AnalogInsPera.out_pos","RPERA_Homing.measAbsJointAnglesPort", ConnPolicy() )
connect ("RPERA_Homing.homJntAnglesPort","RPERA_VectorConcatenate.in1", ConnPolicy() )
connect ("RPERA_Homing.resetInterpolatorPort","RPERA_ReferenceInterpolator.resetValues", ConnPolicy() )
connect ("RPERA_Homing.reNullPort","RPERA_ReadEncoders.in_reNull", ConnPolicy() )
connect ("RPERA_Homing.reNullPort","RPERA_GripperControl.reNullPort", ConnPolicy() )
connect ("RPERA_Homing.reNullPort","RPERA_Safety.reNull", ConnPolicy() )
connect ("RPERA_ComputeErrors.out","RPERA_Homing.errorPort", ConnPolicy() )
connect ("RPERA_MotorToJointSpace.out","RPERA_Homing.measRelJointAnglesPort", ConnPolicy() )
connect ("RPERA_Homing.endpos_out","RPERA_VectorConcatenate.in1", ConnPolicy() ) 

## Gripper control ##
connect ("RPERA_AnalogInsPera.out_for","RPERA_SensorTorques.voltage_in", ConnPolicy() )
connect ("RPERA_SensorTorques.measured_torques_out","RPERA_GripperControl.torque_in", ConnPolicy() )
connect ("RPERA_MotorToJointSpace.out", "RPERA_GripperControl.position_in", ConnPolicy() )
connect ("RPERA_GripperControl.gripper_measurement","RPERA_Homing.gripper_measurement", ConnPolicy() )
connect ("RPERA_Homing.gripper_command","RPERA_GripperControl.gripper_command", ConnPolicy() )

## REAL TIME DERIVATOR ##
connect ("RPERA_MotorToJointSpace.out","RPERA_RTD.u", ConnPolicy() )

## Diagnostics ##
connect ("RPERA_VectorConcatenate.out", "RPERA_Diagnostics.vec1", ConnPolicy() )
connect ("RPERA_ComputeErrors.out", "RPERA_Diagnostics.vec2", ConnPolicy() )
connect ("RPERA_ReadReferences.pos_out", "RPERA_Diagnostics.vec3", ConnPolicy() )

#### CONNECT ROS STREAMS ####
stream ("RPERA_Safety.resetRef", ros.topic("/amigo/right_arm/references"))
stream ("RPERA_WriteCurrentJointAngles.out", ros.topic("/amigo/right_arm/measurements_raw"))
stream ("RPERA_WriteClippedJointAngles.out", ros.topic("/amigo/right_arm/measurements"))
stream ("RPERA_ReadReferences.in", ros.topic("/amigo/right_arm/references"))
stream ("RPERA_GripperControl.gripper_measurement", ros.topic("/amigo/right_gripper/measurements"))
stream ("RPERA_GripperControl.gripper_command", ros.topic("/amigo/right_gripper/references"))
stream ("RPERA_RTD.derivatives", ros.topic("/pera_rtd_data"))
stream ("RPERA_Diagnostics.diagnostics", ros.topic("/diagnostics"));

#### START COMPONENTS ####
Supervisor.AddAllwaysOnPeer ("RPERA_Diagnostics")
Supervisor.AddAllwaysOnPeer ("RPERA_WriteCurrentJointAngles")
Supervisor.AddAllwaysOnPeer ("RPERA_WriteClippedJointAngles")
Supervisor.AddAllwaysOnPeer ("RPERA_ReadEncoders")
Supervisor.AddAllwaysOnPeer ("RPERA_ActuatorEnabler")

Supervisor.AddHomingOnlyPeer ("RPERA_Homing", BODYNUMBER )

Supervisor.AddOpOnlyPeer ("RPERA_ReadReferences", BODYNUMBER )

if (wbcstr == "true") then {
	Supervisor.AddEnabledPeer ("RPERA_InputTorqueLimiter", BODYNUMBER )
	Supervisor.AddEnabledPeer ("RPERA_AdmittanceController", BODYNUMBER )
}
else if (wbcstr == "false") then {
	Supervisor.AddAllwaysOnPeer ("RPERA_ReferenceInterpolator")
}
Supervisor.AddEnabledPeer ("RPERA_VectorConcatenate", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_MotorToJointSpace", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_ComputeErrors", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_JointToMotorSpace", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_JointOutputLimiter", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_RTD", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_Gains", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_LeadLags", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_Lowpasses", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_Integrators", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_SensorTorques", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_GripperControl", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_Safety", BODYNUMBER)
#Supervisor.AddEnabledPeer ("RPERA_Tracing", BODYNUMBER)
