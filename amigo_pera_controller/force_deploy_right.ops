import("philips_arm_controller_dev")
trigger
runScript ("communication_right.ops")
trigger
communication_right.start
trigger


### Read reference joint angles ###
loadComponent("ReadReferenceAngles","PERA::ReadArmJointsMsg")
ReadReferenceAngles.offsets = array ( 0.0, 1.570796325, 0.0, 0.0, 0.0, 1.570796325, 0.0, 0.0 )
ReadReferenceAngles.signs = array ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
ReadReferenceAngles.configure

### Read reference joint angles ###
#loadComponent("ReadReferenceAngles","MSG::ReadArmJointsMsgFixed")
#ReadReferenceAngles.offsets = array ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
#ReadReferenceAngles.signs = array ( 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 )
	#ReadReferenceAngles.jointValues = array ( 0.0, 0.0, 0.0, 1.57079, 0.0, 0.0, 0.0)
#ReadReferenceAngles.jointValues = array ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
#ReadReferenceAngles.configure

### Interpolator ###
loadComponent("ReferenceInterpolator","ReferenceGenerator")
ReferenceInterpolator.setPeriod(0.004)
ReferenceInterpolator.NrInterpolators = 8
ReferenceInterpolator.InterpolatorDt = 0.004
ReferenceInterpolator.InterpolatorEps = 1.0
ReferenceInterpolator.configure
ReferenceInterpolator.interpolator1 = array (0.0, 0.43, 0.2)
ReferenceInterpolator.interpolator2 = array (0.0, 0.43, 0.2)
ReferenceInterpolator.interpolator3 = array (0.0, 0.6, 0.25)
ReferenceInterpolator.interpolator4 = array (0.0, 0.5, 0.2)
ReferenceInterpolator.interpolator5 = array (0.0, 0.35, 0.15)
ReferenceInterpolator.interpolator6 = array (0.0, 3.1416, 0.5)
ReferenceInterpolator.interpolator7 = array (0.0, 3.1416, 0.5)
ReferenceInterpolator.interpolator8 = array (0.0, 0.4, 0.1)

### PERA USB IO ###
loadComponent("PERA_IO","PERA::PERA_USB_IO")
PERA_IO.setPeriod(0.004)
PERA_IO.configure
PERA_IO.absSenJumpPosProperty = array (1024.0, 732.0, 721.0, 1024.0, 706.0, 1024.0, 1024.0)
PERA_IO.afterAbsSenJumpProperty = array (0.0, 100.0, 250.0, 0.0, 100.0, 0.0, 0.0)

### Low-pass for the gripper force sensing
#loadComponent("FirstOrderLowPass","FILTERS::FirstOrderLowPass")
#FirstOrderLowPass.pole_frequency = 10.0
#FirstOrderLowPass.setPeriod(0.004)
#FirstOrderLowPass.configure

### Gripper control
loadComponent("GripperControl","PERA::Gripper_control")
GripperControl.threshold_open = 0.3;
GripperControl.threshold_closed = 3.7;
GripperControl.encoderCompensation = 3.0;
GripperControl.setPeriod(0.004)
GripperControl.configure

### Gravity Compensation
loadComponent("GravityCompensation","PERA::GRAVCOM")
#GravityCompensation.torqueFactors = array ( 1500.0, 1500.0, 0.0, 5000.0, 0.0, 0.0, 0.0, 0.0 )
#GravityCompensation.torqueFactors = array ( 1.0, 1.0, 1.0, 2000.0, 2000.0, 1.0, 1.0, 1.0 )
GravityCompensation.torqueFactors = array ( 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 )
GravityCompensation.configure

### Decouple motor angles to joint angles (includes encoder conversion factors!!!) ###
loadComponent("MotorToJointAngles","MatrixTransform")
MotorToJointAngles.Nrows = 8
MotorToJointAngles.Ncolumns = 8
MotorToJointAngles.configure
MotorToJointAngles.function1 = array (0.00032, -0.000323, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function2 = array (-0.00032, -0.000323, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function3 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00095, 0.0)
MotorToJointAngles.function4 = array (0.0, 0.0, 0.0002197, 0.0002197, 0.0, 0.0, 0.0, 0.0)
#MotorToJointAngles.function4 = array (0.0, 0.0, 0.0002525, 0.0002525, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function5 = array (0.0, 0.0, -0.0002525, 0.0002525, 0.0, 0.0, 0.0, 0.0)
#MotorToJointAngles.function5 = array (0.0, 0.0, -0.0002197, 0.0002197, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function6 = array (0.0, 0.0, 0.0, 0.0, 0.00121, 0.00121, 0.0, 0.0)
MotorToJointAngles.function7 = array (0.0, 0.0, 0.0, 0.0, 0.00121, -0.00121, 0.0, 0.0)
MotorToJointAngles.function8 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00375)

### Convert radians to degrees
loadComponent("RadToDeg","MATH::Gain")
RadToDeg.vectorsize = 8
RadToDeg.gain = 57.295779513
RadToDeg.configure 

### Compute the errors of the joints wrt reference angles
loadComponent("ComputeJointErrors","Substraction")
ComputeJointErrors.vectorsize = 8
ComputeJointErrors.configure

### Decouple joint torques to motor torques ###
loadComponent("JointToMotorTorques","MatrixTransform")
JointToMotorTorques.Nrows = 8
JointToMotorTorques.Ncolumns = 8
JointToMotorTorques.configure
JointToMotorTorques.function1 = array (0.5, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
JointToMotorTorques.function2 = array (-0.5, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
JointToMotorTorques.function3 = array (0.0, 0.0, 0.0, 0.5, -0.5, 0.0, 0.0, 0.0)
JointToMotorTorques.function4 = array (0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
JointToMotorTorques.function5 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0)
JointToMotorTorques.function6 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.5, -0.5, 0.0)
JointToMotorTorques.function7 = array (0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)
JointToMotorTorques.function8 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)

### PERA Controllers ###
loadComponent("JointControllers","FILTERS::PIDs")
JointControllers.proportional_coefficient = array (35.5, 	35.0, 	20.0, 	20.0, 	20.0, 	30.0, 	30.0, 	4.0)
JointControllers.integral_coefficient = 	array (3.0, 	3.0, 	2.0, 	4.0, 	2.0, 	3.0, 	3.0, 	2.0)
JointControllers.derivative_coefficient = 	array (1.0, 	1.0, 	0.1, 	0.1, 	0.2, 	0.03, 	0.03, 	0.008)
JointControllers.anti_windup_coefficient = 	array (0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0)
JointControllers.integrator_initial_value = array (0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0)
JointControllers.limit = 					array (5000.0, 	5000.0, 5000.0, 5000.0, 5000.0, 5000.0, 5000.0, 5000.0)
JointControllers.sampling_time = 0.004
JointControllers.vector_size = 8
JointControllers.configure

### Actuator constant
loadComponent("ActuatorConstant","MATH::Gain")
ActuatorConstant.vectorsize = 8
ActuatorConstant.gain = 1000.0
ActuatorConstant.configure

### Feedforward
loadComponent("FeedForward","PERA::FEEDFORWARD")
#FeedForward.kfcFeedForward = array (3000.0, 3000.0, 3000.0, 6000.0, 3000.0, 3000.0, 3000.0, 10000.0)
#FeedForward.kfcFeedForward = array (7000.0, 5000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
FeedForward.kfcFeedForward = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
FeedForward.configure

### Saturation on the controller output
loadComponent("OutputLimiter","DISCONTINUITIES::Saturation")
OutputLimiter.upper_limit = array ( 25000.0, 25000.0, 20000.0, 20000.0, 5000.0, 5000.0, 25000.0, 25000.0 )
#OutputLimiter.upper_limit = array ( 1.0, 1.0, 20000.0, 20000.0, 1.0, 1.0, 1.0, 1.0 )
#OutputLimiter.lower_limit = array ( -1.0, -1.0, -20000.0, -20000.0, -1.0, -1.0, -1.0, -1.0 )
OutputLimiter.lower_limit = array ( -25000.0,-25000.0, -20000.0, -20000.0, -5000.0, -5000.0, -25000.0, -25000.0 )
OutputLimiter.vector_size = 8
OutputLimiter.configure

### Convert radians to degrees
loadComponent("DegToRad","MATH::Gain")
DegToRad.vectorsize = 8
DegToRad.gain = 0.0174532925
DegToRad.configure 

### Write the current joint angles ###
loadComponent("WriteCurrentJointAngles","PERA::WriteArmJointsMsg")
WriteCurrentJointAngles.offsets = array ( 0.0, 1.570796325, 0.0, 0.0, 0.0, 1.570796325, 0.0, 0.0 )
WriteCurrentJointAngles.signs = array ( 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 )
WriteCurrentJointAngles.configure

### PERA watchdog ###
loadComponent("Watchdog","PERA::WATCHDOG")
Watchdog.setPeriod(0.004)
Watchdog.jointLowerBounds = array ( -1.570796327, -1.570796327, -1.570796327, 0.0, -1.832595715, -0.954837674, -0.785398164 )
Watchdog.jointUpperBounds = array ( 0.0, 1.570796327, 1.570796327, 1.989675348, 1.832595715, 0.954837674, 0.785398164 )
#Watchdog.maxJointErrors = array ( 5.0, 5.0, 5.0, 5.0, 5.0, 35.0, 35.0, 35.0)
Watchdog.maxJointErrors = array ( 500.0, 500.0, 500.0, 500.0, 500.0, 3500.0, 3500.0, 3500.0)
Watchdog.enableOutput = true
Watchdog.configure

loadComponent("SensorTorques","ReadTorques")
SensorTorques.Ksensor = array (0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025, 0.0025)
SensorTorques.Voffset = array (0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2)
SensorTorques.Xoffset = array (0.00025, 0.00025, 0.0013769, 0.0013463, 0.00025, 0.00268, 0.0041568, 0.0034764)
SensorTorques.Stiffness = array (777777.7, 777777.7, 2008415.0, 3142873.0, 700.0, 12935.0, 36744.86, 48136.76)
#SensorTorques.Stiffness = array (1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0)
SensorTorques.PivotDistance = array (0.03, 0.03, 0.025, 0.025, 1.0, 1.0, 0.017, 0.017)
#SensorTorques.PivotDistance = array (1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)
SensorTorques.setPeriod(0.02)
SensorTorques.configure

loadComponent("ReadArmTorquesMsg","ReadArmTorquesMsg")
ReadArmTorquesMsg.setPeriod(0.02)
ReadArmTorquesMsg.configure

stream("ReadReferenceAngles.joint_coordinates",communication_right.joint_coordinates_right)
stream("GripperControl.gripper_close",communication_right.set_gripper_right)
stream("GripperControl.gripperstatus",communication_right.gripper_status_right)

#connect ("SensorTorques.measured_torques_out","FirstOrderLowPass.in", ConnPolicy() )
#connect ("FirstOrderLowPass.out","GripperControl.torquein", ConnPolicy() )

connect ("SensorTorques.measured_torques_out","GripperControl.torquein", ConnPolicy() )
connect ("ReadReferenceAngles.gripper_pos","GripperControl.gripperposout", ConnPolicy() )
connect ("ReadReferenceAngles.pos","ReferenceInterpolator.posin", ConnPolicy() )
connect ("ReferenceInterpolator.posout","RadToDeg.in", ConnPolicy() )
connect ("ReferenceInterpolator.velout","FeedForward.velport", ConnPolicy() )
connect ("RadToDeg.out","ComputeJointErrors.in_plus", ConnPolicy() )
connect ("MotorToJointAngles.out","ComputeJointErrors.in_minus", ConnPolicy() )
connect ("MotorToJointAngles.out","DegToRad.in", ConnPolicy() )
connect ("DegToRad.out","WriteCurrentJointAngles.pos", ConnPolicy() )
connect ("PERA_IO.relEnc","MotorToJointAngles.in", ConnPolicy() )
connect ("ComputeJointErrors.out","JointControllers.in", ConnPolicy() )
connect ("JointControllers.out","ActuatorConstant.in", ConnPolicy() )
connect ("ActuatorConstant.out","FeedForward.in", ConnPolicy() )
connect ("FeedForward.out","JointToMotorTorques.in", ConnPolicy() )
connect ("JointToMotorTorques.out","OutputLimiter.in", ConnPolicy() )
connect ("MotorToJointAngles.out","GravityCompensation.in", ConnPolicy() )
#connect ("GravityCompensation.out","OutputLimiter.in", ConnPolicy() )
connect ("OutputLimiter.out","PERA_IO.cmdTorqueIn", ConnPolicy() )
connect ("ReadReferenceAngles.pos","Watchdog.requestedJointAngles", ConnPolicy() )
connect ("Watchdog.enablePort","PERA_IO.enablePort", ConnPolicy() )
connect ("ComputeJointErrors.out","Watchdog.errorPort", ConnPolicy() )

connect ("PERA_IO.forceSen","SensorTorques.voltage_in", ConnPolicy() )
connect ("SensorTorques.measured_torques_out","ReadArmTorquesMsg.in", ConnPolicy() )
stream("ReadArmTorquesMsg.out",communication_right.joint_torques_right)

#Setting up reporting
loadComponent("ForceSensorReporter", "OCL::FileReporting")
ForceSensorReporter.ReportFile = "calibration.dat"
addPeer("ForceSensorReporter","SensorTorques")
ForceSensorReporter.reportPort("SensorTorques","measured_torques_out")
#addPeer("ForceSensorReporter","MotorToJointAngles")
#ForceSensorReporter.reportPort("MotorToJointAngles","out")
ForceSensorReporter.setPeriod(0.02)
ForceSensorReporter.configure

#FirstOrderLowPass.start
GripperControl.start
ReadReferenceAngles.start
ReferenceInterpolator.start
MotorToJointAngles.start
RadToDeg.start
ComputeJointErrors.start
JointToMotorTorques.start
JointControllers.start
ActuatorConstant.start
FeedForward.start
OutputLimiter.start
DegToRad.start
WriteCurrentJointAngles.start
Watchdog.start

PERA_IO.start
GravityCompensation.start
SensorTorques.start
ReadArmTorquesMsg.start
ForceSensorReporter.start
