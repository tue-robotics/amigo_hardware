import("philips_arm_controller_dev")
trigger
runScript ("communication_right.ops")
trigger
communication_right.start
trigger

### Read reference joint angles ###
loadComponent("ReadReferenceAngles","PERA::ReadArmJointsMsg")
ReadReferenceAngles.offsets = array ( 0.0, 1.570796325, 0.0, 0.0, 0.0, 1.570796325, 0.0, 0.0 )
ReadReferenceAngles.signs = array ( 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 )
ReadReferenceAngles.configure

### Interpolator ###
loadComponent("ReferenceInterpolator","ReferenceGenerator")
ReferenceInterpolator.setPeriod(0.004)
ReferenceInterpolator.NrInterpolators = 8
ReferenceInterpolator.InterpolatorDt = 0.004
ReferenceInterpolator.InterpolatorEps = 1.0
ReferenceInterpolator.configure
ReferenceInterpolator.interpolator1 = array (0.0, 0.43, 0.2)
ReferenceInterpolator.interpolator2 = array (0.0, 0.43, 0.2)
ReferenceInterpolator.interpolator3 = array (0.0, 0.6, 0.25)
ReferenceInterpolator.interpolator4 = array (0.0, 0.5, 0.2)
ReferenceInterpolator.interpolator5 = array (0.0, 0.35, 0.15)
ReferenceInterpolator.interpolator6 = array (0.0, 3.1416, 0.5)
ReferenceInterpolator.interpolator7 = array (0.0, 3.1416, 0.5)
ReferenceInterpolator.interpolator8 = array (0.0, 0.4, 0.1)

### PERA USB IO ###
loadComponent("PERA_IO","PERA::PERA_USB_IO")
PERA_IO.setPeriod(0.004)
PERA_IO.configure
PERA_IO.currentLimitProperty = array (25000.0, 25000.0, 20000.0, 20000.0, 5000.0, 5000.0, 25000.0, 25000.0)
PERA_IO.absSenJumpPosProperty = array (1024.0, 732.0, 721.0, 1024.0, 706.0, 1024.0, 1024.0)
PERA_IO.afterAbsSenJumpProperty = array (0.0, 100.0, 250.0, 0.0, 100.0, 0.0, 0.0)
PERA_IO.kactProperty = 1000;
PERA_IO.enableProperty = false;

### Decouple motor angles to joint angles (includes encoder conversion factors!!!) ###
loadComponent("MotorToJointAngles","MatrixTransform")
MotorToJointAngles.Nrows = 8
MotorToJointAngles.Ncolumns = 8
MotorToJointAngles.configure
MotorToJointAngles.function1 = array (0.00032, -0.000323, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function2 = array (-0.00032, -0.000323, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function3 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00095, 0.0)
MotorToJointAngles.function4 = array (0.0, 0.0, 0.0002197, 0.0002197, 0.0, 0.0, 0.0, 0.0)
#MotorToJointAngles.function4 = array (0.0, 0.0, 0.0002525, 0.0002525, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function5 = array (0.0, 0.0, -0.0002525, 0.0002525, 0.0, 0.0, 0.0, 0.0)
#MotorToJointAngles.function5 = array (0.0, 0.0, -0.0002197, 0.0002197, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function6 = array (0.0, 0.0, 0.0, 0.0, 0.00121, 0.00121, 0.0, 0.0)
MotorToJointAngles.function7 = array (0.0, 0.0, 0.0, 0.0, 0.00121, -0.00121, 0.0, 0.0)
MotorToJointAngles.function8 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00375)

### Convert radians to degrees
loadComponent("RadToDeg","MATH::Gain")
RadToDeg.vectorsize = 8
RadToDeg.gain = 57.295779513
RadToDeg.configure 

### Compute the errors of the joints wrt reference angles
loadComponent("ComputeJointErrors","Substraction")
ComputeJointErrors.vectorsize = 8
ComputeJointErrors.configure

### Decouple joint torques to motor torques ###
loadComponent("JointToMotorTorques","MatrixTransform")
JointToMotorTorques.Nrows = 8
JointToMotorTorques.Ncolumns = 8
JointToMotorTorques.configure
JointToMotorTorques.function1 = array (0.5, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
JointToMotorTorques.function2 = array (-0.5, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
JointToMotorTorques.function3 = array (0.0, 0.0, 0.0, 0.5, -0.5, 0.0, 0.0, 0.0)
JointToMotorTorques.function4 = array (0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
JointToMotorTorques.function5 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0)
JointToMotorTorques.function6 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.5, -0.5, 0.0)
JointToMotorTorques.function7 = array (0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)
JointToMotorTorques.function8 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)

### PERA Controllers ###
loadComponent("JointControllers","PERACONTROLLERS")
JointControllers.q1Controller = array (35.0, 3.0, 0.05, 10.0)
JointControllers.q2Controller = array (35.0, 3.0, 0.05, 10.0)
JointControllers.q3Controller = array (20.0, 2.0, 0.0, 5.0)
JointControllers.q4Controller = array (20.0, 2.0, 0.08, 4.0)
JointControllers.q5Controller = array (20.0, 2.0, 0.08, 4.0)
JointControllers.q6Controller = array (30.0, 3.0, 0.03, 5.0)
JointControllers.q7Controller = array (30.0, 3.0, 0.03, 5.0)
JointControllers.q8Controller = array (4.0, 2.0, 0.008, 16.0)
JointControllers.sampletime = 0.004
JointControllers.kfcFeedForward = array (3000.0, 3000.0, 0.0, 3000.0, 0.0, 0.0, 0.0, 10000.0)
JointControllers.gravCompTorqueFactors = array (1500.0, 1000.0, 0.0, 5000.0, 0.0, 0.0, 0.0, 0.0)
JointControllers.configure

### Convert radians to degrees
loadComponent("DegToRad","MATH::Gain")
DegToRad.vectorsize = 8
DegToRad.gain = 0.0174532925
DegToRad.configure 

### Write the current joint angles ###
loadComponent("WriteCurrentJointAngles","PERA::WriteArmJointsMsg")
WriteCurrentJointAngles.offsets = array ( 0.0, 1.570796325, 0.0, 0.0, 0.0, 1.570796325, 0.0, 0.0 )
WriteCurrentJointAngles.signs = array ( 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 )
WriteCurrentJointAngles.configure

stream("ReadReferenceAngles.joint_coordinates",communication_right.joint_coordinates_right)
connect ("ReadReferenceAngles.pos","ReferenceInterpolator.posin", ConnPolicy() )
connect ("ReferenceInterpolator.posout","RadToDeg.in", ConnPolicy() )
connect ("RadToDeg.out","ComputeJointErrors.in_plus", ConnPolicy() )
connect ("MotorToJointAngles.out","ComputeJointErrors.in_minus", ConnPolicy() )
connect ("MotorToJointAngles.out","DegToRad.in", ConnPolicy() )
connect ("DegToRad.out","WriteCurrentJointAngles.pos", ConnPolicy() )
connect ("PERA_IO.relEnc","MotorToJointAngles.in", ConnPolicy() )
connect ("JointToMotorTorques.out","PERA_IO.cmdTorqueIn", ConnPolicy() )
connect ("ComputeJointErrors.out","JointControllers.in", ConnPolicy() )
connect ("JointControllers.out","JointToMotorTorques.in", ConnPolicy() )
stream("WriteCurrentJointAngles.joint_coordinates",communication_right.arm_angles_right)

ReadReferenceAngles.start
ReferenceInterpolator.start
MotorToJointAngles.start
RadToDeg.start
ComputeJointErrors.start
JointToMotorTorques.start
JointControllers.start
DegToRad.start
WriteCurrentJointAngles.start

