########################################################################
#                                                                      #
# Right Philips Experimental Robotic Arm deployer file.                #
#                                                                      #
# Bas Willems Edited by Max Baeten for EtherCAT                        #
# September 2011                                                       #
#                                                                      #
# Uses the DeploymentComponent available within the OCL for deploying  #
# and connecting components.                                           #
#                                                                      #
########################################################################

### Import amigo_pera_controller package ###
import("amigo_pera_controller")
trigger

## Declare standard variables that are used multiple times
var double Ts = 0.001
var array SIGNS = array (  1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 )
var array OFFSETS = array ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 )
## ENC2SI parameters
var double TWOPI 				= 2.0*3.141592
var double GEARRATIO_SM			= 16.0/529.0
var double GEARRATIO_S3		    = 245.0/16224.0
var double GEARRATIO_EM			= 16.0/529.0
var double GEARRATIO_WM			= 25.0/729.0   
var double GEARRATIO_HM 		= 196.0/3249.0
var double ENCODERCOUNTS_SM		= 256.0*4.0
var double ENCODERCOUNTS_S3	    = 256.0*4.0
var double ENCODERCOUNTS_EM		= 500.0*4.0 
var double ENCODERCOUNTS_WM		= 500.0*4.0   
var double ENCODERCOUNTS_HM		= 128.0*4.0 
var double ENC2SI_SM			= 2.0*0.00000563 ;          #TWOPI*GEARRATIO_SM/ENCODERCOUNTS_SM; 	To Do find out remaining gear ratio's 		:16.4818
var double ENC2SI_S3			= 0.00001653 ;              #TWOPI*GEARRATIO_S3/ENCODERCOUNTS_S3;	from matlab determined to 					:5.6055	
var double ENC2SI_EM			= 2.0*0.000003835;      	#TWOPI*GEARRATIO_EM/ENCODERCOUNTS_EM;		 										:12.3885
var double ENC2SI_WM			= 2.0*0.00002116;           #TWOPI*GEARRATIO_WM/ENCODERCOUNTS_WM; 												:2.5458
var double ENC2SI_HM 			= 0.0005236;                #TWOPI*GEARRATIO_HM/ENCODERCOUNTS_HM;	

### Read reference joint angles ###
loadComponent("RPERA_ReadReferenceAngles","PERA::ReadArmJointsMsg")
setActivity("RPERA_ReadReferenceAngles",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_ReadReferenceAngles.offsets = OFFSETS
RPERA_ReadReferenceAngles.signs = SIGNS
RPERA_ReadReferenceAngles.configure

### Vector concatenate ###
loadComponent("RPERA_VectorConcatenate","PERA::Concatenate")
setActivity("RPERA_VectorConcatenate",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_VectorConcatenate.configure

### Interpolator (DO NOT INCREASE VALUES !!!) ###
loadComponent("RPERA_ReferenceInterpolator","ReferenceGenerator")
setActivity("RPERA_ReferenceInterpolator",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_ReferenceInterpolator.setPeriod(0.001)
RPERA_ReferenceInterpolator.NrInterpolators = 8
RPERA_ReferenceInterpolator.InterpolatorDt = 0.001
RPERA_ReferenceInterpolator.InterpolatorEps = 1.0
RPERA_ReferenceInterpolator.configure
RPERA_ReferenceInterpolator.interpolator1 = array (0.0, 0.4, 0.2)
RPERA_ReferenceInterpolator.interpolator2 = array (0.0, 0.4, 0.2)
RPERA_ReferenceInterpolator.interpolator3 = array (0.0, 0.6, 0.3)
RPERA_ReferenceInterpolator.interpolator4 = array (0.0, 0.8, 0.5)
RPERA_ReferenceInterpolator.interpolator5 = array (0.0, 0.8, 0.5)
RPERA_ReferenceInterpolator.interpolator6 = array (0.0, 1.0, 0.5)
RPERA_ReferenceInterpolator.interpolator7 = array (0.0, 1.0, 0.5)
RPERA_ReferenceInterpolator.interpolator8 = array (0.0, 10.0, 100.0)

### Output limiter ###
# Publish clipped outputs
loadComponent("RPERA_JointOutputLimiter","DISCONTINUITIES::Saturation")
setActivity("RPERA_JointOutputLimiter",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_JointOutputLimiter.upper_limit = array (   0.0,  1.57,  1.57, 2.23,  1.83,  0.95,  0.61,  40.0 )
RPERA_JointOutputLimiter.lower_limit = array (  -1.57, -1.57, -1.57,  0.0, -1.83, -0.95, -0.61, -40.0 )
RPERA_JointOutputLimiter.vector_size = 8
RPERA_JointOutputLimiter.configure

### Publishing joint angles on ROS-topic ###
loadComponent("RPERA_WriteClippedJointAngles","PERA::WriteArmJointsMsg")
setActivity("RPERA_WriteClippedJointAngles",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_WriteClippedJointAngles.offsets = OFFSETS
RPERA_WriteClippedJointAngles.signs = SIGNS
RPERA_WriteClippedJointAngles.configure

### PERA Supervisor ###
loadComponent("RPERA_Supervisor","PERA::SupervisorE")
setActivity("RPERA_Supervisor",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_Supervisor.setPeriod(0.001)
RPERA_Supervisor.jointLowerBounds = array (  0.0, -1.57, -1.57,  0.0, -1.83, -0.95, -0.61 )
RPERA_Supervisor.jointUpperBounds = array ( 1.57,  1.57,  1.57, 2.23,  1.83,  0.95,  0.61 )
RPERA_Supervisor.motorSaturations = array ( 25000.0, 25000.0, 20000.0, 20000.0, 15000.0, 15000.0, 25000.0, 32000.0 )
RPERA_Supervisor.maxJointErrors = array ( 0.0873, 0.0873, 0.0873, 0.0873, 0.0873, 0.0873, 0.1873, 120.0)
RPERA_Supervisor.maxAccelerations = array ( 0.2, 0.2, 0.3, 0.5, 0.5, 0.5, 0.5 )
RPERA_Supervisor.dynBreakEpsilon = 0.05;
# Note that these angles are published on a ROS-topic and will therefore be corrected with the offsets and signs as defined at the ReadReferenceAngles components
#RPERA_Supervisor.resetAngles = array ( 0.0, -1.570796325, 0.0, 0.5, 0.0, -1.570796325, 0.0, 0.0 )
RPERA_Supervisor.offsetAngles = OFFSETS
RPERA_Supervisor.signs = SIGNS
RPERA_Supervisor.absOrRel = array (0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)
RPERA_Supervisor.homedPos = array (685.0, 332.0, 1.5708, 0.0, 1.8326, 0.985, 0.7854)
RPERA_Supervisor.maxConSatTime = 5.0
RPERA_Supervisor.stepSize = 0.3 ;# stepsize per second, divided by Ts to get stepsize per updatecycle
RPERA_Supervisor.absSenDir = array (1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0)
RPERA_Supervisor.enableOutput = true
RPERA_Supervisor.requireHoming = true
RPERA_Supervisor.requireGripperHoming = true
RPERA_Supervisor.startJoint = 6
RPERA_Supervisor.configure

### LOAD READENCODERS
loadComponent("RPERA_ReadEncoders","SOEM::ReadEncoders")
setActivity("RPERA_ReadEncoders",Ts,HighestPriority,ORO_SCHED_RT)
RPERA_ReadEncoders.encoderbits = 65536
RPERA_ReadEncoders.enc2SI = array (ENC2SI_SM ,ENC2SI_SM , ENC2SI_S3 , ENC2SI_EM , ENC2SI_EM , ENC2SI_WM , ENC2SI_WM , ENC2SI_HM )
RPERA_ReadEncoders.configure

### Velocity and acceleration estimator ###
loadComponent("RPERA_RTD","AMIGO::RealTimeDerivator")
setActivity("RPERA_RTD",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_RTD.setPeriod(0.001)
RPERA_RTD.vector_size=8
RPERA_RTD.bw = 10.0
RPERA_RTD.configure

### Gripper force controller ###
loadComponent("RPERA_GripperControl","PERA::GripperControlE")
setActivity("RPERA_GripperControl",0.0,HighestPriority,ORO_SCHED_RT)
#RPERA_GripperControl.threshold_closed = 5.0
RPERA_GripperControl.threshold_closed = 7.5
RPERA_GripperControl.setPeriod(0.001)
RPERA_GripperControl.max_pos = 28
RPERA_GripperControl.gripper_gain = 2.4
RPERA_GripperControl.configure

### Gravity Compensation ###
loadComponent("RPERA_GravityCompensation","PERA::GravityCompensation")
setActivity("RPERA_GravityCompensation",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_GravityCompensation.configure

### Gearing and torque constants ###
loadComponent("RPERA_GC_Gains","MATH::Gains")
setActivity("RPERA_GC_Gains",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_GC_Gains.vectorsize = 8
#RPERA_GC_Gains.gain = array (0.337952010814464E2, -0.337952010814464E2, -1.040001040001040E2, -1.238604835513278E2, 1.238604835513278E2, -1.626545217957059E2, -1.626545217957059E2, 0.0)
RPERA_GC_Gains.gain = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
RPERA_GC_Gains.configure

### Amplifier polynomials ###
loadComponent("RPERA_Polynomials","MATH::Polynomials")
setActivity("RPERA_Polynomials",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_Polynomials.vector_size = 8
RPERA_Polynomials.configure
RPERA_Polynomials.polynomial1= array (0.0, 56.973979683065004, -0.060356311372147, 0.000039192263845, -0.000000009835513)
RPERA_Polynomials.polynomial2= array (0.0, 56.973979683065004, -0.060356311372147, 0.000039192263845, -0.000000009835513)
RPERA_Polynomials.polynomial3= array (0.0, 49.748426243650833, -0.040065286680613, 0.000017587331607, -0.000000002605682)
RPERA_Polynomials.polynomial4= array (0.0, 44.604486108032354, -0.042237259213218, 0.000022759847059, -0.000000004411251)
RPERA_Polynomials.polynomial5= array (0.0, 44.604486108032354, -0.042237259213218, 0.000022759847059, -0.000000004411251)
RPERA_Polynomials.polynomial6= array (0.0, 52.253658384600797, 0.161846062082499, -0.000384960667380, 0.000000239542223)
RPERA_Polynomials.polynomial7= array (0.0, 52.253658384600797, 0.161846062082499, -0.000384960667380, 0.000000239542223)
RPERA_Polynomials.polynomial8= array (0.0)

### Adding the gravity compensational term ###
loadComponent("RPERA_AddGravComp","MATH::Addition")
setActivity("RPERA_AddGravComp",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_AddGravComp.vectorsize = 8
RPERA_AddGravComp.configure

### Motor to joint angles ###
loadComponent("RPERA_MotorToJointAngles","MatrixTransform")
setActivity("RPERA_MotorToJointAngles",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_MotorToJointAngles.Nrows = 8
RPERA_MotorToJointAngles.Ncolumns = 8
RPERA_MotorToJointAngles.configure
RPERA_MotorToJointAngles.function1 = array (  0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointAngles.function2 = array (  0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointAngles.function3 = array (  0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointAngles.function4 = array (  0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_MotorToJointAngles.function5 = array (  0.0,  0.0,  0.0, -0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_MotorToJointAngles.function6 = array (  0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
RPERA_MotorToJointAngles.function7 = array (  0.0,  0.0,  0.0,  0.0,  0.0,  0.5, -0.5,  0.0)
RPERA_MotorToJointAngles.function8 = array (  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### Compute tracking error ###
loadComponent("RPERA_ComputeJointErrors","MATH::Subtraction")
setActivity("RPERA_ComputeJointErrors",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_ComputeJointErrors.vectorsize = 8
RPERA_ComputeJointErrors.configure

### Joint to motor torques ###
loadComponent("RPERA_JointToMotorTorques","MatrixTransform")
setActivity("RPERA_JointToMotorTorques",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_JointToMotorTorques.Nrows = 8
RPERA_JointToMotorTorques.Ncolumns = 8
RPERA_JointToMotorTorques.configure
RPERA_JointToMotorTorques.function1 = array ( 0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_JointToMotorTorques.function2 = array (-0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_JointToMotorTorques.function3 = array ( 0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_JointToMotorTorques.function4 = array ( 0.0,  0.0,  0.0,  0.5, -0.5,  0.0,  0.0,  0.0)
RPERA_JointToMotorTorques.function5 = array ( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_JointToMotorTorques.function6 = array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
RPERA_JointToMotorTorques.function7 = array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5, -0.5,  0.0)
RPERA_JointToMotorTorques.function8 = array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### Kp ###
loadComponent("RPERA_Gain","MATH::Gains")
setActivity("RPERA_Gain",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_Gain.vectorsize = 8
RPERA_Gain.gain = array (2000.0, 2000.0, 1000.0, 1750.0, 1750.0, 1750.0, 2150.0, 30.0); 		#GRIPPER STILL NEEDS TUNING
RPERA_Gain.configure

### Lead Lag ###
loadComponent("RPERA_LeadLag","FILTERS::LeadLags")	
setActivity("RPERA_LeadLag",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_LeadLag.vector_size = 8
RPERA_LeadLag.sampling_time = 0.001
RPERA_LeadLag.zero_frequency = array (25.0, 25.0, 15.0, 100.0, 100.0,  5.0,  5.0,  4.5)
RPERA_LeadLag.pole_frequency = array (80.0, 80.0, 40.0, 200.0, 200.0, 40.0, 40.0, 45.0)
RPERA_LeadLag.configure

### 2nd Order Lowpass ###
loadComponent("RPERA_Lowpass","FILTERS::SecondOrderLowPasses")
setActivity("RPERA_Lowpass",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_Lowpass.vector_size = 8
RPERA_Lowpass.sampling_time = 0.001
RPERA_Lowpass.pole_frequency = array (125.0, 125.0, 125.0, 125.0, 62.5, 125.0, 125.0, 125.0)
RPERA_Lowpass.pole_damping = array (0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7)
RPERA_Lowpass.configure

### Weak Integrators ###
loadComponent("RPERA_WeakIntegrator1","FILTERS::WeakIntegrators")
setActivity("RPERA_WeakIntegrator1",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_WeakIntegrator1.zero_frequency = array(0.0065, 0.0065, 0.009, 0.004, 0.004, 0.02, 0.02, 0.00000000000000000000001); 
RPERA_WeakIntegrator1.vector_size = 8
RPERA_WeakIntegrator1.sampling_time = 0.001
RPERA_WeakIntegrator1.configure

### Publishing joint angles on ROS-topic ###
loadComponent("RPERA_WriteCurrentJointAngles","PERA::WriteArmJointsMsg")
setActivity("RPERA_WriteCurrentJointAngles",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_WriteCurrentJointAngles.offsets = OFFSETS
RPERA_WriteCurrentJointAngles.signs = SIGNS                         
RPERA_WriteCurrentJointAngles.configure

### Conversion analog PERA_IO values to torques ###
loadComponent("RPERA_SensorTorques","SensorTorquesE")
setActivity("RPERA_SensorTorques",0.0,HighestPriority,ORO_SCHED_RT)
#												SM1 		SM2			SM3 		EM1 			EM2 		WM1 		WM2 		HM
RPERA_SensorTorques.Ksensor = array 			(0.0025		, 0.0025	, 0.0025	, 0.0025		, 0.0025	, 0.0025	, 0.0025	, 0.0025)
RPERA_SensorTorques.Voffset = array 			(0.2		, 0.2		, 0.2		, 0.2			, 0.2		, 0.2		, 0.2		, 0.2		)
RPERA_SensorTorques.Xoffset = array 			(0.00025	, 0.00025	, 0.00025	, 0.0013875		, 0.0013875	, 0.0034488	, 0.0048276	, 0.00268	)
RPERA_SensorTorques.Stiffness = array 			(777777.7	, 777777.7	, 700.0		, 2009211.0		, 2009211.0	, 60739.73	, 37274.25	, 12935.0	)
RPERA_SensorTorques.PivotDistance = array 		(0.03		, 0.03		, 1.0		, 0.025			, 0.025		, 0.017		, 0.017		, 1.0		)
RPERA_SensorTorques.setPeriod(0.005)
RPERA_SensorTorques.configure

## old values :
#												SM1 		SM2 		EM1 		EM2				SM3 		HM			WM1 		WM2
#RPERA_SensorTorques.Xoffset = array 			(0.00025	, 0.00025	, 0.0013875	, 0.0013875		, 0.00025	, 0.00268	, 0.0034488	, 0.0048276)
#RPERA_SensorTorques.Stiffness = array 			(777777.7	, 777777.7	, 2009211.0	, 2009211.0		, 700.0		, 12935.0	, 60739.73	, 37274.25)
#RPERA_SensorTorques.PivotDistance = array 		(0.03		, 0.03		, 0.025		, 0.025			, 1.0		, 1.0		, 0.017		, 0.017)
#

#### Diagnostics ###
loadComponent("RPERA_Diagnostics","ROS::RosDiagnostics")
setActivity("RPERA_Diagnostics",0.0,HighestPriority,ORO_SCHED_RT)
stream("RPERA_Diagnostics.diagnostics", ros.topic("/diagnostics"));
RPERA_Diagnostics.setPeriod(1)
RPERA_Diagnostics.statusname = "RPERA"
RPERA_Diagnostics.NumberOfVectorPorts = 3
RPERA_Diagnostics.NumberOfBoolPorts = 2
RPERA_Diagnostics.configure
RPERA_Diagnostics.vecname1 = "Reference Interpolator"
connect ("RPERA_VectorConcatenate.out", "RPERA_Diagnostics.vec1", ConnPolicy() )
RPERA_Diagnostics.vecname2 = "Joint Errors"
connect ("RPERA_ComputeJointErrors.out", "RPERA_Diagnostics.vec2", ConnPolicy() )
RPERA_Diagnostics.vecname3 = "Reference Path Planning"
connect ("RPERA_ReadReferenceAngles.pos", "RPERA_Diagnostics.vec3", ConnPolicy() )
RPERA_Diagnostics.boolname1 = "Amplifiers"
connect ("RPERA_Supervisor.enablePort", "RPERA_Diagnostics.bool1", ConnPolicy() )
RPERA_Diagnostics.boolname2 = "ReadRef Enable"
connect ("RPERA_Supervisor.enableReadRefPort", "RPERA_Diagnostics.bool2", ConnPolicy() )

########################################################################
# Connecting all the ports and streams. Be carefull with making        #
# changes below as this can easily result in system failure and/or     #
# damage.                                                              #
########################################################################

### Setting up tracing ###

#var ConnPolicy tracingpolicy;	tracingpolicy.type = BUFFER; 	tracingpolicy.size = 65536;	tracingpolicy.lock_policy = LOCKED
#loadComponent("Tracing","Signal::Tracing")
#setActivity("Tracing",0.0,HighestPriority,ORO_SCHED_RT)
#Tracing.vector_sizes = array ( 8.0 )
#Tracing.buffersize = 65536;
#Tracing.filename = "/home/amigo/ArmTuning/q4_gain2000_noint.dat"
#Tracing.Ts = Ts
#Tracing.Crash_if_done = 1; #If 1 the controllers are terminated after gathering data
#Tracing.configure
#connect ("RPERA_VectorConcatenate.out","Tracing.in1", tracingpolicy ) ; 		# reference before reference generator
#connect ("RPERA_ReferenceInterpolator.posout","Tracing.in2", tracingpolicy );	# reference after reference generator
#connect ("RPERA_ComputeJointErrors.out","Tracing.in1", tracingpolicy ) ; 		# error
#connect ("RPERA_WeakIntegrator1.out","Tracing.in4", tracingpolicy ) ; 			# control effort
#connect ("RPERA_ReadEncoders.out","Tracing.in5", tracingpolicy ) ; 			# output

### Control loop ###
connect ("Soem.Slave_1011.encoderAngle0","RPERA_ReadEncoders.enc1_in" , ConnPolicy() ); 
connect ("Soem.Slave_1011.encoderAngle1","RPERA_ReadEncoders.enc2_in" , ConnPolicy() ); 
connect ("Soem.Slave_1012.encoderAngle0","RPERA_ReadEncoders.enc3_in" , ConnPolicy() ); 
connect ("Soem.Slave_1012.encoderAngle1","RPERA_ReadEncoders.enc4_in" , ConnPolicy() ); 
connect ("Soem.Slave_1012.encoderAngle2","RPERA_ReadEncoders.enc5_in" , ConnPolicy() ); 
connect ("Soem.Slave_1013.encoderAngle0","RPERA_ReadEncoders.enc6_in" , ConnPolicy() ); 
connect ("Soem.Slave_1013.encoderAngle1","RPERA_ReadEncoders.enc7_in" , ConnPolicy() );
connect ("Soem.Slave_1013.encoderAngle2","RPERA_ReadEncoders.enc8_in" , ConnPolicy() );
connect ("RPERA_ReadEncoders.out","RPERA_MotorToJointAngles.in" , ConnPolicy() ); 
connect ("RPERA_MotorToJointAngles.out","RPERA_WriteCurrentJointAngles.pos", ConnPolicy() )
connect ("RPERA_MotorToJointAngles.out","RPERA_ComputeJointErrors.in_minus", ConnPolicy() )
connect ("RPERA_ComputeJointErrors.out","RPERA_Gain.in", ConnPolicy() )
connect ("RPERA_Gain.out","RPERA_LeadLag.in", ConnPolicy() )
connect ("RPERA_LeadLag.out","RPERA_Lowpass.in", ConnPolicy() )
connect ("RPERA_Lowpass.out","RPERA_WeakIntegrator1.in", ConnPolicy() )
connect ("RPERA_WeakIntegrator1.out","RPERA_AddGravComp.in2_event", ConnPolicy() )
connect ("RPERA_AddGravComp.out","RPERA_JointToMotorTorques.in", ConnPolicy() )

connect ("RPERA_ReadReferenceAngles.pos","RPERA_VectorConcatenate.in1", ConnPolicy() )
connect ("RPERA_GripperControl.gripper_ref","RPERA_VectorConcatenate.in2", ConnPolicy() )
connect ("RPERA_VectorConcatenate.out","RPERA_ReferenceInterpolator.posin", ConnPolicy() )
connect ("RPERA_MotorToJointAngles.out","RPERA_JointOutputLimiter.in", ConnPolicy() )
connect ("RPERA_JointOutputLimiter.out","RPERA_WriteClippedJointAngles.pos", ConnPolicy() )
connect ("RPERA_ReferenceInterpolator.posout","RPERA_ComputeJointErrors.in_plus", ConnPolicy() )

### Gravity compensation part ###
connect ("RPERA_ReferenceInterpolator.posout","RPERA_GravityCompensation.in", ConnPolicy() )
connect ("RPERA_GravityCompensation.out","RPERA_GC_Gains.in", ConnPolicy() )
connect ("RPERA_GC_Gains.out","RPERA_Polynomials.in", ConnPolicy() )
connect ("RPERA_Polynomials.out","RPERA_AddGravComp.in1", ConnPolicy() )

### Supervisor ###
connect ("RPERA_JointToMotorTorques.out","RPERA_Supervisor.controllerOutputPort", ConnPolicy() )
connect ("RPERA_ReadReferenceAngles.pos","RPERA_Supervisor.requestedJointAnglesPort", ConnPolicy() )
connect ("RPERA_Supervisor.enablePort","Soem.Slave_1011.enablePort", ConnPolicy() )                                
connect ("RPERA_Supervisor.enablePort","Soem.Slave_1012.enablePort", ConnPolicy() )                                
connect ("RPERA_Supervisor.enablePort","Soem.Slave_1013.enablePort", ConnPolicy() )                                
connect ("RPERA_ComputeJointErrors.out","RPERA_Supervisor.errorPort", ConnPolicy() )
connect ("RPERA_MotorToJointAngles.out","RPERA_Supervisor.measRelJointAnglesPort", ConnPolicy() )
connect ("RPERA_Supervisor.resetInterpolatorPort","RPERA_ReferenceInterpolator.resetValues", ConnPolicy() )

connect ("RPERA_Supervisor.homJntAnglesPort","RPERA_VectorConcatenate.in1", ConnPolicy() )
connect ("RPERA_Supervisor.enableReadRefPort","RPERA_ReadReferenceAngles.enablePort", ConnPolicy() )
connect ("RPERA_Supervisor.reNullPort1","Soem.Slave_1011.reNullPort", ConnPolicy() )                     
connect ("RPERA_Supervisor.reNullPort2","Soem.Slave_1012.reNullPort", ConnPolicy() )                     
connect ("RPERA_Supervisor.reNullPort3","Soem.Slave_1013.reNullPort", ConnPolicy() )                     
#connect ("RPERA_Supervisor.reNullPort","RPERA_GripperControl.reNullPort", ConnPolicy() )
connect ("RPERA_RTD.ude","RPERA_Supervisor.jointVelocity", ConnPolicy() )
connect ("RPERA_MotorToJointAngles.out","RPERA_RTD.u", ConnPolicy() )

#stream("RPERA_Supervisor.eButtonPort", ros.topic("/emergency_switch"))
stream("RPERA_Supervisor.eButtonPort", ros.topic("/disable_amplifiers"))
stream("RPERA_Supervisor.resetRefPort", ros.topic("/arm_right_controller/joint_references"))
stream("RPERA_WriteCurrentJointAngles.joint_measurements", ros.topic("/arm_right_controller/joint_measurements_raw"))
stream("RPERA_WriteClippedJointAngles.joint_measurements", ros.topic("/arm_right_controller/joint_measurements"))
stream("RPERA_ReadReferenceAngles.joint_references", ros.topic("/arm_right_controller/joint_references"))
stream("RPERA_Supervisor.peraStatusPort", ros.topic("/arm_right_status"))
stream("RPERA_RTD.derivatives", ros.topic("/pera_rtd_data"))

## soem connections
connect ("RPERA_JointToMotorTorques.out","AnalogOutsPera.in_ev", ConnPolicy() )
connect ("AnalogInsPera.out_for","RPERA_SensorTorques.voltage_in", ConnPolicy() )
connect ("AnalogInsPera.out_pos","RPERA_Supervisor.measAbsJointAnglesPort", ConnPolicy() )

### Gripper control ###
connect ("RPERA_SensorTorques.measured_torques_out","RPERA_GripperControl.torque_in", ConnPolicy() )
connect ("RPERA_MotorToJointAngles.out", "RPERA_GripperControl.position_in", ConnPolicy() )
connect ("RPERA_GripperControl.gripper_measurement","RPERA_Supervisor.gripper_measurement", ConnPolicy() )
connect ("RPERA_Supervisor.gripper_command","RPERA_GripperControl.gripper_command", ConnPolicy() )
 
stream("RPERA_GripperControl.gripper_measurement", ros.topic("/arm_right_controller/gripper_measurement"))
stream("RPERA_GripperControl.gripper_command", ros.topic("/arm_right_controller/gripper_command"))

RPERA_Supervisor.start
RPERA_ReadReferenceAngles.start
RPERA_VectorConcatenate.start
RPERA_ReferenceInterpolator.start
RPERA_MotorToJointAngles.start
RPERA_ComputeJointErrors.start
RPERA_JointToMotorTorques.start
RPERA_JointOutputLimiter.start
RPERA_WriteCurrentJointAngles.start
RPERA_WriteClippedJointAngles.start
RPERA_RTD.start
RPERA_Gain.start
RPERA_LeadLag.start
RPERA_Lowpass.start
RPERA_WeakIntegrator1.start
RPERA_GravityCompensation.start
RPERA_GC_Gains.start
RPERA_Polynomials.start
RPERA_AddGravComp.start
RPERA_SensorTorques.start
RPERA_GripperControl.start
RPERA_Diagnostics.start
RPERA_ReadEncoders.start
#Tracing.start

