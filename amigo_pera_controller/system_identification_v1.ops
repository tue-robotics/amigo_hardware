import("philips_arm_controller_dev")
trigger
runScript ("communication_left.ops")
trigger
communication_left.start
trigger

### Joint trajectory generator ###
loadComponent("TrajectoryGenerator","TrajectoryGenerator")
TrajectoryGenerator.setPeriod(0.004)
TrajectoryGenerator.vector_size	= 8
TrajectoryGenerator.rampDelay	= 10.0
TrajectoryGenerator.frequency 	= array (0.5, 0.0, 0.0)
TrajectoryGenerator.phase 		= array (0.0, 0.0, 0.0)
TrajectoryGenerator.offset 		= array (0.0, 0.0, 0.0, 1.57, 0.0, 0.0, 0.0, 0.0)
TrajectoryGenerator.gain 		= array (0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0)
TrajectoryGenerator.configure

#### Joint trajectory generator ###
#loadComponent("TrajectoryGenerator","ChirpSignal")
#TrajectoryGenerator.setPeriod(0.004)
#TrajectoryGenerator.vector_size		= 8
#TrajectoryGenerator.rampDelay		= 1.0
#TrajectoryGenerator.sweep_interval	= array (10.0,    10.0,   10.0,   10.0,   10.0,   10.0,   10.0,   10.0)
#TrajectoryGenerator.frequency_min 	= array ( 0.01,    0.01,    0.01,    0.01,    0.01,    0.01,    0.01,    0.01)
#TrajectoryGenerator.frequency_max 	= array (0.3,    0.3,   0.25,   0.3,   0.3,   0.3,   0.2,   0.3)
#TrajectoryGenerator.phase 		= array (0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
#TrajectoryGenerator.offset 		= array (0.0,    -0.3,    0.0,    0.3,    0.0,    0.0,    0.0,    0.0)
#TrajectoryGenerator.gain 		= array (0.0,     0.0,    0.5,    0.0,    0.0,    0.0,    0.0,    0.0)
#TrajectoryGenerator.configure

### PERA USB IO ###
loadComponent("PERA_IO","PERA::PERA_USB_IO")
PERA_IO.setPeriod(0.004)
PERA_IO.configure
PERA_IO.absSenJumpPosProperty = array (1024.0, 732.0, 721.0, 1024.0, 706.0, 1024.0, 1024.0)
PERA_IO.afterAbsSenJumpProperty = array (0.0, 100.0, 250.0, 0.0, 100.0, 0.0, 0.0)

### Decouple motor angles to joint angles (includes encoder conversion factors --> DEGREES!!!) ###
loadComponent("MotorToJointAngles","MatrixTransform")
MotorToJointAngles.Nrows = 8
MotorToJointAngles.Ncolumns = 8
MotorToJointAngles.configure
MotorToJointAngles.function1 = array (0.00000563, -0.00000563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function2 = array (-0.00000563, -0.00000563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function3 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00001653, 0.0)
MotorToJointAngles.function4 = array (0.0, 0.0, 0.00000451, 0.00000451, 0.0, 0.0, 0.0, 0.0)
#MotorToJointAngles.function4 = array (0.0, 0.0, 0.0002525, 0.0002525, 0.0, 0.0, 0.0, 0.0)
#MotorToJointAngles.function5 = array (0.0, 0.0, -0.0002525, 0.0002525, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function5 = array (0.0, 0.0, -0.00000451, 0.00000451, 0.0, 0.0, 0.0, 0.0)
MotorToJointAngles.function6 = array (0.0, 0.0, 0.0, 0.0, 0.00002116, 0.00002116, 0.0, 0.0)
MotorToJointAngles.function7 = array (0.0, 0.0, 0.0, 0.0, 0.00002116, -0.00002116, 0.0, 0.0)
MotorToJointAngles.function8 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00006545)

### Compute the errors of the joints wrt reference angles
loadComponent("ComputeJointErrors","Substraction")
ComputeJointErrors.vectorsize = 8
ComputeJointErrors.configure

### PERA Controllers ###
loadComponent("JointControllers","FILTERS::PIDs")
JointControllers.proportional_coefficient = array (1000.0, 	1000.0, 200.0, 	700.0, 	350.0, 	550.0, 	550.0, 	80.0)
JointControllers.integral_coefficient = 	array (80.0, 	80.0, 	8.0, 	32.0, 	12.0, 	32.0, 	32.0, 	2.0)
JointControllers.derivative_coefficient = 	array (40.0, 	40.0, 	8.0, 	20.0, 	16.0, 	4.0, 	4.0, 	0.05)
JointControllers.anti_windup_coefficient = 	array (0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0)
JointControllers.integrator_initial_value = array (0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0)
JointControllers.limit = 					array (5000.0, 	5000.0, 5000.0, 5000.0, 5000.0, 5000.0, 5000.0, 5000.0)
JointControllers.sampling_time = 0.004
JointControllers.vector_size = 8
JointControllers.configure

### Actuator constant
loadComponent("ActuatorConstant","MATH::Gain")
ActuatorConstant.vectorsize = 8
ActuatorConstant.gain = 1000.0
ActuatorConstant.configure

### ADDNOISE ###
loadComponent("AddNoise","AddNoise")
AddNoise.noise_amplitudes = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
AddNoise.configure

### FEEDFORWARD (COULOMB FRICTION) ###
loadComponent("FeedForward","PERA::FEEDFORWARD")
FeedForward.kfcFeedForward = array ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
FeedForward.ffdirections = array ( 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)
FeedForward.configure

### ADD THE FEEDFORWARD ###
loadComponent("AddFeedForward","MATH::Addition")
AddFeedForward.vectorsize = 8
AddFeedForward.configure

### Decouple joint torques to motor torques ###
loadComponent("JointToMotorTorques","MatrixTransform")
JointToMotorTorques.Nrows = 8
JointToMotorTorques.Ncolumns = 8
JointToMotorTorques.configure
JointToMotorTorques.function1 = array (0.5, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
JointToMotorTorques.function2 = array (-0.5, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
JointToMotorTorques.function3 = array (0.0, 0.0, 0.0, 0.5, -0.5, 0.0, 0.0, 0.0)
JointToMotorTorques.function4 = array (0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
JointToMotorTorques.function5 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0)
JointToMotorTorques.function6 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.5, -0.5, 0.0)
JointToMotorTorques.function7 = array (0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)
JointToMotorTorques.function8 = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)

### Saturation on the controller output
loadComponent("OutputLimiter","DISCONTINUITIES::Saturation")
#OutputLimiter.upper_limit = array ( 0.0, 0.0, 0.0, 0.0, 20000.0, 20000.0, 0.0, 0.0 )
OutputLimiter.upper_limit  = array ( 25000.0, 25000.0, 20000.0, 20000.0, 15000.0, 15000.0, 25000.0, 0.0 )
#OutputLimiter.lower_limit = array ( -0.0,-0.0, -0.0, -0.0, -20000.0, -20000.0, -0.0, -0.0 )
OutputLimiter.lower_limit  = array ( -25000.0, -25000.0, -20000.0, -20000.0, -15000.0, -15000.0, -25000.0, 0.0 )
OutputLimiter.vector_size = 8
OutputLimiter.configure

### Get the real-time velocity and acceleration
loadComponent("PlotData","AMIGO::PlotData")
PlotData.selectJoint = 5
PlotData.selectMotor1 = 4
PlotData.selectMotor2 = 5
PlotData.setPeriod(0.02)
PlotData.configure

###Setting up reporting
loadComponent("Reporter", "OCL::FileReporting")
Reporter.setPeriod(0.004)
addPeer("Reporter","TrajectoryGenerator")
Reporter.reportPort("TrajectoryGenerator","pos")
addPeer("Reporter","ComputeJointErrors")
Reporter.reportPort("ComputeJointErrors","out")
addPeer("Reporter","OutputLimiter")
Reporter.reportPort("OutputLimiter","out")
addPeer("Reporter","ActuatorConstant")
Reporter.reportPort("ActuatorConstant","out")
addPeer("Reporter","MotorToJointAngles")
Reporter.reportPort("MotorToJointAngles","out")
addPeer("Reporter","AddNoise")
Reporter.reportPort("AddNoise","out")
addPeer("Reporter","PERA_IO")
Reporter.reportPort("PERA_IO","relEnc")
addPeer("Reporter","PERA_IO")
Reporter.reportPort("PERA_IO","absSen")
addPeer("Reporter","PERA_IO")
Reporter.reportPort("PERA_IO","forceSen")
Reporter.ReportFile = "/home/amigo/tuning_q6_5 .dat"
Reporter.configure

connect ("TrajectoryGenerator.pos","ComputeJointErrors.in_plus", ConnPolicy() )
connect ("TrajectoryGenerator.vel","FeedForward.velport", ConnPolicy() )
connect ("MotorToJointAngles.out","ComputeJointErrors.in_minus", ConnPolicy() )
connect ("ComputeJointErrors.out","JointControllers.in", ConnPolicy() )
connect ("JointControllers.out","ActuatorConstant.in", ConnPolicy() )
connect ("ActuatorConstant.out","AddNoise.in", ConnPolicy() )
connect ("AddNoise.out","AddFeedForward.in2_event", ConnPolicy() )
connect ("FeedForward.out","AddFeedForward.in1", ConnPolicy() )
connect ("AddFeedForward.out","JointToMotorTorques.in", ConnPolicy() )
connect ("JointToMotorTorques.out","OutputLimiter.in", ConnPolicy() )
connect ("OutputLimiter.out","PERA_IO.cmdTorqueIn", ConnPolicy() )
connect ("PERA_IO.relEnc","MotorToJointAngles.in", ConnPolicy() )
connect ("TrajectoryGenerator.enablePort","PERA_IO.enablePort", ConnPolicy() )

connect ("TrajectoryGenerator.pos",						"PlotData.port1",					ConnPolicy() )
connect ("MotorToJointAngles.out",						"PlotData.port2",					ConnPolicy() )
connect ("AddNoise.out",		                    	"PlotData.port3",					ConnPolicy() )
connect ("AddFeedForward.out",		                    "PlotData.port4",					ConnPolicy() )
connect ("ComputeJointErrors.out",		                "PlotData.port5",					ConnPolicy() )
connect ("PERA_IO.relEnc",		              			"PlotData.port6",					ConnPolicy() )
connect ("OutputLimiter.out",		                    "PlotData.port8",					ConnPolicy() )

#to plot refPos measPos measTor ctrl for selected joint
#rxplot /jointDataLeft/data[0],/jointDataLeft/data[1] /jointDataLeft/data[4] /jointDataLeft/data[2] /jointDataLeft/data[8],/jointDataLeft/data[9] /jointDataLeft/data[6],/jointDataLeft/data[7]
stream  ("PlotData.dataPort", 	communication_left.jointDataLeft)

TrajectoryGenerator.start
Reporter.start
MotorToJointAngles.start
ComputeJointErrors.start
JointControllers.start
ActuatorConstant.start
AddNoise.start
FeedForward.start
JointToMotorTorques.start
OutputLimiter.start
PlotData.start
AddFeedForward.start
PERA_IO.start
