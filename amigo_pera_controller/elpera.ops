########################################################################
#                                                                      #
# Left Philips Experimental Robotic Arm deployer file.                 #
#                                                                      #
# Bas Willems Edited by Max Baeten for EtherCAT                        #
# September 2011                                                       #
#                                                                      #
# Uses the DeploymentComponent available within the OCL for deploying  #
# and connecting components.                                           #
#                                                                      #
########################################################################

### Import amigo_pera_controller package ###
import("amigo_pera_controller")
trigger

## Declare standard variables that are used multiple times
var double Ts = 0.001
var strings JOINT_NAMES = strings( "shoulder_yaw_joint_left", "shoulder_pitch_joint_left", "shoulder_roll_joint_left", "elbow_pitch_joint_left", "elbow_roll_joint_left", "wrist_pitch_joint_left", "wrist_yaw_joint_left" )
var array UPPERJOINTLIMIT 		= array (  0.0,  1.57,  1.57, 2.23,  1.83,  0.95,  0.61,  4.0)
var array LOWERJOINTLIMIT 		= array (-1.57, -1.57, -1.57,  0.0, -1.83, -0.95, -0.61, -4.0)
var double TWOPI 				= 2.0*3.141592
var double GEARRATIO_SM			= 1.0/550.0
var double GEARRATIO_S3		    = 1.0/371.25
var double GEARRATIO_EM			= 1.0/410.0 ;# value (348.0) from philips manual does not make sense
var double GEARRATIO_WM			= 1.0/290.0
var double GEARRATIO_HM			= 196.0/3249.0
var double ENCODERCOUNTS_SM		= 256.0*4.0
var double ENCODERCOUNTS_S3	    = 256.0*4.0
var double ENCODERCOUNTS_EM		= 500.0*4.0 
var double ENCODERCOUNTS_WM		= 128.0*4.0
var double ENCODERCOUNTS_HM		= 128.0*4.0
var double ENC2SI_SM			= TWOPI*GEARRATIO_SM/ENCODERCOUNTS_SM; 	
var double ENC2SI_S3			= TWOPI*GEARRATIO_S3/ENCODERCOUNTS_S3; 	
var double ENC2SI_EM			= TWOPI*GEARRATIO_EM/ENCODERCOUNTS_EM; 		 									
var double ENC2SI_WM			= TWOPI*GEARRATIO_WM/ENCODERCOUNTS_WM; 		
var double ENC2SI_HM 			= TWOPI*GEARRATIO_WM/ENCODERCOUNTS_WM;

### Read reference joint angles ###
#loadComponent("LPERA_ReadReferences","PERA::ReadArmJointsMsg")
loadComponent("LPERA_ReadReferences","ROS::JointStateToDoubles")
addPeer("Supervisor","LPERA_ReadReferences")
setActivity("LPERA_ReadReferences",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_ReadReferences.NumberOfJoints = 7
LPERA_ReadReferences.configure

### Vector concatenate ###
loadComponent("LPERA_VectorConcatenate","PERA::Concatenate")
addPeer("Supervisor","LPERA_VectorConcatenate")
setActivity("LPERA_VectorConcatenate",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_VectorConcatenate.configure

### Interpolator (DO NOT INCREASE VALUES !!!) ###
loadComponent("LPERA_ReferenceInterpolator","ReferenceGenerator")
addPeer("Supervisor","LPERA_ReferenceInterpolator")
setActivity("LPERA_ReferenceInterpolator",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_ReferenceInterpolator.setPeriod(Ts)
LPERA_ReferenceInterpolator.NrInterpolators = 8
LPERA_ReferenceInterpolator.InterpolatorDt = Ts
LPERA_ReferenceInterpolator.InterpolatorEps = 1.0
LPERA_ReferenceInterpolator.configure
LPERA_ReferenceInterpolator.interpolator1 = array (0.0, 0.4, 0.2)
LPERA_ReferenceInterpolator.interpolator2 = array (0.0, 0.4, 0.2)
LPERA_ReferenceInterpolator.interpolator3 = array (0.0, 0.6, 0.3)
LPERA_ReferenceInterpolator.interpolator4 = array (0.0, 0.8, 0.5)
LPERA_ReferenceInterpolator.interpolator5 = array (0.0, 0.8, 0.5)
LPERA_ReferenceInterpolator.interpolator6 = array (0.0, 1.0, 0.5)
LPERA_ReferenceInterpolator.interpolator7 = array (0.0, 1.0, 0.5)
LPERA_ReferenceInterpolator.interpolator8 = array (0.0, 1.0, 10.0)

### Output limiter ###
loadComponent("LPERA_JointOutputLimiter","DISCONTINUITIES::Saturation")
addPeer("Supervisor","LPERA_JointOutputLimiter")
setActivity("LPERA_JointOutputLimiter",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_JointOutputLimiter.upper_limit = UPPERJOINTLIMIT
LPERA_JointOutputLimiter.lower_limit = LOWERJOINTLIMIT
LPERA_JointOutputLimiter.vector_size = 8
LPERA_JointOutputLimiter.configure

### Publishing joint angles on ROS-topic ###
#loadComponent("LPERA_WriteClippedJointAngles","PERA::WriteArmJointsMsg")
loadComponent("LPERA_WriteClippedJointAngles","ROS::DoublesToJointState")
addPeer("Supervisor","LPERA_WriteClippedJointAngles")
setActivity("LPERA_WriteClippedJointAngles",0.05,HighestPriority,ORO_SCHED_RT)
LPERA_WriteClippedJointAngles.JointNames = JOINT_NAMES
LPERA_WriteClippedJointAngles.configure

### PERA Supervisor ###
loadComponent("LPERA_Supervisor","PERA::Supervisor")
addPeer("Supervisor","LPERA_Supervisor")
setActivity("LPERA_Supervisor",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_Supervisor.setPeriod(Ts)
LPERA_Supervisor.jointUpperBounds 		= UPPERJOINTLIMIT
LPERA_Supervisor.jointLowerBounds 		= LOWERJOINTLIMIT
LPERA_Supervisor.motorSaturations 		= array ( 100.0, 	100.0,     10.0, 	 40.0, 	   50.0,  	50.0, 	   25.0, 	25.0, 	100.0) 
LPERA_Supervisor.maxJointErrors 		= array (   0.09,    0.09,     0.09,     0.09, 	   0.09,    0.09, 	   0.19, 	20.0)
LPERA_Supervisor.absOrRel 				= array ( 	0.0, 	  0.0, 		1.0, 	  1.0, 	 	1.0, 	 1.0, 	 	1.0, 	 1.0)
LPERA_Supervisor.homedPos 				= array ( 990.0,   559.0,   1.5708,      0.0, 	 1.8326,   0.985, 	 0.7854)
LPERA_Supervisor.maxConSatTime 			= 3.0
LPERA_Supervisor.stepSize 				= 0.5
LPERA_Supervisor.absSenDir 				= array (1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0)
LPERA_Supervisor.enableOutput 			= true
LPERA_Supervisor.requireHoming 			= false
LPERA_Supervisor.requireGripperHoming 	= false
LPERA_Supervisor.startJoint 			= 6
LPERA_Supervisor.configure

### LOAD READENCODERS
loadComponent("LPERA_ReadEncoders","SOEM::ReadEncoders")
addPeer("Supervisor","LPERA_ReadEncoders")
setActivity("LPERA_ReadEncoders",Ts,HighestPriority,ORO_SCHED_RT)
LPERA_ReadEncoders.encoderbits = 65536
LPERA_ReadEncoders.enc2SI = array (ENC2SI_SM ,ENC2SI_SM ,0.0 , ENC2SI_S3 , ENC2SI_EM , ENC2SI_EM , ENC2SI_WM , ENC2SI_WM , ENC2SI_HM )
LPERA_ReadEncoders.configure

#Loading Homing component
#loadComponent("LPERA_Homing","Homing")
#connectPeers("Supervisor","LPERA_Homing")
#connectPeers("LPERA_Homing","Supervisor")
#connectPeers("LPERA_Homing","LPERA_ReadEncoders")
#addPeer("LPERA_Homing","LPERA_ReferenceInterpolator")
#addPeer("LPERA_Homing","LPERA_ReadReferences")
#addPeer("LPERA_Homing","LPERA_ReadEncoders")
#LPERA_Homing.homing_body   		= "LPERA" 														;# name of the body that is stopped/started during homing procedure
#LPERA_Homing.require_homing   	= true		 													;# require homing
#LPERA_Homing.homing_type		= array (1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0)			;# 0 = abs sen homing 1 = servo error homing  2 = Force sen homing  3 = endSwitch homing
#LPERA_Homing.homing_order		= array (6.0,  7.0,  5.0,  4.0,  3.0,  3.0,  3.0,  3.0)			;# Order in which the joints are homed providing (2.0 3.0 1.0) will home joint two, then joint three and at last joint one
#LPERA_Homing.homing_refPos		= array (5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0)   		;# Pos Reference for the homing joint
#LPERA_Homing.homing_refVel		= array (0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01)  		;# Vel Reference for the homing joint
#LPERA_Homing.homing_stroke		= array (1.57, 1.57, 1.57, 1.57, 1.57, 1.57, 1.57, 1.57)		;# Stroke from zero point to homing point (encoders are resetted using this value)
#LPERA_Homing.homing_midpos		= array (0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)  	 	;# position that the body should have during homing. To avoid collisions with other bodies/ itself
#LPERA_Homing.homing_endpos		= array (0.1, -0.2,  0.3,  0.8,  0.0,  0.0,  0.0,  0.0)			;# position that the body should go to after homing is finished. (could be same as midpos)
#LPERA_Homing.homing_error		= array (0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.0)
#LPERA_Homing.configure

### Velocity and acceleration estimator ###
loadComponent("LPERA_RTD","AMIGO::RealTimeDerivator")
addPeer("Supervisor","LPERA_RTD")
setActivity("LPERA_RTD",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_RTD.setPeriod(Ts)
LPERA_RTD.vector_size=8
LPERA_RTD.bw = 10.0
LPERA_RTD.configure

### Gripper force controller ###
loadComponent("LPERA_GripperControl","PERA::GripperControl")
addPeer("Supervisor","LPERA_GripperControl")
setActivity("LPERA_GripperControl",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_GripperControl.threshold_closed = 8.0
LPERA_GripperControl.setPeriod(Ts)
LPERA_GripperControl.max_pos = 4.0
LPERA_GripperControl.gripper_gain = 0.15
LPERA_GripperControl.configure

### Gravity Compensation ###
loadComponent("LPERA_GravityCompensation","PERA::GravityCompensation")
addPeer("Supervisor","LPERA_GravityCompensation")
setActivity("LPERA_GravityCompensation",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_GravityCompensation.configure

### Gearing and torque constants ###
loadComponent("LPERA_GC_Gains","MATH::Gains")
addPeer("Supervisor","LPERA_GC_Gains")
setActivity("LPERA_GC_Gains",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_GC_Gains.vectorsize = 8
#LPERA_GC_Gains.gain = array (0.337952010814464E2, 0.337952010814464E2, -1.040001040001040E2, -1.238604835513278E2, 1.238604835513278E2, -1.626545217957059E2, -1.626545217957059E2, 0.0)
LPERA_GC_Gains.gain = array (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
LPERA_GC_Gains.configure

### Amplifier polynomials ###
loadComponent("LPERA_Polynomials","MATH::Polynomials")
addPeer("Supervisor","LPERA_Polynomials")
setActivity("LPERA_Polynomials",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_Polynomials.vector_size = 8
LPERA_Polynomials.configure
LPERA_Polynomials.polynomial1= array (0.0, 56.973979683065004, -0.060356311372147, 0.000039192263845, -0.000000009835513)
LPERA_Polynomials.polynomial2= array (0.0, 56.973979683065004, -0.060356311372147, 0.000039192263845, -0.000000009835513)
LPERA_Polynomials.polynomial3= array (0.0, 49.748426243650833, -0.040065286680613, 0.000017587331607, -0.000000002605682)
LPERA_Polynomials.polynomial4= array (0.0, 44.604486108032354, -0.042237259213218, 0.000022759847059, -0.000000004411251)
LPERA_Polynomials.polynomial5= array (0.0, 44.604486108032354, -0.042237259213218, 0.000022759847059, -0.000000004411251)
LPERA_Polynomials.polynomial6= array (0.0, 52.253658384600797, 0.161846062082499, -0.000384960667380, 0.000000239542223)
LPERA_Polynomials.polynomial7= array (0.0, 52.253658384600797, 0.161846062082499, -0.000384960667380, 0.000000239542223)
LPERA_Polynomials.polynomial8= array (0.0)

### Adding the gravity compensational term ###
loadComponent("LPERA_AddGravComp","MATH::Addition")
addPeer("Supervisor","LPERA_AddGravComp")
setActivity("LPERA_AddGravComp",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_AddGravComp.vectorsize = 8
LPERA_AddGravComp.configure

### Motor to joint angles ###
loadComponent("LPERA_MotorToJointAngles","MatrixTransform")
addPeer("Supervisor","LPERA_MotorToJointAngles")
setActivity("LPERA_MotorToJointAngles",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_MotorToJointAngles.Nrows = 8
LPERA_MotorToJointAngles.Ncolumns = 9
LPERA_MotorToJointAngles.configure
LPERA_MotorToJointAngles.function1 = array  ( 0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_MotorToJointAngles.function2 = array  (-0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_MotorToJointAngles.function3 = array  ( 0.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_MotorToJointAngles.function4 = array  ( 0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
LPERA_MotorToJointAngles.function5 = array  ( 0.0,  0.0,  0.0,  0.0, -0.5,  0.5,  0.0,  0.0,  0.0)
LPERA_MotorToJointAngles.function6 = array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
LPERA_MotorToJointAngles.function7 = array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,  0.5,  0.0)
LPERA_MotorToJointAngles.function8 = array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### Compute tracking error ###
loadComponent("LPERA_ComputeJointErrors","MATH::Subtraction")
addPeer("Supervisor","LPERA_ComputeJointErrors")
setActivity("LPERA_ComputeJointErrors",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_ComputeJointErrors.vectorsize = 8
LPERA_ComputeJointErrors.configure

### Joint to motor torques ###
loadComponent("LPERA_JointToMotorTorques","MatrixTransform")
addPeer("Supervisor","LPERA_JointToMotorTorques")
setActivity("LPERA_JointToMotorTorques",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_JointToMotorTorques.Nrows = 9
LPERA_JointToMotorTorques.Ncolumns = 8
LPERA_JointToMotorTorques.configure
LPERA_JointToMotorTorques.function1 = array ( 0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_JointToMotorTorques.function2 = array (-0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_JointToMotorTorques.function3 = array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_JointToMotorTorques.function4 = array ( 0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_JointToMotorTorques.function5 = array ( 0.0,  0.0,  0.0,  0.5, -0.5,  0.0,  0.0,  0.0)
LPERA_JointToMotorTorques.function6 = array ( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
LPERA_JointToMotorTorques.function7 = array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5, -0.5,  0.0)
LPERA_JointToMotorTorques.function8 = array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
LPERA_JointToMotorTorques.function9 = array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### Kp ###
loadComponent("LPERA_Gain","MATH::Gains")
addPeer("Supervisor","LPERA_Gain")
setActivity("LPERA_Gain",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_Gain.vectorsize = 8
LPERA_Gain.gain = array (2000.0, 2000.0, 1000.0, 1750.0, 1750.0, 1750.0, 2150.0, 0.0); #GRIPPER SET TO ZERO
LPERA_Gain.configure

### Lead Lag ###
loadComponent("LPERA_LeadLag","FILTERS::LeadLags")
addPeer("Supervisor","LPERA_LeadLag")
setActivity("LPERA_LeadLag",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_LeadLag.vector_size = 8
LPERA_LeadLag.sampling_time = Ts
#LPERA_LeadLag.zero_frequency = array (3.0, 3.0, 3.0, 3.0, 4.5, 4.5, 4.0, 1.5)
#LPERA_LeadLag.pole_frequency = array (80.0, 80.0, 50.0, 100.0, 100.0, 45.0, 40.0, 30.0)
LPERA_LeadLag.zero_frequency = array (25.0, 25.0, 15.0, 100.0, 100.0,  5.0,  5.0,  4.5)
LPERA_LeadLag.pole_frequency = array (80.0, 80.0, 40.0, 200.0, 200.0, 40.0, 40.0, 45.0)
LPERA_LeadLag.configure

### 2nd Order Lowpass ###
loadComponent("LPERA_Lowpass","FILTERS::SecondOrderLowPasses")
addPeer("Supervisor","LPERA_Lowpass")
setActivity("LPERA_Lowpass",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_Lowpass.vector_size = 8
LPERA_Lowpass.sampling_time = Ts
LPERA_Lowpass.pole_frequency = array (125.0, 125.0, 125.0, 125.0, 62.5, 125.0, 125.0, 125.0)
LPERA_Lowpass.pole_damping = array (0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7)
LPERA_Lowpass.configure

### Weak Integrators ###
loadComponent("LPERA_WeakIntegrator1","FILTERS::WeakIntegrators")
addPeer("Supervisor","LPERA_WeakIntegrator1")
setActivity("LPERA_WeakIntegrator1",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_WeakIntegrator1.zero_frequency = array(0.0065, 0.0065, 0.009, 0.004, 0.004, 0.02, 0.02, 0.000001);
LPERA_WeakIntegrator1.vector_size = 8
LPERA_WeakIntegrator1.sampling_time = Ts
LPERA_WeakIntegrator1.configure

### Publishing joint angles on ROS-topic ###
#loadComponent("LPERA_WriteCurrentJointAngles","PERA::WriteArmJointsMsg")
loadComponent("LPERA_WriteCurrentJointAngles","ROS::DoublesToJointState")
addPeer("Supervisor","LPERA_WriteCurrentJointAngles")
setActivity("LPERA_WriteCurrentJointAngles",0.05,HighestPriority,ORO_SCHED_RT)
LPERA_WriteCurrentJointAngles.JointNames = JOINT_NAMES
LPERA_WriteCurrentJointAngles.configure

### Conversion analog PERA_IO values to torques ###
loadComponent("LPERA_SensorTorques","SensorTorques")
addPeer("Supervisor","LPERA_SensorTorques")
setActivity("LPERA_SensorTorques",0.0,HighestPriority,ORO_SCHED_RT)
#											SM1 		SM2			obsolete	SM3 		EM1 		EM2 		WM1 		WM2 		HM  
LPERA_SensorTorques.Ksensor 		= array (0.0025, 	0.0025, 	0.0,		0.0025,		0.0025, 	0.0025, 	0.0025,		0.0025, 	0.0025)
LPERA_SensorTorques.Voffset 		= array (0.2, 		0.2, 		0.0,		0.2,		0.2, 		0.2, 		0.2, 		0.2, 		0.2)
LPERA_SensorTorques.Xoffset 		= array (0.00025, 	0.00025, 	0.0,		0.00025, 	0.0013875,	0.0013875, 	0.0048276, 	0.0034488, 	0.00268)
LPERA_SensorTorques.Stiffness 		= array (777777.7, 	777777.7, 	0.0,		700.0, 		2009211.0,	2009211.0, 	37274.25, 	60739.73, 	12935.0)
LPERA_SensorTorques.PivotDistance 	= array (0.03, 		0.03, 		0.0,		1.0, 		0.025,		0.025, 		0.017, 		0.017,		1.0)
LPERA_SensorTorques.setPeriod(0.02)
LPERA_SensorTorques.configure

#### Diagnostics ###
loadComponent("LPERA_Diagnostics","ROS::RosDiagnostics")
addPeer("Supervisor","LPERA_Diagnostics")
setActivity("LPERA_Diagnostics",0.0,HighestPriority,ORO_SCHED_RT)
stream("LPERA_Diagnostics.diagnostics", ros.topic("/diagnostics"));
LPERA_Diagnostics.setPeriod(1)
LPERA_Diagnostics.statusname = "LPERA"
LPERA_Diagnostics.NumberOfVectorPorts = 3
LPERA_Diagnostics.NumberOfBoolPorts = 2
LPERA_Diagnostics.configure
LPERA_Diagnostics.vecname1 = "Reference Interpolator"
connect ("LPERA_VectorConcatenate.out", "LPERA_Diagnostics.vec1", ConnPolicy() )
LPERA_Diagnostics.vecname2 = "Joint Errors"
connect ("LPERA_ComputeJointErrors.out", "LPERA_Diagnostics.vec2", ConnPolicy() )
LPERA_Diagnostics.vecname3 = "Reference Path Planning"
connect ("LPERA_ReadReferences.pos_out", "LPERA_Diagnostics.vec3", ConnPolicy() )
LPERA_Diagnostics.boolname1 = "Amplifiers"
connect ("LPERA_Supervisor.enablePort", "LPERA_Diagnostics.bool1", ConnPolicy() )
LPERA_Diagnostics.boolname2 = "ReadRef Enable"
connect ("LPERA_Supervisor.enableReadRefPort", "LPERA_Diagnostics.bool2", ConnPolicy() )

### Setting up tracing ###
#var ConnPolicy tracingpolicy;	tracingpolicy.type = BUFFER; 	tracingpolicy.size = 2*65536;	tracingpolicy.lock_policy = LOCKED
#loadComponent("Tracing","Signal::Tracing")
#setActivity("Tracing",0.0,HighestPriority,ORO_SCHED_RT)
#Tracing.vector_sizes = array (8.0 , 8.0 , 8.0 , 8.0 , 8.0)
#Tracing.buffersize = 2*65536;
#Tracing.filename = "/home/amigo/ros/fuerte/tue/user/max/ARMLOG/LT123.dat"
#Tracing.Ts = Ts
#Tracing.Crash_if_done = 1; #If 1 the controllers are terminated after gathering data
#Tracing.configure
#connect ("LPERA_ReferenceInterpolator.posout","Tracing.in1", tracingpolicy );	# reference after reference generator
#connect ("LPERA_ComputeJointErrors.out","Tracing.in2", tracingpolicy ) ; 		# error
#connect ("LPERA_WeakIntegrator1.out","Tracing.in3", tracingpolicy ) ; 			# control effort in joint space
#connect ("LPERA_JointToMotorTorques.out","Tracing.in4", tracingpolicy ) ; 		# control effort in motor space
#connect ("LPERA_MotorToJointAngles.out","Tracing.in5", tracingpolicy ) ; 		# output

########################################################################
# Connecting all the ports and streams. Be carefull with making        #
# changes below as this can easily result in system failure and/or     #
# damage.                                                              #
########################################################################

### Control loop ###
connect ("Soem.Slave_1013.encoderAngle1","LPERA_ReadEncoders.enc1_in" , ConnPolicy() ); 
connect ("Soem.Slave_1013.encoderAngle2","LPERA_ReadEncoders.enc2_in" , ConnPolicy() ); 
connect ("Soem.Slave_1013.encoderAngle3","LPERA_ReadEncoders.enc3_in" , ConnPolicy() ); 
connect ("Soem.Slave_1014.encoderAngle1","LPERA_ReadEncoders.enc4_in" , ConnPolicy() ); 
connect ("Soem.Slave_1014.encoderAngle2","LPERA_ReadEncoders.enc5_in" , ConnPolicy() ); 
connect ("Soem.Slave_1014.encoderAngle3","LPERA_ReadEncoders.enc6_in" , ConnPolicy() ); 
connect ("Soem.Slave_1015.encoderAngle1","LPERA_ReadEncoders.enc7_in" , ConnPolicy() ); 
connect ("Soem.Slave_1015.encoderAngle2","LPERA_ReadEncoders.enc8_in" , ConnPolicy() );
connect ("Soem.Slave_1015.encoderAngle3","LPERA_ReadEncoders.enc9_in" , ConnPolicy() );
connect ("LPERA_ReadEncoders.out","LPERA_MotorToJointAngles.in" , ConnPolicy() ); 
connect ("LPERA_MotorToJointAngles.out","LPERA_ComputeJointErrors.in_minus", ConnPolicy() )
connect ("LPERA_ComputeJointErrors.out","LPERA_Gain.in", ConnPolicy() )
connect ("LPERA_Gain.out","LPERA_LeadLag.in", ConnPolicy() )
connect ("LPERA_LeadLag.out","LPERA_Lowpass.in", ConnPolicy() )
connect ("LPERA_Lowpass.out","LPERA_WeakIntegrator1.in", ConnPolicy() )
connect ("LPERA_WeakIntegrator1.out","LPERA_AddGravComp.in2_event", ConnPolicy() )
connect ("LPERA_AddGravComp.out","LPERA_JointToMotorTorques.in", ConnPolicy() )
connect ("LPERA_JointToMotorTorques.out","LPERA_AnalogOutsPera.in_ev", ConnPolicy() )

### Reference and Ros communication ###
connect ("LPERA_ReadReferences.pos_out","LPERA_VectorConcatenate.in1", ConnPolicy() )
connect ("LPERA_GripperControl.gripper_ref","LPERA_VectorConcatenate.in2", ConnPolicy() )
connect ("LPERA_VectorConcatenate.out","LPERA_ReferenceInterpolator.posin", ConnPolicy() )
connect ("LPERA_MotorToJointAngles.out","LPERA_WriteCurrentJointAngles.pos_in", ConnPolicy() )
connect ("LPERA_MotorToJointAngles.out","LPERA_JointOutputLimiter.in", ConnPolicy() )
connect ("LPERA_JointOutputLimiter.out","LPERA_WriteClippedJointAngles.pos_in", ConnPolicy() )
connect ("LPERA_ReferenceInterpolator.posout","LPERA_ComputeJointErrors.in_plus", ConnPolicy() )

stream("LPERA_WriteCurrentJointAngles.out", ros.topic("/amigo/left_arm/measurements_raw"))
stream("LPERA_WriteClippedJointAngles.out", ros.topic("/amigo/left_arm/measurements"))
stream("LPERA_WriteClippedJointAngles.out", ros.topic("/amigo/joint_states"))
stream("LPERA_ReadReferences.in", ros.topic("/amigo/left_arm/references"))

### Gravity compensation part ###
connect ("LPERA_ReferenceInterpolator.posout","LPERA_GravityCompensation.in", ConnPolicy() )
connect ("LPERA_GravityCompensation.out","LPERA_GC_Gains.in", ConnPolicy() )
connect ("LPERA_GC_Gains.out","LPERA_Polynomials.in", ConnPolicy() )
connect ("LPERA_Polynomials.out","LPERA_AddGravComp.in1", ConnPolicy() )

### Supervisor ###
connect ("LPERA_AnalogInsPera.out_pos","LPERA_Supervisor.measAbsJointAnglesPort", ConnPolicy() )
connect ("LPERA_JointToMotorTorques.out","LPERA_Supervisor.controllerOutputPort", ConnPolicy() )
connect ("LPERA_ReadReferences.pos_out","LPERA_Supervisor.requestedJointAnglesPort", ConnPolicy() )
connect ("LPERA_Supervisor.enablePort","Soem.Slave_1013.enablePort", ConnPolicy() )                                
connect ("LPERA_Supervisor.enablePort","Soem.Slave_1014.enablePort", ConnPolicy() )                                
connect ("LPERA_Supervisor.enablePort","Soem.Slave_1015.enablePort", ConnPolicy() )                                
connect ("LPERA_ComputeJointErrors.out","LPERA_Supervisor.errorPort", ConnPolicy() )
connect ("LPERA_MotorToJointAngles.out","LPERA_Supervisor.measRelJointAnglesPort", ConnPolicy() )
connect ("LPERA_Supervisor.resetInterpolatorPort","LPERA_ReferenceInterpolator.resetValues", ConnPolicy() )
connect ("LPERA_Supervisor.homJntAnglesPort","LPERA_VectorConcatenate.in1", ConnPolicy() )
#connect ("LPERA_Supervisor.enableReadRefPort","LPERA_ReadReferences.enablePort", ConnPolicy() );#ToDo: this is a problem!
connect ("LPERA_Supervisor.reNullPort","LPERA_ReadEncoders.in_reNull", ConnPolicy() )                     

stream("LPERA_Supervisor.eButtonPort", ros.topic("/emergency_switch"))
stream("LPERA_Supervisor.resetRefPort", ros.topic("/amigo/left_arm/references"))
stream("LPERA_Supervisor.peraStatusPort", ros.topic("/arm_left_status"))

### Gripper control ###
connect ("LPERA_AnalogInsPera.out_for","LPERA_SensorTorques.voltage_in", ConnPolicy() )
connect ("LPERA_SensorTorques.measured_torques_out","LPERA_GripperControl.torque_in", ConnPolicy() )
connect ("LPERA_MotorToJointAngles.out", "LPERA_GripperControl.position_in", ConnPolicy() )
connect ("LPERA_GripperControl.gripper_measurement","LPERA_Supervisor.gripper_measurement", ConnPolicy() )
connect ("LPERA_Supervisor.gripper_command","LPERA_GripperControl.gripper_command", ConnPolicy() )
 
stream("LPERA_GripperControl.gripper_measurement", ros.topic("/amigo/left_gripper/measurements"))
stream("LPERA_GripperControl.gripper_command", ros.topic("/amigo/left_gripper/references"))




# RTD, publishes velocities to Supervisor and ROS
connect ("LPERA_MotorToJointAngles.out","LPERA_RTD.u", ConnPolicy() )
connect ("LPERA_RTD.ude","LPERA_Supervisor.jointVelocity", ConnPolicy() )
stream("LPERA_RTD.derivatives", ros.topic("/pera_rtd_data"))

#Homing
#connect ("LPERA_ReadEncoders.out", "LPERA_Homing.relPos_in", ConnPolicy() )
#connect ("LPERA_Homing.ref_out","LPERA_ReferenceInterpolator.posin", ConnPolicy() )
#connect ("LPERA_ComputeJointErrors.out", "LPERA_Homing.servo_error_in", ConnPolicy() )

Supervisor.NameBodyPart( 5, "LPERA")
stream( "Supervisor.LPERA_fireup", ros.topic("/left_arm_fireup") )
stream( "Supervisor.LPERA_enabled", ros.topic("/left_arm_enabled"));

Supervisor.AddAllwaysOnPeer ("LPERA_Supervisor")
Supervisor.AddAllwaysOnPeer ("LPERA_ReadReferences")
Supervisor.AddAllwaysOnPeer ("LPERA_VectorConcatenate")
Supervisor.AddAllwaysOnPeer ("LPERA_ReferenceInterpolator")
Supervisor.AddAllwaysOnPeer ("LPERA_MotorToJointAngles")
Supervisor.AddAllwaysOnPeer ("LPERA_ComputeJointErrors")
Supervisor.AddAllwaysOnPeer ("LPERA_JointToMotorTorques")
Supervisor.AddAllwaysOnPeer ("LPERA_JointOutputLimiter")
Supervisor.AddAllwaysOnPeer ("LPERA_WriteCurrentJointAngles")
Supervisor.AddAllwaysOnPeer ("LPERA_WriteClippedJointAngles")
Supervisor.AddAllwaysOnPeer ("LPERA_RTD")
Supervisor.AddAllwaysOnPeer ("LPERA_Gain")
Supervisor.AddAllwaysOnPeer ("LPERA_LeadLag")
Supervisor.AddAllwaysOnPeer ("LPERA_Lowpass")
Supervisor.AddAllwaysOnPeer ("LPERA_WeakIntegrator1")
Supervisor.AddAllwaysOnPeer ("LPERA_GravityCompensation")
Supervisor.AddAllwaysOnPeer ("LPERA_GC_Gains")
Supervisor.AddAllwaysOnPeer ("LPERA_Polynomials")
Supervisor.AddAllwaysOnPeer ("LPERA_AddGravComp")
Supervisor.AddAllwaysOnPeer ("LPERA_SensorTorques")
Supervisor.AddAllwaysOnPeer ("LPERA_GripperControl")
Supervisor.AddAllwaysOnPeer ("LPERA_Diagnostics")
Supervisor.AddAllwaysOnPeer ("LPERA_ReadEncoders")
#Tracing.start
#Supervisor.AddAllwaysOnPeer ("LPERA_Homing");
