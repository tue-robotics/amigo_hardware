########################################################################
#                                                                      #
# Base controller deployer file 									   #
#                                                                      #
# Ton Peters                                                           #
# September 2014                                                       #
#                                                                      #
########################################################################


#### DECLARATION OF PARAMETERS ####
var double Ts 				= 0.001
var double WHEELRAD 		= 0.075*0.9825; # Corrected for effective wheel radius
var double DIS2CENT 		= 0.29072 * 64.0 / 62.8; # (Correction for corrected TWOPI)
var double HALFSQRT2		= 0.7071
var double TORQUE2CURRENT 	= 1.0/0.0302; # [Amp/Nm]
var double CURRENT2VOLT 	= 1.0/1.0
var double GEARRATIO 		= 8.0/343.0
var double TWOPI 			= 2.0*3.141592
var double ENCODERCOUNTS 	= 500.0*4.0
var double ENC2SI 			= TWOPI*GEARRATIO/ENCODERCOUNTS
var double SI2V 			= TORQUE2CURRENT * CURRENT2VOLT * GEARRATIO
var array MAX_ERRORS 		= array ( 10.0, 10.0, 10.0, 10.0)
var array MAX_VELOCITIES	= array (1.8, 1.0, 3.1415)
var double MAX_START_VEL  	= 0.7
var array MAX_ACC 			= array (0.7, 0.7, 2.0)
var double MAX_INTERVAL 	= 1.0
var array MAX_OUTPUT 		= array(9.9, 9.9, 9.9, 9.9)
var double MAX_SATURATION_TIME	= 0.1
var int N					= 4
var int BODYNUMBER 			= 1
var string BODYPARTNAME 	= "base"
var bool HOMEABLE 			= false
var bool HOMINGOBLIGATORY	= false
var bool RESETTABLE			= true
var string ROBOT 			= "/amigo"
 
	 # Controller 1, test (bw ~19.0Hz): 
	var strings CONTROLLERS 				= strings ("WeakIntegrator","LowPass")
	var array 	GAINS                     	= array (0.25, 0.25, 0.25, 0.25)
	var array 	INTEGRATOR_ZERO_FREQUENCY 	= array (20.0, 20.0, 20.0, 20.0)
	var array 	LOWPASS_FREQUENCY         	= array (500.0, 500.0, 500.0, 500.0)
	var array 	LOWPASS_DAMPING           	= array (0.7, 0.7, 0.7, 0.7)

### AddBodyPart ###
Supervisor.AddBodyPart( BODYNUMBER, BODYPARTNAME, HOMEABLE, HOMINGOBLIGATORY, RESETTABLE)

### ENCODER TO VELOCITY ###
loadComponent("BASE_EncoderToVelocity","MATH::Differentiate")
addPeer("Supervisor","BASE_EncoderToVelocity")
setActivity("BASE_EncoderToVelocity",0.0,HighestPriority,ORO_SCHED_RT)
BASE_EncoderToVelocity.vector_size = 4;
BASE_EncoderToVelocity.sampling_time = Ts;
BASE_EncoderToVelocity.use_time_check = true;
BASE_EncoderToVelocity.allowed_variation_Ts = Ts*0.4;
BASE_EncoderToVelocity.use_discrete = true;
BASE_EncoderToVelocity.configure

### CONTROLLER COMPONENT ###
loadComponent("BASE_Controller","FILTERS::Controller")
addPeer("Supervisor","BASE_Controller")
setActivity("BASE_Controller",0.0,HighestPriority,ORO_SCHED_RT)
BASE_Controller.vector_size = N;
BASE_Controller.sampling_time = Ts;
BASE_Controller.controllers = CONTROLLERS;
BASE_Controller.gains = GAINS;
BASE_Controller.zero_freq_WeakIntegrator = INTEGRATOR_ZERO_FREQUENCY;
#BASE_Controller.zero_freq_LeadLag = LEAD_FREQUENCY;
#BASE_Controller.pole_freq_LeadLag = LAG_FREQUENCY;
#BASE_Controller.zero_freq_Notch = NOTCH_ZERO_FREQ;
#BASE_Controller.zero_damp_Notch = NOTCH_ZERO_DAMP;
#BASE_Controller.pole_freq_Notch = NOTCH_POLE_FREQ;
#BASE_Controller.pole_damp_Notch = NOTCH_POLE_DAMP;
BASE_Controller.pole_freq_LowPass = LOWPASS_FREQUENCY;
BASE_Controller.pole_damp_LowPass = LOWPASS_DAMPING;
BASE_Controller.configure

### SI2VOLT ###
loadComponent("BASE_SI2Volt","MATH::Gain")
addPeer("Supervisor","BASE_SI2Volt")
setActivity("BASE_SI2Volt",0.0,HighestPriority,ORO_SCHED_RT)
BASE_SI2Volt.vectorsize = N;
BASE_SI2Volt.gain = array (SI2V, SI2V, SI2V, SI2V)
BASE_SI2Volt.configure

### Safety ###
loadComponent("BASE_Safety","SUPERVISORY::Safety")
addPeer("Supervisor","BASE_Safety")
setActivity("BASE_Safety",0.0,HighestPriority,ORO_SCHED_RT)
BASE_Safety.NJ					= N
BASE_Safety.NM					= N
BASE_Safety.maxJointErrors		= MAX_ERRORS
BASE_Safety.motorSaturations	= MAX_OUTPUT
BASE_Safety.maxConSatTime		= MAX_SATURATION_TIME
BASE_Safety.configure

### READ REFERENCE VELOCITIES ###
loadComponent("BASE_ReadReferences","ROS::ReadTwistMsg")
addPeer("Supervisor","BASE_ReadReferences")
setActivity("BASE_ReadReferences",Ts,LowestPriority,ORO_SCHED_OTHER)
BASE_ReadReferences.max_start_vel 	= MAX_START_VEL
BASE_ReadReferences.max_acc 		= MAX_ACC
BASE_ReadReferences.max_interval 	= MAX_INTERVAL
BASE_ReadReferences.max_vel 		= MAX_VELOCITIES
BASE_ReadReferences.configure

### DECOUPLE REFERENCE ###
loadComponent("BASE_JointToMotorSpace","MATH::MatrixTransform")
addPeer("Supervisor","BASE_JointToMotorSpace")
setActivity("BASE_JointToMotorSpace",Ts,LowestPriority,ORO_SCHED_OTHER)
BASE_JointToMotorSpace.Nrows 		= 4
BASE_JointToMotorSpace.Ncolumns 	= 3
BASE_JointToMotorSpace.configure
BASE_JointToMotorSpace.function1 = array ( -HALFSQRT2/WHEELRAD,  HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BASE_JointToMotorSpace.function2 = array ( -HALFSQRT2/WHEELRAD, -HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BASE_JointToMotorSpace.function3 = array (  HALFSQRT2/WHEELRAD, -HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BASE_JointToMotorSpace.function4 = array (  HALFSQRT2/WHEELRAD,  HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )

### DECOUPLE POSITION ###
loadComponent("BASE_MotorToJointSpace","MATH::MatrixTransform")
addPeer("Supervisor","BASE_MotorToJointSpace")
setActivity("BASE_MotorToJointSpace",0.0,HighestPriority,ORO_SCHED_RT)
BASE_MotorToJointSpace.Nrows 		= 3
BASE_MotorToJointSpace.Ncolumns 	= 4
BASE_MotorToJointSpace.configure
BASE_MotorToJointSpace.function1 = array (-0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2)
BASE_MotorToJointSpace.function2 = array ( 0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2)
BASE_MotorToJointSpace.function3 = array ( 0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT)

#### LOAD COMPONENT TO PUBLISH ODOMETRY ###
loadComponent("BASE_OdometryPublisher","ROS::PublishOdometry")
addPeer("Supervisor","BASE_OdometryPublisher")
setActivity("BASE_OdometryPublisher",0.05,LowestPriority,ORO_SCHED_OTHER)
BASE_OdometryPublisher.base_link_frame 	= ROBOT+"/base_link"
BASE_OdometryPublisher.odom_frame 		= ROBOT+"/odom"
BASE_OdometryPublisher.configure

### LOAD COMPONENT TO PUBLISH DIAGNOSTICS ###
loadComponent("BASE_Diagnostics","ROS::RosDiagnostics")
addPeer("Supervisor","BASE_Diagnostics")
setActivity("BASE_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
BASE_Diagnostics.statusname 			= BODYPARTNAME+"_Controller"
BASE_Diagnostics.NumberOfVectorPorts 	= 3
BASE_Diagnostics.NumberOfBoolPorts 		= 1
BASE_Diagnostics.configure
BASE_Diagnostics.vecname1 				= "Reference"
BASE_Diagnostics.vecname2 				= "Error"
BASE_Diagnostics.vecname3 				= "Voltage"
BASE_Diagnostics.boolname1 				= "Amplifiers"

#### CONNECT COMPONENTS ####
# Control loop
connect ("BASE_ReadEncoders.out",		"BASE_EncoderToVelocity.in", 	ConnPolicy() ); #enc4[-]
connect ("BASE_EncoderToVelocity.out",	"BASE_Controller.pos_in", 	ConnPolicy() ); #enc4[-]
connect ("BASE_Controller.out",			"BASE_SI2Volt.in", 			ConnPolicy() )
connect ("BASE_SI2Volt.out", 			"BASESPINDLE_AnalogOuts.in1", 		ConnPolicy() );

# Safety
connect ("BASE_Controller.jointErrors",	"BASE_Safety.jointErrors", 	ConnPolicy() ); # jointerrors
connect ("BASE_Controller.out",			"BASE_Safety.controlEffort",ConnPolicy() )
connect ("BASE_Safety.error",			"Supervisor.base_error", 	ConnPolicy() ); # error
connect ("BASE_Safety.enable",			"BASE_Controller.enable", 	ConnPolicy() ); # error
connect ("BASE_Safety.enable", 			"DigitalOuts2.in2", 				ConnPolicy() ); # Enable (amplifiers)


# Reference signal
stream  ("BASE_ReadReferences.cmd_vel", 	ros.topic(ROBOT+"/base/references"));
connect ("BASE_ReadReferences.out",		"BASE_JointToMotorSpace.in", ConnPolicy() )
connect ("BASE_JointToMotorSpace.out",	"BASE_Controller.ref_in", 	ConnPolicy() );

# Odom to ros
connect ("BASE_ReadEncoders.out",		"BASE_MotorToJointSpace.in", ConnPolicy() )
connect ("BASE_MotorToJointSpace.out", 	"BASE_OdometryPublisher.pos", ConnPolicy() );
stream ("BASE_OdometryPublisher.odom", 	ros.topic(ROBOT+"base/measurements"));
stream ("BASE_OdometryPublisher.reset", ros.topic(ROBOT+"/base/reset_odometry"));

# Diagnostics
connect ("BASE_ReadReferences.out", 	"BASE_Diagnostics.vec1", ConnPolicy() )
connect ("BASE_Controller.jointErrors", "BASE_Diagnostics.vec2", ConnPolicy() )
connect ("BASE_SI2Volt.out", 			"BASE_Diagnostics.vec3", ConnPolicy() )
stream ("BASE_Diagnostics.diagnostics", ros.topic(ROBOT+"/base_diagnostics"));



#### START COMPONENTS ####
# Control loop
Supervisor.AddAllwaysOnPeer ("BASE_EncoderToVelocity")
Supervisor.AddEnabledPeer	("BASE_Controller", BODYNUMBER)
Supervisor.AddAllwaysOnPeer ("BASE_SI2Volt")
# diagnostics
Supervisor.AddAllwaysOnPeer ("BASE_MotorToJointSpace")
Supervisor.AddAllwaysOnPeer ("BASE_OdometryPublisher")
Supervisor.AddAllwaysOnPeer ("BASE_Diagnostics")
# safety and reference
Supervisor.AddEnabledPeer  	("BASE_Safety", 			BODYNUMBER)
Supervisor.AddEnabledPeer  	("BASE_ReadReferences",		BODYNUMBER )
Supervisor.AddEnabledPeer  	("BASE_JointToMotorSpace",	BODYNUMBER )






