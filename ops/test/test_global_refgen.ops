########################################################################
#                                                                      #
# Simple Open EtherCAT Master (SOEM) deployer file 		       		   #
#                                                                      #
#                                                                      #
#                                                                      #
#                                                                      #
########################################################################

#### IMPORT PACKAGE ####
import("rtt_ros")
ros.import("amigo_hardware")

#### DECLARATION OF PARAMETERS ####
var double TS 					= 0.001
var string LEFT_ARM_SHOULDER 	= "Soem.Slave_1011"
var string LEFT_ARM_UPPERARM 	= "Soem.Slave_1012"
var string LEFT_ARM_LOWERARM 	= "Soem.Slave_1013"
var string RIGHT_ARM_SHOULDER 	= "Soem.Slave_1015"
var string RIGHT_ARM_UPPERARM 	= "Soem.Slave_1016"
var string RIGHT_ARM_LOWERARM 	= "Soem.Slave_1017"
var strings JOINT_NAMES 		= strings( "shoulder_yaw_joint_right", "shoulder_pitch_joint_right", "shoulder_roll_joint_right", "elbow_pitch_joint_right", "elbow_roll_joint_right", "wrist_pitch_joint_right", "wrist_yaw_joint_right" ) 
var int BODYNUMBER 				= 4
var array UPPERJOINTLIMIT 		= array (	0.0,		1.57,		1.57, 		2.23,  		1.83, 		0.95,  		0.61) 	
var array LOWERJOINTLIMIT 		= array (	-1.57,		-1.57,		-1.57,  	0.0, 		-1.83,		-0.95, 		-0.61)
var array MAXVELOCITIES			= array (	0.4, 		0.4, 		0.6, 		0.8, 		0.8, 		1.0, 		1.0)
var array MAXACCELERATIONS		= array (	0.2, 		0.2, 		0.3, 		0.5, 		0.5, 		0.5,		0.5)
		
#### MAKING PARAMETERS GLOBAL #### to do find a way to add a doubles/ints globally
loadService("HARDWARE","os")
os.setenv("LEFT_ARM_SHOULDER",LEFT_ARM_SHOULDER)
os.setenv("LEFT_ARM_UPPERARM",LEFT_ARM_UPPERARM)
os.setenv("LEFT_ARM_LOWERARM",LEFT_ARM_LOWERARM)
os.setenv("RIGHT_ARM_SHOULDER",RIGHT_ARM_SHOULDER)
os.setenv("RIGHT_ARM_UPPERARM",RIGHT_ARM_UPPERARM)
os.setenv("RIGHT_ARM_LOWERARM",RIGHT_ARM_LOWERARM)

#### LOAD SUPERVISOR ###
loadComponent("Supervisor","SUPERVISORY::Supervisor")
Supervisor.ebuttonorder	= strings("Wired","Wireless")
Supervisor.configure
setActivity("Supervisor",0.04,HighestPriority,ORO_SCHED_RT)
stream("Supervisor.ebuttonWired", ros.topic("/amigo/runstop"))
stream("Supervisor.ebuttonWireless", ros.topic("/amigo/emergency_switch"))
stream("Supervisor.rosshutdown", ros.topic("/amigo/etherCAT_shutdown")); 
stream("Supervisor.rosetherCATenabled", ros.topic("/amigo/etherCAT_enabled")); 
stream("Supervisor.hardware_status", ros.topic("/amigo/hardware_status"));
stream("Supervisor.dashboardCmd", ros.topic("/amigo/dashboard_ctrlcmds"));
stream("Supervisor.ebutton_status", ros.topic("/amigo/ebutton_status"));

#### Create Robot Object ####
var strings DEFAULT_PART_NAMES = strings("base","spindle","left_arm", "right_arm", "head")
Supervisor.CreateRobotObject("amigo", DEFAULT_PART_NAMES)

#### LOAD JOINTSTATEAGGREGATOR ####
loadComponent("JointStateAggregator","ROS::JointStateAggregator")
addPeer("Supervisor","JointStateAggregator")
setActivity("JointStateAggregator",0.02,LowestPriority, ORO_SCHED_OTHER)
JointStateAggregator.configure
stream("JointStateAggregator.out", ros.topic("/amigo/joint_states"))

#### LOAD JOINTSTATEAGGREGATOR ####
loadComponent("GlobalReferenceGenerator","SOURCES::GlobalReferenceGenerator")
addPeer("Supervisor","GlobalReferenceGenerator")
setActivity("GlobalReferenceGenerator",TS,HighestPriority, ORO_SCHED_RT)
GlobalReferenceGenerator.configure


stream ("GlobalReferenceGenerator.in", 		ros.topic("/amigo/right_arm/references"))

GlobalReferenceGenerator.AddBodyPart(BODYNUMBER,JOINT_NAMES)
GlobalReferenceGenerator.minPos4 			= array ( -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0 )
GlobalReferenceGenerator.maxPos4 			= array ( 0.0,  0.0, 	0.0, 0.0, 	0.0, 0.0, 	0.0 )
GlobalReferenceGenerator.maxVel4 			= array ( 0.4,  0.5, 	0.6, 0.7, 	0.8, 0.9, 	1.0 )
GlobalReferenceGenerator.maxAcc4	 		= array ( 1.0,  1.0, 	1.0, 1.0, 	1.0, 1.0, 	1.0 )
GlobalReferenceGenerator.interpolatorDt4 	= TS
GlobalReferenceGenerator.interpolatorEps4 	= 1.0

### Setting up tracing ###
loadComponent("Tracing","Signal::Tracing")
addPeer("Supervisor","Tracing")
setActivity("Tracing",0.0,HighestPriority,ORO_SCHED_RT)
Tracing.vector_sizes = array (7.0)
Tracing.buffersize =  10000;
Tracing.filename = "/home/maxbaeten/ros/data/hardware_tracing/max/GLOBALREFGEN/TEST1.dat"
Tracing.Ts = TS
Tracing.configure
connect ("GlobalReferenceGenerator.pos_out4",        "Tracing.in1",                              ConnPolicy())         ;# Reference

### Constant Signal to provide runtime goals ###
loadComponent("INITIALPOS","SOURCES::ConstantSignal")
addPeer("Supervisor","INITIALPOS")
setActivity("INITIALPOS",TS,HighestPriority,ORO_SCHED_RT)
INITIALPOS.vector_size		= 7
INITIALPOS.value 			= array(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7)
INITIALPOS.configure
connect ("INITIALPOS.out", 						   	"GlobalReferenceGenerator.initial_pos4",    ConnPolicy())         ;# Reference

#### START COMPONENTS ####
#Supervisor.AddAllwaysOnPeer ("JointStateAggregator")
#Supervisor.AddAllwaysOnPeer ("GlobalReferenceGenerator")
#Supervisor.AddAllwaysOnPeer ("Tracing")
#Supervisor.AddAllwaysOnPeer ("INITIALPOS")
#Supervisor.start()
GlobalReferenceGenerator.start()
Tracing.start()
INITIALPOS.start()


