#########################################################################
#																		#
# Left Philips Experimental Robotic Arm deployer file.					#
#																		#
# Max Baeten															#
#																		#
#########################################################################

#### DECLARATION OF PARAMETERS ####
var double TS 					= 0.001
var string LEFT_ARM_SHOULDER 	= os.getenv("LEFT_ARM_SHOULDER")
var string LEFT_ARM_UPPERARM 	= os.getenv("LEFT_ARM_UPPERARM")
var string LEFT_ARM_LOWERARM 	= os.getenv("LEFT_ARM_LOWERARM")
var strings JOINT_NAMES 		= strings( "shoulder_yaw_joint_left", "shoulder_pitch_joint_left", "shoulder_roll_joint_left", "elbow_pitch_joint_left", "elbow_roll_joint_left", "wrist_pitch_joint_left", "wrist_yaw_joint_left" )
var strings DUMMY_JOINT_NAMES 	= strings( "finger1_joint_left", "finger1_tip_joint_left", "finger2_joint_left", "finger2_tip_joint_left" )
var array UPPERJOINTLIMIT 		= array (	0.0,		1.57,		1.57, 		2.23,  		1.83, 		0.95,  		0.61,  		4.0		)
var array LOWERJOINTLIMIT 		= array (	-1.57,		-1.57,		-1.57,  	0.0, 		-1.83,		-0.95, 		-0.61, 		-4.0	)
var array HOMINGSTROKE 			= array (	0.0,		0.0,		-1.57,  	0.0, 		-1.83,		-0.95, 		-0.75, 		0.0		)
var array MAXERRORS 			= array (	0.09,     	0.09,   	0.09,     	0.09, 	   	0.09,    	0.09, 	   	0.09, 		2.0		)
var ints ABSPOS 				= ints	(	394,		597,		0,			0,			0,			0,			0,			0		)
var double TWOPI 				= 2.0*3.141592
var double GEARRATIO_SM			= 1.0/550.0
var double GEARRATIO_S3		    = 1.0/371.25
var double GEARRATIO_EM			= 1.0/410.0
var double GEARRATIO_WM			= 1.0/290.0
var double GEARRATIO_HM			= 196.0/3249.0
var double ENCODERCOUNTS_SM		= 256.0*4.0
var double ENCODERCOUNTS_S3	    = 256.0*4.0
var double ENCODERCOUNTS_EM		= 500.0*4.0 
var double ENCODERCOUNTS_WM		= 128.0*4.0
var double ENCODERCOUNTS_HM		= 8.0*128.0*4.0 ;# (TO DO: should be 16*4, remove this factor 8)
var double ENC2SI_SM			= TWOPI*GEARRATIO_SM/ENCODERCOUNTS_SM
var double ENC2SI_S3			= TWOPI*GEARRATIO_S3/ENCODERCOUNTS_S3
var double ENC2SI_EM			= TWOPI*GEARRATIO_EM/ENCODERCOUNTS_EM
var double ENC2SI_WM			= TWOPI*GEARRATIO_WM/ENCODERCOUNTS_WM
var double ENC2SI_HM 			= TWOPI*GEARRATIO_HM/ENCODERCOUNTS_HM
var int N						= 8
var bool REQUIREHOMING   		= true
var bool REQUIREGRIPPERHOMING   = false 
var int BODYNUMBER 				= 3
var string BODYPARTNAME 		= "left_arm"
var bool HOMEABLE 				= true
var bool HOMINGOBLIGATORY		= false
var bool RESETTABLE				= true
### AddBodyPart ###
Supervisor.AddBodyPart( BODYNUMBER, BODYPARTNAME, HOMEABLE, HOMINGOBLIGATORY, RESETTABLE)

#### HIGH PRIORITY COMPONENTS ####
### Read reference joint angles ###
loadComponent("LPERA_ReadReferences","ROS::BenchmarkReference")
addPeer("Supervisor","LPERA_ReadReferences")
setActivity("LPERA_ReadReferences",TS,HighestPriority,ORO_SCHED_RT)
LPERA_ReadReferences.vector_size 			= 7
LPERA_ReadReferences.configure
LPERA_ReadReferences.referenceFunction1     = array (  -1.0,    0.0,    0.0,    0.0,    0.0,  0.0,    0.0,    0.0,    0.0,    0.0,  0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
LPERA_ReadReferences.referenceFunction2     = array (   0.0,    0.0,   -1.0,    0.0,    1.0,  0.0,    0.0,    0.0,    0.0,    0.0,  0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
LPERA_ReadReferences.referenceFunction3     = array (   0.0,    0.0,    0.0,    0.0,    0.0,  0.0,   -1.0,    0.0,    1.0,    0.0,  0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
LPERA_ReadReferences.referenceFunction4     = array (   0.0,    0.0,    0.0,    0.0,    0.0,  0.0,    0.0,    0.0,    0.0,    0.0,  1.0,    0.0,    0.0,    0.0,    0.0,    0.0)
LPERA_ReadReferences.referenceFunction5     = array (   0.0,    0.0,    0.0,    0.0,    0.0,  0.0,    0.0,    0.0,    0.0,    0.0,  0.0,    0.0,   -1.0,    0.0,    1.0,    0.0)
LPERA_ReadReferences.referenceFunction6     = array (   0.0,    0.0,    0.0,    0.0,    0.0,  0.0,    0.0,    0.0,    0.0,    0.0,  0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
LPERA_ReadReferences.referenceFunction7     = array (   0.0,    0.0,    0.0,    0.0,    0.0,  0.0,    0.0,    0.0,    0.0,    0.0,  0.0,    0.0,    0.0,    0.0,    0.0,    0.0)
LPERA_ReadReferences.timeFunction           = array (   5.0,    10.0,   15.0,   20.0,   25.0, 30.0,   35.0,   40.0,   45.0,   50.0, 55.0,   60.0,   65.0,   70.0,   75.0,   80.0)

### Motor to joint angles ###
loadComponent("LPERA_MotorToJointSpace","MATH::MatrixTransform")
addPeer("Supervisor","LPERA_MotorToJointSpace")
setActivity("LPERA_MotorToJointSpace",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_MotorToJointSpace.Nrows 				= N
LPERA_MotorToJointSpace.Ncolumns			= N
LPERA_MotorToJointSpace.configure
LPERA_MotorToJointSpace.function1 			= array  ( 0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_MotorToJointSpace.function2 			= array  (-0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_MotorToJointSpace.function3 			= array  ( 0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_MotorToJointSpace.function4 			= array  ( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
LPERA_MotorToJointSpace.function5 			= array  ( 0.0,  0.0,  0.0,  0.5, -0.5,  0.0,  0.0,  0.0)
LPERA_MotorToJointSpace.function6 			= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
LPERA_MotorToJointSpace.function7 			= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5, -0.5,  0.0)
LPERA_MotorToJointSpace.function8 			= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### Interpolator ###
loadComponent("LPERA_ReferenceGenerator","SOURCES::ReferenceGenerator")
addPeer("Supervisor","LPERA_ReferenceGenerator")
setActivity("LPERA_ReferenceGenerator",TS,HighestPriority,ORO_SCHED_RT)
LPERA_ReferenceGenerator.vector_size 		= N
LPERA_ReferenceGenerator.number_of_inports 	= 2
LPERA_ReferenceGenerator.inport_sizes 		= ints (7, 1)
LPERA_ReferenceGenerator.InterpolatorDt 	= TS
LPERA_ReferenceGenerator.InterpolatorEps 	= 1.0
LPERA_ReferenceGenerator.minPosition		= LOWERJOINTLIMIT
LPERA_ReferenceGenerator.maxPosition		= UPPERJOINTLIMIT
LPERA_ReferenceGenerator.maxVelocity		= array (0.4, 0.4, 0.6, 0.8, 0.8, 1.0, 1.0, 10.0)
LPERA_ReferenceGenerator.maxAcceleration	= array (0.2, 0.2, 0.3, 0.5, 0.5, 0.5, 0.5, 100.0)
LPERA_ReferenceGenerator.configure

### LOAD READENCODERS
loadComponent("LPERA_ReadEncoders","SOEM::ReadEncoders")
addPeer("Supervisor","LPERA_ReadEncoders")
setActivity("LPERA_ReadEncoders",TS,HighestPriority,ORO_SCHED_RT)
LPERA_ReadEncoders.encoderbits 				= 65536
LPERA_ReadEncoders.enc2SI 					= array (ENC2SI_SM ,ENC2SI_SM, ENC2SI_S3 , ENC2SI_EM , ENC2SI_EM , ENC2SI_WM , ENC2SI_WM , ENC2SI_HM )
LPERA_ReadEncoders.configure

### Gripper force controller ###
loadComponent("LPERA_GripperControl","ARM::GripperControl")
addPeer("Supervisor","LPERA_GripperControl")
setActivity("LPERA_GripperControl",TS,HighestPriority,ORO_SCHED_RT)
LPERA_GripperControl.threshold_closed 		= 25.0
LPERA_GripperControl.max_pos 				= 5.3
LPERA_GripperControl.gripper_gain 			= 0.1
LPERA_GripperControl.configure

### Joint to motor torques ###
loadComponent("LPERA_JointToMotorSpace","MATH::MatrixTransform")
addPeer("Supervisor","LPERA_JointToMotorSpace")
setActivity("LPERA_JointToMotorSpace",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_JointToMotorSpace.Nrows 				= N
LPERA_JointToMotorSpace.Ncolumns 			= N
LPERA_JointToMotorSpace.configure
LPERA_JointToMotorSpace.function1			= array ( 0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_JointToMotorSpace.function2			= array (-0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_JointToMotorSpace.function3 			= array ( 0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
LPERA_JointToMotorSpace.function4 			= array ( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
LPERA_JointToMotorSpace.function5 			= array ( 0.0,  0.0,  0.0,  0.5, -0.5,  0.0,  0.0,  0.0)
LPERA_JointToMotorSpace.function6 			= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
LPERA_JointToMotorSpace.function7 			= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5, -0.5,  0.0)
LPERA_JointToMotorSpace.function8 			= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)
	
### Negative feedback controller ###
loadComponent("LPERA_Controller","FILTERS::Controller")
setActivity("LPERA_Controller",0.0,HighestPriority,ORO_SCHED_RT)
addPeer("Supervisor","LPERA_Controller")
LPERA_Controller.vector_size    			= N
LPERA_Controller.controllers				= strings("WeakIntegrator","LeadLag","LowPass")
LPERA_Controller.sampling_time				= TS
LPERA_Controller.number_of_refports			= 1
LPERA_Controller.refinport_sizes			= ints (N)
LPERA_Controller.number_of_ffwports			= 0
LPERA_Controller.gains						= array(20000.0, 	20000.0, 	10000.0, 	17500.0, 	17500.0, 	17500.0, 	21500.0, 	5000.0);
LPERA_Controller.zero_freq_WeakIntegrator	= array(0.0065,	  	0.0065,		0.009, 		0.004, 		0.004, 		0.02, 		0.02, 		0.000001); 
LPERA_Controller.zero_freq_LeadLag			= array(25.0, 		25.0, 		15.0, 		100.0, 		100.0,		5.0,  		5.0,  		4.5)
LPERA_Controller.pole_freq_LeadLag			= array(80.0, 		80.0, 		40.0, 		200.0, 		200.0, 		40.0, 		40.0, 		45.0)
LPERA_Controller.pole_freq_LowPass			= array(125.0, 		125.0, 		125.0, 		125.0, 		62.5, 		125.0, 		125.0, 		125.0)
LPERA_Controller.pole_damp_LowPass			= array(0.7, 		0.7, 		0.7, 		0.7, 		0.7, 		0.7, 		0.7, 		0.7)
LPERA_Controller.configure

### Safety ###
loadComponent("LPERA_Safety","SUPERVISORY::Safety")
addPeer("Supervisor","LPERA_Safety")
setActivity("LPERA_Safety",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_Safety.NJ								= N
LPERA_Safety.NM								= N
LPERA_Safety.maxJointErrors					= MAXERRORS
LPERA_Safety.motorSaturations				= array (1000.0, 	1000.0,	 	400.0, 	   	500.0,  	500.0, 	   	500.0, 		500.0, 		900.0)
LPERA_Safety.maxConSatTime					= 5.0
LPERA_Safety.configure

### Output limiter ###
loadComponent("LPERA_JointOutputLimiter","DISCONTINUITIES::Saturation")
addPeer("Supervisor","LPERA_JointOutputLimiter")
setActivity("LPERA_JointOutputLimiter",0.0,HighestPriority,ORO_SCHED_RT)
LPERA_JointOutputLimiter.vector_size 		= N
LPERA_JointOutputLimiter.upper_limit 		= UPPERJOINTLIMIT
LPERA_JointOutputLimiter.lower_limit 		= LOWERJOINTLIMIT
LPERA_JointOutputLimiter.configure

### Publishing joint angles on ROS-topic ###
loadComponent("LPERA_WriteClippedJointAngles","ROS::DoublesToJointState")
addPeer("Supervisor","LPERA_WriteClippedJointAngles")
setActivity("LPERA_WriteClippedJointAngles",0.05,LowestPriority,ORO_SCHED_OTHER)
LPERA_WriteClippedJointAngles.JointNames 	= JOINT_NAMES
LPERA_WriteClippedJointAngles.configure

### Conversion analog PERA_IO values to torques ###
loadComponent("LPERA_SensorTorques","ARM::SensorTorques")
addPeer("Supervisor","LPERA_SensorTorques")
setActivity("LPERA_SensorTorques",(TS),HighestPriority,ORO_SCHED_RT)
LPERA_SensorTorques.vector_size				= N
LPERA_SensorTorques.c1 						= array (35.0,		87.0,		1050.0,		35.0,		300.0,		1.0,		1.0,		32.34	)
LPERA_SensorTorques.c2 						= array (-0.2,		0.2,		6.0,		-0.8,		1.0,		1.0,		1.0,		0.2		)
LPERA_SensorTorques.c3 						= array (-76.26,	-95.29,	    -145.16,	-38.71,		-111.7,		1.0,		1.0,	  -60.0		)
LPERA_SensorTorques.configure

### PERA Homing ###							## Note that all properties follow the [q1,q2,q3....q8] structure and not the structure provided by homing_order
loadComponent("LPERA_Homing","SUPERVISORY::Homing")
connectPeers("Supervisor","LPERA_Homing")
addPeer("LPERA_Homing","LPERA_ReadEncoders")
addPeer("LPERA_Homing","LPERA_ReferenceGenerator")
addPeer("LPERA_Homing","LPERA_Safety")
setActivity("LPERA_Homing",TS,HighestPriority,ORO_SCHED_RT)
LPERA_Homing.vector_size 					= N
LPERA_Homing.number_of_outports 			= 2
LPERA_Homing.outport_sizes					= ints (7 , 1)
LPERA_Homing.bodypart 						= BODYPARTNAME
LPERA_Homing.prefix 						= "LPERA"
LPERA_Homing.homing_type					= ints 		(3, 	3,	 	2, 		2,	 	2, 		2,	 	2, 		4 	)
LPERA_Homing.require_homing					= ints 		(0, 	0,	 	1, 		1,	 	1, 		1,	 	1, 		1 	)
LPERA_Homing.homing_order					= ints 		(8,		6, 		7, 		5, 		4, 		3, 		2, 		1 	)
LPERA_Homing.homing_direction				= ints 		(1,		-1,		-1,	 	-1, 	-1,	 	-1, 	-1,	 	-1 	)
LPERA_Homing.homing_velocity				= array 	(0.05,	0.05,	0.25,	0.25,	0.25,	0.2,	0.2,	0.4 )
LPERA_Homing.homing_stroke					= HOMINGSTROKE
LPERA_Homing.reset_stroke					= array 	(0.0,	0.0,	0.0,	0.0,	0.0,	0.0,	0.0, 	0.0 )
LPERA_Homing.homing_endpos					= array 	(-0.1,  -0.2, 	0.2, 	0.8,	0.0,	0.0, 	0.0, 	0.0 )
LPERA_Homing.homing_errors					= array 	(0.03,  0.03,   0.03,   0.03, 	0.03,   0.03,  	0.03,	0.03)
LPERA_Homing.homing_absPos					= ABSPOS
LPERA_Homing.homing_forces					= array 	(0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	0.0, 	20.0)
LPERA_Homing.configure

#### Diagnostics ###
loadComponent("LPERA_Diagnostics","ROS::RosDiagnostics")
addPeer("Supervisor","LPERA_Diagnostics")
setActivity("LPERA_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
LPERA_Diagnostics.statusname 				= BODYPARTNAME+"_Controller"
LPERA_Diagnostics.NumberOfVectorPorts 		= 3
LPERA_Diagnostics.NumberOfBoolPorts 		= 1
LPERA_Diagnostics.configure
LPERA_Diagnostics.vecname1 					= "Reference Interpolator"
LPERA_Diagnostics.vecname2 					= "Joint Errors"
LPERA_Diagnostics.vecname3 					= "Reference Path Planning"
LPERA_Diagnostics.boolname1 				= "Error"

### Setting up tracing ###
loadComponent("Tracing","Signal::Tracing")
addPeer("Supervisor","Tracing")
setActivity("Tracing",0.0,HighestPriority,ORO_SCHED_RT)
Tracing.vector_sizes = array (8.0, 8.0, 8.0, 8.0)
Tracing.buffersize =  85000;
Tracing.filename = "/home/amigo/ros/data/hardware_tracing/max/frictionexp/TorqueLq12345.dat"
Tracing.Ts = TS
Tracing.configure
connect ("LPERA_ReferenceGenerator.posout",         "Tracing.in1",                              ConnPolicy())         ;# Reference
connect ("LPERA_Controller.out",            		"Tracing.in2",                              ConnPolicy())         ;# Control Output
connect ("LPERA_AnalogIns.stdvect_out_1",                    "Tracing.in3",                              ConnPolicy())         ;# Torque Sensor Output
connect ("LPERA_SensorTorques.measured_torques_out","Tracing.in4",                              ConnPolicy())         ;# Sensor torques output 

#### SET UP JOINTSTATE AGGREGATOR ####
JointStateAggregator.addJointNames(JOINT_NAMES)
JointStateAggregator.addJointNames(DUMMY_JOINT_NAMES)
JointStateAggregator.addAggregationPort(BODYPARTNAME)

#### CONNECT COMPONENTS ####
## Control loop	## 
connect (LEFT_ARM_SHOULDER+".encoder1",				"LPERA_ReadEncoders.enc1_in", 				ConnPolicy() ); # Enc 1
connect (LEFT_ARM_SHOULDER+".encoder2",				"LPERA_ReadEncoders.enc2_in", 				ConnPolicy() ); # Enc 2
connect (LEFT_ARM_UPPERARM+".encoder1",				"LPERA_ReadEncoders.enc3_in", 				ConnPolicy() ); # Enc 3
connect (LEFT_ARM_UPPERARM+".encoder2",				"LPERA_ReadEncoders.enc4_in", 				ConnPolicy() ); # Enc 4
connect (LEFT_ARM_UPPERARM+".encoder3",				"LPERA_ReadEncoders.enc5_in", 				ConnPolicy() ); # Enc 5
connect (LEFT_ARM_LOWERARM+".encoder1",				"LPERA_ReadEncoders.enc6_in", 				ConnPolicy() ); # Enc 6
connect (LEFT_ARM_LOWERARM+".encoder2",				"LPERA_ReadEncoders.enc7_in", 				ConnPolicy() ); # Enc 7
connect (LEFT_ARM_LOWERARM+".encoder3",				"LPERA_ReadEncoders.enc8_in", 				ConnPolicy() ); # Enc 8
connect ("LPERA_ReadEncoders.out",				"LPERA_MotorToJointSpace.in", 				ConnPolicy() ); # Position MS
connect ("LPERA_MotorToJointSpace.out",				"LPERA_Controller.pos_in", 				ConnPolicy() ); # Position JS
connect ("LPERA_Controller.out",				"LPERA_JointToMotorSpace.in", 				ConnPolicy() ); # ControlEffort JS
connect ("LPERA_JointToMotorSpace.out",				"LPERA_AnalogOuts.in1", 				ConnPolicy() ); # ControlEffort MS
connect ("LPERA_AnalogIns.stdvect_out_1",			"LPERA_SensorTorques.voltage_in", 			ConnPolicy() ); # TorqueSensor

## References ##
connect ("LPERA_ReadReferences.pos_out",			"LPERA_ReferenceGenerator.posin1", 			ConnPolicy() ); # Ref
connect ("LPERA_GripperControl.gripper_ref",		"LPERA_ReferenceGenerator.posin2",			ConnPolicy() ); # Gripper Ref
connect ("LPERA_ReferenceGenerator.posout",			"LPERA_Controller.ref_in1", 				ConnPolicy() ); # InterpolatedReference 
connect ("LPERA_MotorToJointSpace.out",				"LPERA_ReferenceGenerator.initial_pos", 	ConnPolicy() ); # Initial position

## Gripper control ##
connect ("LPERA_SensorTorques.measured_torques_out","LPERA_GripperControl.torque_in", 			ConnPolicy() ); # Torqin
connect ("LPERA_MotorToJointSpace.out", 			"LPERA_GripperControl.position_in", 		ConnPolicy() ); # Posin

## Ros communication ##
connect ("LPERA_MotorToJointSpace.out",				"LPERA_JointOutputLimiter.in", 				ConnPolicy() ); # Positions JS
connect ("LPERA_JointOutputLimiter.out",			"LPERA_WriteClippedJointAngles.pos_in", 	ConnPolicy() ); # Clipped Positions
connect ("LPERA_WriteClippedJointAngles.out", 		"JointStateAggregator.left_arm", 			ConnPolicy() ); # Jointstate

## Safety ##
connect ("LPERA_Controller.jointErrors",			"LPERA_Safety.jointErrors", 				ConnPolicy() ); # JointErrors
connect ("LPERA_Controller.out",					"LPERA_Safety.controlEffort", 				ConnPolicy() ); # ControlEffort
connect ("LPERA_Safety.enable",						"LPERA_Controller.enable", 					ConnPolicy() ); # Enable
connect ("LPERA_Safety.error",						"Supervisor.left_arm_error", 				ConnPolicy() ); # Error
connect ("LPERA_Safety.enable",						LEFT_ARM_SHOULDER+".enablePort", 			ConnPolicy() ); # Enable
connect ("LPERA_Safety.enable",						LEFT_ARM_UPPERARM+".enablePort", 			ConnPolicy() ); # Enable
connect ("LPERA_Safety.enable",						LEFT_ARM_LOWERARM+".enablePort", 			ConnPolicy() ); # Enable

## Homing ##
connect ("LPERA_MotorToJointSpace.out",				"LPERA_Homing.position", 					ConnPolicy() ); # Position
connect ("LPERA_Controller.jointErrors",			"LPERA_Homing.servo_error_in", 				ConnPolicy() ); # JointErrors
connect ("LPERA_AnalogIns.stdvect_out_2",			"LPERA_Homing.abs_pos_in", 					ConnPolicy() ); # AbsoluteSensors
connect ("LPERA_SensorTorques.measured_torques_out","LPERA_Homing.force_in", 					ConnPolicy() ); # ForceSensors
connect ("LPERA_Homing.homing_finished",			"Supervisor.left_arm_homingfinished", 		ConnPolicy() ); # Homing_finished
connect ("LPERA_Homing.refout1",					"LPERA_ReferenceGenerator.posin1", 			ConnPolicy() ); # Reference
connect ("LPERA_Homing.refout2",					"LPERA_ReferenceGenerator.posin2", 			ConnPolicy() ); # Reference

## Diagnostics ##
connect ("LPERA_ReadReferences.pos_out", 			"LPERA_Diagnostics.vec1", 					ConnPolicy() ); # Reference
connect ("LPERA_Controller.jointErrors",			"LPERA_Diagnostics.vec2", 					ConnPolicy() ); # JointErrors
connect ("LPERA_Controller.out", 					"LPERA_Diagnostics.vec3", 					ConnPolicy() ); # ControlEffort
connect ("LPERA_Safety.error",						"LPERA_Diagnostics.bool1", 					ConnPolicy() ); # Enable

#### CONNECT ROS STREAMS ####
stream ("LPERA_WriteClippedJointAngles.out", 		ros.topic("/amigo/left_arm/measurements"))
#stream ("LPERA_ReadReferences.in", 					ros.topic("/amigo/left_arm/references"))
stream ("LPERA_GripperControl.gripper_measurement", ros.topic("/amigo/left_gripper/measurements"))
stream ("LPERA_GripperControl.gripper_command", 	ros.topic("/amigo/left_gripper/references"))
stream ("LPERA_Diagnostics.diagnostics", 			ros.topic("/amigo/diagnostics"));

#### START COMPONENTS ####
Supervisor.AddAllwaysOnPeer(	"LPERA_ReadEncoders")
Supervisor.AddAllwaysOnPeer(	"LPERA_Diagnostics")
Supervisor.AddAllwaysOnPeer(	"LPERA_JointOutputLimiter")
Supervisor.AddAllwaysOnPeer(	"LPERA_WriteClippedJointAngles")
Supervisor.AddAllwaysOnPeer(	"LPERA_MotorToJointSpace")
Supervisor.AddAllwaysOnPeer(	"LPERA_JointToMotorSpace")
Supervisor.AddAllwaysOnPeer(	"LPERA_Controller")

Supervisor.AddHomingOnlyPeer(	"LPERA_Homing", 			BODYNUMBER)
Supervisor.AddOpOnlyPeer(		"Tracing", 	BODYNUMBER)
Supervisor.AddOpOnlyPeer(		"LPERA_ReadReferences", 	BODYNUMBER)
Supervisor.AddEnabledPeer(		"LPERA_SensorTorques", 		BODYNUMBER)
Supervisor.AddEnabledPeer(		"LPERA_GripperControl",		BODYNUMBER)
Supervisor.AddEnabledPeer(		"LPERA_ReferenceGenerator", BODYNUMBER)
Supervisor.AddEnabledPeer(		"LPERA_Safety", 			BODYNUMBER)
