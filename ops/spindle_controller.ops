########################################################################
#                                                                      #
# Spindle Controller deployer file. deployer file.                	   #
#                                                                      #
# Max Baeten				                       					   #
#                                                                      #
########################################################################

#### DECLARATION OF PARAMETERS ####
var double TS 				= 0.001
var strings JOINT_NAMES 	= strings( "torso_joint" )
var double ENC2SI 			= -4.1666667e-7; # Minus because spindle up is defined positive.
var array MINPOS 			= array (0.075)
var array MAXPOS 			= array (0.4)
var array MAXVEL 			= array (0.07)
var array MAXACC			= array (0.1)
var array MAXERR			= array (0.01)
var int N 					= 1
var int BODYNUMBER 			= 2
var string BODYPARTNAME 	= "spindle"
var bool HOMEABLE 			= true
var bool HOMINGOBLIGATORY	= true
var bool RESETTABLE			= false
### AddBodyPart ###
Supervisor.AddBodyPart( BODYNUMBER, BODYPARTNAME, HOMEABLE, HOMINGOBLIGATORY, RESETTABLE)

### Loading Components ###
#Reading Encoders
loadComponent("SPINDLE_ReadEncoders","SOEM::ReadEncoders")
addPeer("Supervisor","SPINDLE_ReadEncoders")
setActivity("SPINDLE_ReadEncoders",TS,HighestPriority,ORO_SCHED_RT)
SPINDLE_ReadEncoders.encoderbits 			= 65536
SPINDLE_ReadEncoders.enc2SI 				= array (ENC2SI)
SPINDLE_ReadEncoders.configure

# Publish JointState Component
loadComponent("SPINDLE_WriteJointStates","ROS::DoublesToJointState")
addPeer("Supervisor","SPINDLE_WriteJointStates")
setActivity("SPINDLE_WriteJointStates",0.05,LowestPriority,ORO_SCHED_OTHER)
SPINDLE_WriteJointStates.JointNames 		= JOINT_NAMES
SPINDLE_WriteJointStates.configure

#Reading spindle setpoints HighestPriority,ORO_SCHED_RT)
loadComponent("SPINDLE_ReadReferences","ROS::JointStateToDoubles")
addPeer("Supervisor","SPINDLE_ReadReferences")
setActivity("SPINDLE_ReadReferences",0.01,LowestPriority,ORO_SCHED_OTHER)
SPINDLE_ReadReferences.vector_size			= N
SPINDLE_ReadReferences.configure

#Loading Reference Generator
loadComponent("SPINDLE_ReferenceGenerator","SOURCES::ReferenceGenerator")
addPeer("Supervisor","SPINDLE_ReferenceGenerator")
setActivity("SPINDLE_ReferenceGenerator",TS,HighestPriority,ORO_SCHED_RT)
SPINDLE_ReferenceGenerator.vector_size 		= N
SPINDLE_ReferenceGenerator.number_of_inports= 1
SPINDLE_ReferenceGenerator.inport_sizes 	= ints (1)
SPINDLE_ReferenceGenerator.InterpolatorDt	= TS
SPINDLE_ReferenceGenerator.InterpolatorEps 	= 1.0
SPINDLE_ReferenceGenerator.minPosition 		= MINPOS
SPINDLE_ReferenceGenerator.maxPosition		= MAXPOS
SPINDLE_ReferenceGenerator.maxVelocity 		= MAXVEL
SPINDLE_ReferenceGenerator.maxAcceleration	= MAXACC
SPINDLE_ReferenceGenerator.configure

### Negative feedback controller ###
loadComponent("SPINDLE_Controller","FILTERS::Controller")
setActivity("SPINDLE_Controller",0.0,HighestPriority,ORO_SCHED_RT)
addPeer("Supervisor","SPINDLE_Controller")
SPINDLE_Controller.vector_size    			= N
SPINDLE_Controller.gains					= array(-40.0)
SPINDLE_Controller.controllers				= strings("WeakIntegrator","LeadLag","LowPass")
SPINDLE_Controller.sampling_time			= TS
SPINDLE_Controller.number_of_refports		= 1
SPINDLE_Controller.refinport_sizes			= ints (N)
SPINDLE_Controller.number_of_ffwports		= 1
SPINDLE_Controller.zero_freq_WeakIntegrator	= array (0.3)
SPINDLE_Controller.zero_freq_LeadLag		= array (1.6)
SPINDLE_Controller.pole_freq_LeadLag		= array (60.0)
SPINDLE_Controller.pole_freq_LowPass		= array (20.0)
SPINDLE_Controller.pole_damp_LowPass		= array (0.7)
SPINDLE_Controller.configure

#Calculating Feed Forward
loadComponent("SPINDLE_FFW","CalculateFFW")
setActivity("SPINDLE_FFW",TS,HighestPriority,ORO_SCHED_RT)
addPeer("Supervisor","SPINDLE_FFW")
SPINDLE_FFW.FFWgrav 						= 0.07
SPINDLE_FFW.FFWstat 						= 0.05
SPINDLE_FFW.FFWdyn 							= 0.4
SPINDLE_FFW.FFWacc 							= 0.3
SPINDLE_FFW.direction 						= -1.0
SPINDLE_FFW.configure

### Safety ###
loadComponent("SPINDLE_Safety","SUPERVISORY::Safety")
addPeer("Supervisor","SPINDLE_Safety")
setActivity("SPINDLE_Safety",0.0,HighestPriority,ORO_SCHED_RT)
SPINDLE_Safety.NJ							= N
SPINDLE_Safety.NM							= N
SPINDLE_Safety.maxJointErrors				= MAXERR
SPINDLE_Safety.motorSaturations				= array (200.0)
SPINDLE_Safety.maxConSatTime				= 5.0
SPINDLE_Safety.additional_safeties			= strings("endswitch")
SPINDLE_Safety.configure

#Loading Homing component
loadComponent("SPINDLE_Homing","SUPERVISORY::Homing")
connectPeers("Supervisor","SPINDLE_Homing")	
addPeer("SPINDLE_Homing","SPINDLE_ReadEncoders")
addPeer("SPINDLE_Homing","SPINDLE_ReferenceGenerator")
addPeer("SPINDLE_Homing","SPINDLE_Safety")
setActivity("SPINDLE_Homing",TS,HighestPriority,ORO_SCHED_RT)
SPINDLE_Homing.vector_size 					= N
SPINDLE_Homing.number_of_outports 			= 1
SPINDLE_Homing.outport_sizes				= ints (1)
SPINDLE_Homing.bodypart 					= BODYPARTNAME
SPINDLE_Homing.prefix 						= "SPINDLE"
SPINDLE_Homing.homing_type					= ints (1)
SPINDLE_Homing.require_homing				= ints (1)
SPINDLE_Homing.homing_order					= ints (1)
SPINDLE_Homing.homing_direction				= ints (1)
SPINDLE_Homing.homing_velocity				= array (0.01)
SPINDLE_Homing.homing_stroke				= array (0.0)
SPINDLE_Homing.reset_stroke					= array (0.41)
SPINDLE_Homing.homing_endpos				= array (0.35)
SPINDLE_Homing.configure

#### LOAD COMPONENT TO PUBLISH DIAGNOSTICS ###
loadComponent("SPINDLE_Diagnostics","ROS::RosDiagnostics")
addPeer("Supervisor","SPINDLE_Diagnostics")
setActivity("SPINDLE_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
SPINDLE_Diagnostics.statusname 				= BODYPARTNAME+"_Controller"
SPINDLE_Diagnostics.NumberOfVectorPorts 	= 3
SPINDLE_Diagnostics.NumberOfBoolPorts 		= 1
SPINDLE_Diagnostics.configure
SPINDLE_Diagnostics.vecname1 				= "Reference"
SPINDLE_Diagnostics.vecname2 				= "Error"
SPINDLE_Diagnostics.vecname3 				= "ControlEffort"
SPINDLE_Diagnostics.boolname1 				= "Safe"

#### SETTING UP JOINTSTATE AGGREGATOR ####
JointStateAggregator.addJointNames(JOINT_NAMES)
JointStateAggregator.addAggregationPort("torso")

#### CONNECT COMPONENTS ####
## Control loop	## 
connect ("Soem.Slave_1006.Slave_1006_value",		"SPINDLE_ReadEncoders.enc1_in", 			ConnPolicy() ); # Encoder
connect ("SPINDLE_ReadEncoders.out",				"SPINDLE_Controller.pos_in", 				ConnPolicy() ); # Position
connect ("SPINDLE_ReferenceGenerator.velout",		"SPINDLE_FFW.ref_vel", 						ConnPolicy() ); # vel
connect ("SPINDLE_ReferenceGenerator.accout",		"SPINDLE_FFW.ref_acc", 						ConnPolicy() ); # acc
connect ("SPINDLE_FFW.FFW_out",						"SPINDLE_Controller.ffw_in1", 				ConnPolicy() ); # FFW
connect ("SPINDLE_Controller.out",					"BASESPINDLE_AnalogOuts.in2", 				ConnPolicy() ); # Total Control Effort

## References ##
connect ("SPINDLE_ReadReferences.pos_out",			"SPINDLE_ReferenceGenerator.posin1", 		ConnPolicy() ); # RefGoal
connect ("SPINDLE_ReadEncoders.out",				"SPINDLE_ReferenceGenerator.initial_pos", 	ConnPolicy() ); # Position
connect ("SPINDLE_ReferenceGenerator.posout",		"SPINDLE_Controller.ref_in1", 				ConnPolicy() ); # Reference

## Ros communication ##
connect( "SPINDLE_ReadEncoders.out", 				"SPINDLE_WriteJointStates.pos_in", 			ConnPolicy() ); # Position
connect ("SPINDLE_WriteJointStates.out", 			"JointStateAggregator.torso", 				ConnPolicy() ); # JointState 

## Homing ##
connect ("SPINDLE_ReadEncoders.out",				"SPINDLE_Homing.position", 					ConnPolicy() ); # Position
connect ("DigitalIns2.out1", 						"SPINDLE_Homing.homeswitch", 				ConnPolicy() ); # homeswitch
connect ("SPINDLE_Homing.homing_finished",			"Supervisor.spindle_homingfinished", 		ConnPolicy() ); # Homing_finished
connect ("SPINDLE_Homing.refout1",					"SPINDLE_ReferenceGenerator.posin1", 		ConnPolicy() ); # Reference

## Safety ##
connect ("SPINDLE_Controller.jointErrors",			"SPINDLE_Safety.jointErrors", 				ConnPolicy() ); # Joint Errors
connect ("SPINDLE_Controller.out",					"SPINDLE_Safety.controlEffort", 			ConnPolicy() ); # ControlEffort
connect ("DigitalIns2.out2",						"SPINDLE_Safety.endswitch", 				ConnPolicy() );	# Endstop
connect ("SPINDLE_Safety.enable",					"SPINDLE_Controller.enable", 				ConnPolicy() ); # Enable
connect ("SPINDLE_Safety.error",					"Supervisor.spindle_error", 				ConnPolicy() ); # Spindle_error
connect ("SPINDLE_Safety.enable",					"DigitalOuts.in3", 							ConnPolicy() ); # Spindle brake
connect ("SPINDLE_Safety.enable",					"DigitalOuts2.in1", 						ConnPolicy() );	# Spindle amplifier

## Diagnostics ##
connect ("SPINDLE_ReferenceGenerator.posout", 		"SPINDLE_Diagnostics.vec1", 				ConnPolicy() ); # Reference
connect ("SPINDLE_Controller.jointErrors", 			"SPINDLE_Diagnostics.vec2", 				ConnPolicy() ); # JointErrors
connect ("SPINDLE_Controller.out", 					"SPINDLE_Diagnostics.vec3", 				ConnPolicy() ); # ControlEffort
connect ("SPINDLE_Safety.enable",					"SPINDLE_Diagnostics.bool1", 				ConnPolicy() ); # Enable

#### CONNECT ROS STREAMS ####
stream("SPINDLE_ReadReferences.in", 				ros.topic("/amigo/torso/references"))
stream("SPINDLE_Diagnostics.diagnostics", 			ros.topic("/amigo/diagnostics"))
stream("SPINDLE_WriteJointStates.out", 				ros.topic("/amigo/torso/measurements"))

#### START COMPONENTS ####
Supervisor.AddAllwaysOnPeer (	"SPINDLE_ReadEncoders")
Supervisor.AddAllwaysOnPeer (	"SPINDLE_WriteJointStates")
Supervisor.AddAllwaysOnPeer (	"SPINDLE_Diagnostics")
Supervisor.AddAllwaysOnPeer (	"SPINDLE_Controller")

Supervisor.AddHomingOnlyPeer (	"SPINDLE_Homing", 				BODYNUMBER )

Supervisor.AddOpOnlyPeer (		"SPINDLE_ReadReferences", 		BODYNUMBER )

Supervisor.AddEnabledPeer (		"SPINDLE_ReferenceGenerator", 	BODYNUMBER )
Supervisor.AddEnabledPeer (		"SPINDLE_FFW", 					BODYNUMBER )
Supervisor.AddEnabledPeer (		"SPINDLE_Safety", 				BODYNUMBER )
