########################################################################
#                                                                      #
# Base controller deployer file 									   #
#                                                                      #
# Tim Clephas                                                          #
#                                                                      #
########################################################################

#### DECLARATION OF PARAMETERS ####
var double Ts 				= 0.001
var double WHEELRAD 		= 0.075*0.9825; # Corrected for effective wheel radius
var double DIS2CENT 		= 0.29072 * 64.0 / 62.8; # (Correction for corrected TWOPI)
var double HALFSQRT2		= 0.7071
var double TORQUE2CURRENT 	= 1.0/0.0302; # [Amp/Nm]
var double CURRENT2VOLT 	= 1.0/1.0
var double GEARRATIO 		= 8.0/343.0
var double TWOPI 			= 2.0*3.141592
var double ENCODERCOUNTS 	= 500.0*4.0
var double ENC2SI 			= TWOPI*GEARRATIO/ENCODERCOUNTS
var double SI2V 			= TORQUE2CURRENT * CURRENT2VOLT * GEARRATIO
var array MAX_ERRORS 		= array ( 2.2, 2.2, 2.2, 2.2 )
var array MAX_VELOCITIES	= array (1.8, 1.0, 3.1415)
var int N					= 4
var string ROBOT 			= "/amigo"
var int BODYNUMBER 			= 1
var string BODYPARTNAME 	= "base"
var bool HOMEABLE 			= false
var bool HOMINGOBLIGATORY	= false
var bool RESETTABLE			= true
### AddBodyPart ###
Supervisor.AddBodyPart( BODYNUMBER, BODYPARTNAME, HOMEABLE, HOMINGOBLIGATORY, RESETTABLE)

### READ WHEEL ENCODERS ###
loadComponent("BASE_ReadEncoders","SOEM::ReadEncoders")
addPeer("Supervisor","BASE_ReadEncoders")
setActivity("BASE_ReadEncoders",Ts,HighestPriority,ORO_SCHED_RT)
BASE_ReadEncoders.encoderbits = 65536
BASE_ReadEncoders.enc2SI = array (ENC2SI, ENC2SI, ENC2SI, ENC2SI)
BASE_ReadEncoders.configure

### DECOUPLE POSITION ###
loadComponent("BASE_MotorToJointSpace","MATH::MatrixTransform")
addPeer("Supervisor","BASE_MotorToJointSpace")
setActivity("BASE_MotorToJointSpace",0.0,HighestPriority,ORO_SCHED_RT)
BASE_MotorToJointSpace.Nrows = 3
BASE_MotorToJointSpace.Ncolumns = 4
BASE_MotorToJointSpace.configure
BASE_MotorToJointSpace.function1 = array (-0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2)
BASE_MotorToJointSpace.function2 = array ( 0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2, -0.25*WHEELRAD/HALFSQRT2,  0.25*WHEELRAD/HALFSQRT2)
BASE_MotorToJointSpace.function3 = array ( 0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT,   0.25*WHEELRAD/DIS2CENT)

#### LOAD COMPONENT TO PUBLISH ODOMETRY ###
loadComponent("BASE_OdometryPublisher","ROS::PublishOdometry")
addPeer("Supervisor","BASE_OdometryPublisher")
setActivity("BASE_OdometryPublisher",0.05,LowestPriority,ORO_SCHED_OTHER)
BASE_OdometryPublisher.base_link_frame = "/amigo/base_link"
BASE_OdometryPublisher.odom_frame = "/amigo/odom"
BASE_OdometryPublisher.configure

### READ REFERENCE VELOCITIES ###
loadComponent("BASE_ReadReferences","ROS::ReadTwistMsg")
addPeer("Supervisor","BASE_ReadReferences")
setActivity("BASE_ReadReferences",Ts,HighestPriority,ORO_SCHED_RT)
BASE_ReadReferences.max_start_vel = 0.7
BASE_ReadReferences.max_vel = MAX_VELOCITIES
BASE_ReadReferences.max_acc = array (0.7, 0.7, 2.0)
BASE_ReadReferences.max_interval = 1.0
BASE_ReadReferences.configure

### DECOUPLE REFERENCE ###
loadComponent("BASE_JointToMotorSpace","MATH::MatrixTransform")
addPeer("Supervisor","BASE_JointToMotorSpace")
setActivity("BASE_JointToMotorSpace",0.0,HighestPriority,ORO_SCHED_RT)
BASE_JointToMotorSpace.Nrows = N
BASE_JointToMotorSpace.Ncolumns = 3
BASE_JointToMotorSpace.configure
BASE_JointToMotorSpace.function1 = array ( -HALFSQRT2/WHEELRAD,  HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BASE_JointToMotorSpace.function2 = array ( -HALFSQRT2/WHEELRAD, -HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BASE_JointToMotorSpace.function3 = array (  HALFSQRT2/WHEELRAD, -HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )
BASE_JointToMotorSpace.function4 = array (  HALFSQRT2/WHEELRAD,  HALFSQRT2/WHEELRAD,  DIS2CENT/WHEELRAD )

### VELOCITY TO POSITION ###
loadComponent("BASE_VelocityToPosition","MATH::Integrator")
addPeer("Supervisor","BASE_VelocityToPosition")
setActivity("BASE_VelocityToPosition",0.0,HighestPriority,ORO_SCHED_RT)
BASE_VelocityToPosition.vector_size = N
BASE_VelocityToPosition.configure

### Negative feedback controller ###
loadComponent("BASE_Controller","FILTERS::Controller")
setActivity("BASE_Controller",0.0,HighestPriority,ORO_SCHED_RT)
addPeer("Supervisor","BASE_Controller")
BASE_Controller.vector_size    				= N
BASE_Controller.controllers					= strings("WeakIntegrator","LeadLag","LowPass")
BASE_Controller.sampling_time				= Ts
BASE_Controller.number_of_refports			= 1
BASE_Controller.refinport_sizes				= ints (N)
BASE_Controller.number_of_ffwports			= 0
BASE_Controller.gains						= array (5.0, 		5.0, 		5.0, 		5.0)
BASE_Controller.zero_freq_WeakIntegrator	= array (0.0001, 	0.0001, 	0.0001, 	0.0001)
BASE_Controller.zero_freq_LeadLag			= array (15.0, 		15.0, 		15.0, 		15.0)
BASE_Controller.pole_freq_LeadLag			= array (50.0, 		50.0, 		50.0, 		50.0)
BASE_Controller.pole_freq_LowPass		    = array (100.0, 	100.0, 		100.0, 		100.0)
BASE_Controller.pole_damp_LowPass			= array (0.7, 		0.7, 		0.7, 		0.7)
BASE_Controller.configure

### Safety ###
loadComponent("BASE_Safety","SUPERVISORY::Safety")
addPeer("Supervisor","BASE_Safety")
setActivity("BASE_Safety",0.0,HighestPriority,ORO_SCHED_RT)
BASE_Safety.NJ							= N
BASE_Safety.NM							= N
BASE_Safety.maxJointErrors				= MAX_ERRORS
BASE_Safety.motorSaturations			= array (9.9, 9.9, 9.9, 9.9)
BASE_Safety.maxConSatTime				= 0.1
BASE_Safety.configure

### SI2VOLT ###
loadComponent("BASE_SI2Volt","MATH::Gain")
addPeer("Supervisor","BASE_SI2Volt")
setActivity("BASE_SI2Volt",0.0,HighestPriority,ORO_SCHED_RT)
BASE_SI2Volt.vectorsize = N;
BASE_SI2Volt.gain = array (SI2V, SI2V, SI2V, SI2V)
BASE_SI2Volt.configure

#### LOAD COMPONENT TO PUBLISH DIAGNOSTICS ###
loadComponent("BASE_Diagnostics","ROS::RosDiagnostics")
addPeer("Supervisor","BASE_Diagnostics")
setActivity("BASE_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
BASE_Diagnostics.statusname = BODYPARTNAME+"_Controller"
BASE_Diagnostics.NumberOfVectorPorts = 3
BASE_Diagnostics.NumberOfBoolPorts = 1
BASE_Diagnostics.configure
BASE_Diagnostics.vecname1 = "Reference"
BASE_Diagnostics.vecname2 = "Error"
BASE_Diagnostics.vecname3 = "Voltage"
BASE_Diagnostics.boolname1 = "Amplifiers"

#### SET UP JOINTSTATE AGGREGATOR ####
# To Do JointState message base

#### CONNECT COMPONENTS ####
connect ("Soem.Slave_1002.Slave_1002_value",		"BASE_ReadEncoders.enc1_in", 		ConnPolicy() ); # Enc 1
connect ("Soem.Slave_1003.Slave_1003_value",		"BASE_ReadEncoders.enc2_in", 		ConnPolicy() ); # Enc 2
connect ("Soem.Slave_1004.Slave_1004_value",		"BASE_ReadEncoders.enc3_in", 		ConnPolicy() ); # Enc 3
connect ("Soem.Slave_1005.Slave_1005_value",		"BASE_ReadEncoders.enc4_in", 		ConnPolicy() ); # Enc 4
connect ("BASE_ReadEncoders.out",					"BASE_MotorToJointSpace.in", 		ConnPolicy() ); # Positions MS
connect ("BASE_MotorToJointSpace.out", 				"BASE_OdometryPublisher.pos", 		ConnPolicy() ); # Positions JS
connect ("BASE_VelocityToPosition.out",				"BASE_Controller.ref_in1", 			ConnPolicy() ); # Positions
connect ("BASE_ReadEncoders.out",					"BASE_Controller.pos_in", 			ConnPolicy() ); # Positions MS
connect ("BASE_Controller.out",						"BASE_SI2Volt.in", 					ConnPolicy() ); # ControlEffort [SI]
connect ("BASE_SI2Volt.out", 						"BASESPINDLE_AnalogOuts.in1", 		ConnPolicy() ); # ControlEffort [V]
connect ("BASE_ReadReferences.out",					"BASE_JointToMotorSpace.in", 		ConnPolicy() ); # Reference JS
connect ("BASE_JointToMotorSpace.out",				"BASE_VelocityToPosition.in", 		ConnPolicy() ); # Reference MS
connect ("BASE_ReadEncoders.out",					"BASE_VelocityToPosition.initial", 	ConnPolicy() ); # Initial position

## Safety
connect ("BASE_Controller.jointErrors",				"BASE_Safety.jointErrors", 			ConnPolicy() ); # Jointerrors
connect ("BASE_Controller.out",						"BASE_Safety.controlEffort", 		ConnPolicy() ); # ControlEffort
connect ("BASE_Safety.enable",						"BASE_Controller.enable", 			ConnPolicy() ); # Enable
connect ("BASE_Safety.error",						"Supervisor.base_error", 			ConnPolicy() ); # Base_error
connect ("BASE_Safety.enable", 						"DigitalOuts2.in2", 				ConnPolicy() ); # Enable (amplifiers)

## Diagnostics ##
connect ("BASE_ReadReferences.out", 				"BASE_Diagnostics.vec1", 			ConnPolicy() ); # References
connect ("BASE_Controller.jointErrors", 			"BASE_Diagnostics.vec2", 			ConnPolicy() ); # JointErrors
connect ("BASE_SI2Volt.out", 						"BASE_Diagnostics.vec3", 			ConnPolicy() ); # Voltage
connect ("BASE_Safety.enable", 						"BASE_Diagnostics.bool1", 			ConnPolicy() ); # Enable

#### CONNECT ROS STREAMS ####
stream ("BASE_OdometryPublisher.odom", 				ros.topic(ROBOT+"/base/measurements"));
stream ("BASE_OdometryPublisher.reset", 			ros.topic(ROBOT+"/base/reset_odometry"));
stream ("BASE_ReadReferences.cmd_vel", 				ros.topic(ROBOT+"/base/references"));
stream ("BASE_Diagnostics.diagnostics", 			ros.topic(ROBOT+"/diagnostics"));
stream ("BASE_Diagnostics.diagnostics", 			ros.topic(ROBOT+"/base_diagnostics"));

#### START COMPONENTS ####
Supervisor.AddAllwaysOnPeer ("BASE_ReadEncoders")
Supervisor.AddAllwaysOnPeer ("BASE_MotorToJointSpace")
Supervisor.AddAllwaysOnPeer ("BASE_OdometryPublisher")
Supervisor.AddAllwaysOnPeer ("BASE_Diagnostics")
Supervisor.AddAllwaysOnPeer ("BASE_SI2Volt")

Supervisor.AddEnabledPeer ("BASE_Controller", BODYNUMBER)
Supervisor.AddEnabledPeer ("BASE_ReadReferences",BODYNUMBER )
Supervisor.AddEnabledPeer ("BASE_JointToMotorSpace",BODYNUMBER )
Supervisor.AddEnabledPeer ("BASE_VelocityToPosition",BODYNUMBER )
Supervisor.AddEnabledPeer ("BASE_Safety", BODYNUMBER)
