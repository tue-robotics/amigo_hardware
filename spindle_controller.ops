########################################################################
#                                                                      #
# Spindle Controller deployer file. deployer file.                	   #
#                                                                      #
# Max Baeten				                       					   #
#                                                                      #
########################################################################

#### DECLARATION OF PARAMETERS ####
var double Ts 				= 0.001
var strings JOINT_NAMES 	= strings( "torso_joint" )
var int BODYNUMBER 			= 2
var string BODYPARTNAME 	= "spindle"
var bool HOMEABLE 			= true
var double ENC2SI 			= -4.1666667e-7); # Minus because spindle up is defined positive.
var double MINPOS 			= 0.075
var double MAXPOS 			= 0.4
var double MAXVEL 			= 0.07
var double MAXACC			= 0.1
var int N 					= 1
 
### NameBodyPart ###
Supervisor.NameBodyPart( BODYNUMBER, BODYPARTNAME, HOMEABLE)

### Loading Components ###
#Reading Encoders
loadComponent("SPINDLE_ReadEncoders","SOEM::ReadEncoders")
addPeer("Supervisor","SPINDLE_ReadEncoders")
setActivity("SPINDLE_ReadEncoders",Ts,HighestPriority,ORO_SCHED_RT)
SPINDLE_ReadEncoders.encoderbits = 65536
SPINDLE_ReadEncoders.enc2SI = array (ENC2SI)
SPINDLE_ReadEncoders.configure

# Publish JointState Component
loadComponent("SPINDLE_WriteJointStates","ROS::DoublesToJointState")
addPeer("Supervisor","SPINDLE_WriteJointStates")
setActivity("SPINDLE_WriteJointStates",0.05,HighestPriority,ORO_SCHED_RT)
SPINDLE_WriteJointStates.JointNames = JOINT_NAMES
SPINDLE_WriteJointStates.configure

#Reading spindle setpoints
loadComponent("SPINDLE_ReadReferences","AMIGOSPINDLE::ReadSpindleSetpointJointState")
addPeer("Supervisor","SPINDLE_ReadReferences")
SPINDLE_ReadReferences.min_pos = MINPOS
SPINDLE_ReadReferences.max_pos = MAXPOS
SPINDLE_ReadReferences.max_vel = MAXVEL
SPINDLE_ReadReferences.configure

#Loading Reference Generator
loadComponent("SPINDLE_ReferenceGenerator","SOURCES::ReferenceGenerator")
addPeer("Supervisor","SPINDLE_ReferenceGenerator")
setActivity("SPINDLE_ReferenceGenerator",Ts,HighestPriority,ORO_SCHED_RT)
SPINDLE_ReferenceGenerator.NrInterpolators = N
SPINDLE_ReferenceGenerator.InterpolatorDt = Ts
SPINDLE_ReferenceGenerator.InterpolatorEps = 1.0
SPINDLE_ReferenceGenerator.configure
SPINDLE_ReferenceGenerator.interpolator1 = array (0.0, MAXVEL, MAXACC);

#Loading Homing component
loadComponent("SPINDLE_Homing","AMIGOGENERIC::Homing")
connectPeers("Supervisor","SPINDLE_Homing")	
addPeer("SPINDLE_Homing","SPINDLE_ReadEncoders")
setActivity("SPINDLE_Homing",Ts,HighestPriority,ORO_SCHED_RT)
SPINDLE_Homing.vector_size 			= N
SPINDLE_Homing.bodypart 			= BODYPARTNAME
SPINDLE_Homing.prefix 				= "SPINDLE"
SPINDLE_Homing.homing_type			= strings("endswitch")
SPINDLE_Homing.require_homing		= array (1.0)
SPINDLE_Homing.homing_order			= array (1.0)
SPINDLE_Homing.homing_direction		= array (1.0)
SPINDLE_Homing.homing_velocity		= array (0.01)
SPINDLE_Homing.homing_stroke		= array (0.41)
SPINDLE_Homing.homing_midpos		= array (0.41)
SPINDLE_Homing.homing_endpos		= array (0.35)
SPINDLE_Homing.configure

### Negative feedback controller ###
loadComponent("SPINDLE_Controller","FILTERS::Controller")
setActivity("SPINDLE_Controller",0.0,LowestPriority,ORO_SCHED_OTHER)
addPeer("Supervisor","SPINDLE_Controller")
SPINDLE_Controller.vector_size    				= N
SPINDLE_Controller.gains						= array(-40.0)
SPINDLE_Controller.controllers					= strings("WeakIntegrator","LeadLag","LowPass")
SPINDLE_Controller.sampling_time				= Ts
SPINDLE_Controller.zero_freq_WeakIntegrator		= array (0.3)
SPINDLE_Controller.zero_freq_LeadLag			= array (1.6)
SPINDLE_Controller.pole_freq_LeadLag			= array (60.0)
SPINDLE_Controller.pole_freq_LowPass			= array (20.0)
SPINDLE_Controller.pole_damp_LowPass			= array (0.7)
SPINDLE_Controller.configure

### Safety ###
loadComponent("SPINDLE_Safety","SUPERVISORY::Safety")
addPeer("Supervisor","SPINDLE_Safety")
setActivity("SPINDLE_Safety",0.0,HighestPriority,ORO_SCHED_RT)
SPINDLE_Safety.NJ							= N
SPINDLE_Safety.NM							= N
SPINDLE_Safety.maxJointErrors				= array (0.05)
SPINDLE_Safety.motorSaturations				= array (200.0)
SPINDLE_Safety.maxConSatTime				= 5.0
SPINDLE_Safety.configure

#### LOAD COMPONENT TO PUBLISH DIAGNOSTICS ###
loadComponent("SPINDLE_Diagnostics","ROS::RosDiagnostics")
addPeer("Supervisor","SPINDLE_Diagnostics")
setActivity("SPINDLE_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
SPINDLE_Diagnostics.statusname = BODYPARTNAME+"_Controller"
SPINDLE_Diagnostics.NumberOfVectorPorts = 3
SPINDLE_Diagnostics.NumberOfBoolPorts = 1
SPINDLE_Diagnostics.configure
SPINDLE_Diagnostics.vecname1 = "Reference"
SPINDLE_Diagnostics.vecname2 = "Error"
SPINDLE_Diagnostics.vecname3 = "ControlEffort"
SPINDLE_Diagnostics.boolname1 = "Safe"

#### SETTING UP JOINTSTATE AGGREGATOR ####
JointStateAggregator.addJointNames(JOINT_NAMES)
JointStateAggregator.addAggregationPort("torso")

#### CONNECT COMPONENTS ####
## Control loop	## 
connect ("Soem.Slave_1006.Slave_1006_value",		"SPINDLE_ReadEncoders.enc1_in", 			ConnPolicy() ); # Encoder
connect ("SPINDLE_ReadEncoders.out",				"SPINDLE_Controller.pos_in", 				ConnPolicy() ); # Position
connect ("SPINDLE_Controller.out",					"BASESPINDLE_AnalogOuts.in2", 				ConnPolicy() ); # ControlEffort

## References ##
connect ("SPINDLE_ReadReferences.out",				"SPINDLE_ReferenceGenerator.refin", 		ConnPolicy() ); # RefGoal
connect ("SPINDLE_ReadEncoders.out",				"SPINDLE_ReferenceGenerator.actual_pos", 	ConnPolicy() ); # Position
connect ("SPINDLE_ReferenceGenerator.posout",		"SPINDLE_Controller.ref_in", 				ConnPolicy() ); # Reference

## Ros communication ##
connect( "SPINDLE_ReadEncoders.out", 				"SPINDLE_WriteJointStates.pos_in", 			ConnPolicy() ); # Position
connect ("SPINDLE_WriteJointStates.out", 			"JointStateAggregator.torso", 				ConnPolicy() ); # JointState 

## Homing ##
connect ("SPINDLE_ReadEncoders.out",				"SPINDLE_Homing.position", 					ConnPolicy() ); # Position
connect ("SPINDLE_Homing.homing_finished",			"Supervisor.spindle_homingfinished", 		ConnPolicy() ); # Homing_finished
connect ("DigitalIns2.out2", 						"SPINDLE_Homing.endswitch", 				ConnPolicy() ); # Endswitch
connect ("SPINDLE_Homing.ref_out",					"SPINDLE_ReferenceGenerator.refin", 		ConnPolicy() ); # Reference

## Safety ##
connect ("SPINDLE_Controller.jointErrors",			"SPINDLE_Safety.jointErrors", 				ConnPolicy() ); # Joint Errors
connect ("SPINDLE_Controller.out",					"SPINDLE_Safety.controlEffort", 			ConnPolicy() ); # ControlEffort
connect ("SPINDLE_Safety.enable",					"SPINDLE_Controller.enable", 				ConnPolicy() ); # Enable
connect ("SPINDLE_Safety.error",					"Supervisor.spindle_error", 				ConnPolicy() ); # Spindle_error
connect ("SPINDLE_Safety.enable",					"DigitalOuts.in3", 							ConnPolicy() ); # Spindle brake
connect ("SPINDLE_Safety.enable",					"DigitalOuts2.in1", 						ConnPolicy() );	# Spindle amplifier

## Diagnostics ##
connect ("SPINDLE_ReferenceGenerator.posout", 		"SPINDLE_Diagnostics.vec1", 				ConnPolicy() ); # Reference
connect ("SPINDLE_Controller.jointErrors", 			"SPINDLE_Diagnostics.vec2", 				ConnPolicy() ); # JointErrors
connect ("SPINDLE_Controller.out", 					"SPINDLE_Diagnostics.vec3", 				ConnPolicy() ); # ControlEffort
connect ("SPINDLE_Safety.enable",					"SPINDLE_Diagnostics.bool1", 				ConnPolicy() ); # Enable

#### CONNECT ROS STREAMS ####
stream("SPINDLE_ReadReferences.spindle_setpoint", 	ros.topic("/amigo/torso/references"))
stream("SPINDLE_Diagnostics.diagnostics", 			ros.topic("/diagnostics"))
stream("SPINDLE_WriteJointStates.out", 				ros.topic("/amigo/torso/measurements"))

#### START COMPONENTS ####
Supervisor.AddAllwaysOnPeer ("SPINDLE_ReadEncoders")
Supervisor.AddAllwaysOnPeer ("SPINDLE_WriteJointStates")
Supervisor.AddAllwaysOnPeer ("SPINDLE_Diagnostics")
Supervisor.AddAllwaysOnPeer ("SPINDLE_Controller")

Supervisor.AddHomingOnlyPeer ("SPINDLE_Homing", BODYNUMBER )

Supervisor.AddOpOnlyPeer ("SPINDLE_ReadReferences", BODYNUMBER )

Supervisor.AddEnabledPeer ("SPINDLE_ReferenceGenerator", BODYNUMBER )
Supervisor.AddEnabledPeer ("SPINDLE_Safety", BODYNUMBER )
