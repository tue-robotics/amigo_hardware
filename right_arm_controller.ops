########################################################################
#                                                                      #
# Right Philips Experimental Robotic Arm deployer file.                #
#                                                                      #
# Max Baeten								                           #
#                                                                      #
########################################################################

#### DECLARATION OF PARAMETERS ####
var double TS 					= 0.001
var string RIGHT_ARM_SHOULDER 	= "Soem.Slave_1015"
var string RIGHT_ARM_UPPERARM 	= "Soem.Slave_1016"
var string RIGHT_ARM_LOWERARM 	= "Soem.Slave_1017"
var strings JOINT_NAMES 		= strings( "shoulder_yaw_joint_right", "shoulder_pitch_joint_right", "shoulder_roll_joint_right", "elbow_pitch_joint_right", "elbow_roll_joint_right", "wrist_pitch_joint_right", "wrist_yaw_joint_right" ) 
var strings DUMMY_JOINT_NAMES 	= strings( "finger1_joint_right", "finger1_tip_joint_right", "finger2_joint_right", "finger2_tip_joint_right" )
var array UPPERJOINTLIMIT 		= array (   0.0,  		1.57,  		1.57, 		2.23,  		1.83,  		0.95,  		0.61,  4.0		)
var array LOWERJOINTLIMIT 		= array (   -1.57, 		-1.57, 		-1.57,  	0.0, 		-1.83		-0.95, 		-0.61, -4.0		)
var array UPPERJOINTTORQUELIMIT = array (   26.4, 		26.4, 		9.8, 		11.8, 		11.8, 		2.5, 		2.5 			)
var array LOWERJOINTTORQUELIMIT = array (   -26.4, 		-26.4, 		-9.8, 		-11.8, 		-11.8, 		-2.5, 		-2.5 			)
var array MAXERRORS 			= array (   0.09,     	0.09,   	0.09,     	0.09, 	   	0.09,    	0.09, 	   	0.19, 	 5.0	)
var array HOMED_POS 			= array (	1382.0, 	642.0,  	1.5708, 	0.0, 		1.8326,		0.985,		0.7854			)
var double TWOPI 				= 2.0*3.141592
var double GEARRATIO_SM			= 1.0/550.0
var double GEARRATIO_S3		    = 1.0/371.25
var double GEARRATIO_EM			= 1.0/410.0
var double GEARRATIO_WM			= 1.0/290.0
var double GEARRATIO_HM			= 196.0/3249.0
var double ENCODERCOUNTS_SM		= 256.0*4.0
var double ENCODERCOUNTS_S3	    = 256.0*4.0
var double ENCODERCOUNTS_EM		= 500.0*4.0 
var double ENCODERCOUNTS_WM		= 128.0*4.0
var double ENCODERCOUNTS_HM		= 8.0*128.0*4.0 ;# (TO DO: should be 16*4, remove this factor 8)
var double ENC2SI_SM			= TWOPI*GEARRATIO_SM/ENCODERCOUNTS_SM
var double ENC2SI_S3			= TWOPI*GEARRATIO_S3/ENCODERCOUNTS_S3
var double ENC2SI_EM			= TWOPI*GEARRATIO_EM/ENCODERCOUNTS_EM
var double ENC2SI_WM			= TWOPI*GEARRATIO_WM/ENCODERCOUNTS_WM
var double ENC2SI_HM 			= TWOPI*GEARRATIO_HM/ENCODERCOUNTS_HM
var int N						= 8
var int BODYNUMBER 				= 4
var string BODYNAME 			= "right_arm"
var bool HOMEABLE 				= true
var bool REQUIREHOMING   		= true
var bool REQUIREGRIPPERHOMING   = false
 
### NameBodyPart ###
Supervisor.NameBodyPart( BODYNUMBER, BODYNAME, HOMEABLE)

#### HIGH PRIORITY COMPONENTS ####
### Read reference joint angles ###
loadComponent("RPERA_ReadReferences","ROS::JointStateToDoubles")
addPeer("Supervisor","RPERA_ReadReferences")
setActivity("RPERA_ReadReferences",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_ReadReferences.NumberOfJoints = 7
RPERA_ReadReferences.configure

### Vector concatenate ###
loadComponent("RPERA_VectorConcatenate","SIGNALROUTING::VectorConcatenate")
addPeer("Supervisor","RPERA_VectorConcatenate")
setActivity("RPERA_VectorConcatenate",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_VectorConcatenate.vector_size 	= 2
RPERA_VectorConcatenate.event_port 		= array (1.0, 1.0)
RPERA_VectorConcatenate.configure

### Motor to joint angles ###
loadComponent("RPERA_MotorToJointSpace","MATH::MatrixTransform")
addPeer("Supervisor","RPERA_MotorToJointSpace")
setActivity("RPERA_MotorToJointSpace",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_MotorToJointSpace.Nrows 		= N
RPERA_MotorToJointSpace.Ncolumns 	= N
RPERA_MotorToJointSpace.configure
RPERA_MotorToJointSpace.function1 	= array  ( 0.5, -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function2 	= array  ( 0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function3 	= array  ( 0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function4 	= array  ( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function5 	= array  ( 0.0,  0.0,  0.0, -0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_MotorToJointSpace.function6 	= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
RPERA_MotorToJointSpace.function7 	= array  ( 0.0,  0.0,  0.0,  0.0,  0.0, -0.5,  0.5,  0.0)
RPERA_MotorToJointSpace.function8 	= array  ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### Interpolator ###
loadComponent("RPERA_ReferenceInterpolator","SOURCES::ReferenceGenerator")
addPeer("Supervisor","RPERA_ReferenceInterpolator")
setActivity("RPERA_ReferenceInterpolator",TS,HighestPriority,ORO_SCHED_RT)
RPERA_ReferenceInterpolator.NrInterpolators 	= N
RPERA_ReferenceInterpolator.InterpolatorDt 		= TS
RPERA_ReferenceInterpolator.InterpolatorEps 	= 1.0
RPERA_ReferenceInterpolator.configure
RPERA_ReferenceInterpolator.interpolator1 		= array (0.0, 0.4, 0.2)
RPERA_ReferenceInterpolator.interpolator2 		= array (0.0, 0.4, 0.2)
RPERA_ReferenceInterpolator.interpolator3 		= array (0.0, 0.6, 0.3)
RPERA_ReferenceInterpolator.interpolator4 		= array (0.0, 0.8, 0.5)
RPERA_ReferenceInterpolator.interpolator5 		= array (0.0, 0.8, 0.5)
RPERA_ReferenceInterpolator.interpolator6 		= array (0.0, 1.0, 0.5)
RPERA_ReferenceInterpolator.interpolator7 		= array (0.0, 1.0, 0.5)
RPERA_ReferenceInterpolator.interpolator8 		= array (0.0, 10.0, 100.0)

### LOAD READENCODERS
loadComponent("RPERA_ReadEncoders","SOEM::ReadEncoders")
addPeer("Supervisor","RPERA_ReadEncoders")
setActivity("RPERA_ReadEncoders",TS,HighestPriority,ORO_SCHED_RT)
RPERA_ReadEncoders.encoderbits = 65536
RPERA_ReadEncoders.enc2SI = array (ENC2SI_SM ,ENC2SI_SM, ENC2SI_S3 , ENC2SI_EM , ENC2SI_EM , ENC2SI_WM , ENC2SI_WM , ENC2SI_HM )
RPERA_ReadEncoders.configure

### Gripper force controller ###
loadComponent("RPERA_GripperControl","ARM::GripperControl")
addPeer("Supervisor","RPERA_GripperControl")
setActivity("RPERA_GripperControl",TS,HighestPriority,ORO_SCHED_RT)
RPERA_GripperControl.threshold_closed 	= 9.0
RPERA_GripperControl.max_pos 			= 5.3
RPERA_GripperControl.gripper_gain 		= 0.1
RPERA_GripperControl.configure

### Joint to motor torques ###
loadComponent("RPERA_JointToMotorSpace","MATH::MatrixTransform")
addPeer("Supervisor","RPERA_JointToMotorSpace")
setActivity("RPERA_JointToMotorSpace",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_JointToMotorSpace.Nrows 		= N
RPERA_JointToMotorSpace.Ncolumns 	= N
RPERA_JointToMotorSpace.configure
RPERA_JointToMotorSpace.function1	= array ( 0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function2	= array (-0.5,  0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function3 	= array ( 0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function4 	= array ( 0.0,  0.0,  0.0,  0.5, -0.5,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function5 	= array ( 0.0,  0.0,  0.0,  0.5,  0.5,  0.0,  0.0,  0.0)
RPERA_JointToMotorSpace.function6 	= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5, -0.5,  0.0)
RPERA_JointToMotorSpace.function7 	= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.5,  0.5,  0.0)
RPERA_JointToMotorSpace.function8 	= array ( 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0)

### Negative feedback controller ###
loadComponent("RPERA_Controller","FILTERS::Controller")
setActivity("RPERA_Controller",0.0,LowestPriority,ORO_SCHED_OTHER)
addPeer("Supervisor","RPERA_Controller")
RPERA_Controller.vector_size    				= N
RPERA_Controller.gains							= array(20000.0, 	20000.0, 	10000.0, 	17500.0, 	17500.0, 	17500.0, 	21500.0, 	5000.0);
RPERA_Controller.controllers					= strings("WeakIntegrator","LeadLag","LowPass")
RPERA_Controller.sampling_time					= TS
RPERA_Controller.zero_freq_WeakIntegrator		= array(0.0065,	  	0.0065,		0.009, 		0.004, 		0.004, 		0.02, 		0.02, 		0.000001); 
RPERA_Controller.zero_freq_LeadLag				= array(25.0, 		25.0, 		15.0, 		100.0, 		100.0,		5.0,  		5.0,  		4.5)
RPERA_Controller.pole_freq_LeadLag				= array(80.0, 		80.0, 		40.0, 		200.0, 		200.0, 		40.0, 		40.0, 		45.0)
RPERA_Controller.pole_freq_LowPass				= array(125.0, 		125.0, 		125.0, 		125.0, 		62.5, 		125.0, 		125.0, 		125.0)
RPERA_Controller.pole_damp_LowPass				= array(0.7, 		0.7, 		0.7, 		0.7, 		0.7, 		0.7, 		0.7, 		0.7)
RPERA_Controller.configure

### Safety ###
loadComponent("RPERA_Safety","SUPERVISORY::Safety")
addPeer("Supervisor","RPERA_Safety")
setActivity("RPERA_Safety",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_Safety.NJ							= N
RPERA_Safety.NM							= N
RPERA_Safety.maxJointErrors				= MAXERRORS
RPERA_Safety.motorSaturations			= array (1000.0, 	1000.0,	 	400.0, 	   	500.0,  	500.0, 	   	500.0, 		500.0, 		900.0)
RPERA_Safety.maxConSatTime				= 5.0
RPERA_Safety.configure

### Output limiter ###
loadComponent("RPERA_JointOutputLimiter","DISCONTINUITIES::Saturation")
addPeer("Supervisor","RPERA_JointOutputLimiter")
setActivity("RPERA_JointOutputLimiter",0.0,HighestPriority,ORO_SCHED_RT)
RPERA_JointOutputLimiter.upper_limit = UPPERJOINTLIMIT
RPERA_JointOutputLimiter.lower_limit = LOWERJOINTLIMIT
RPERA_JointOutputLimiter.vector_size = N
RPERA_JointOutputLimiter.configure

### Publishing joint angles on ROS-topic ###
loadComponent("RPERA_WriteClippedJointAngles","ROS::DoublesToJointState")
addPeer("Supervisor","RPERA_WriteClippedJointAngles")
setActivity("RPERA_WriteClippedJointAngles",0.05,LowestPriority,ORO_SCHED_OTHER)
RPERA_WriteClippedJointAngles.JointNames = JOINT_NAMES
RPERA_WriteClippedJointAngles.configure

### Conversion analog PERA_IO values to torques ###
loadComponent("RPERA_SensorTorques","ARM::SensorTorques")
addPeer("Supervisor","RPERA_SensorTorques")
setActivity("RPERA_SensorTorques",(TS),LowestPriority,ORO_SCHED_OTHER)
RPERA_SensorTorques.vector_size	= N
RPERA_SensorTorques.c1 			= array (42.0,		4250.0,		94.0,		20.0,		825.0,		1.0,		1.0,		32.3375		)
RPERA_SensorTorques.c2 			= array (-0.8,		12.0,	     1.0,		-2.2,		1.0,		1.0,		1.0,		0.2			)
RPERA_SensorTorques.c3 			= array (-35.63,	-294.40,	-30.56,		-30.9,		-168.32,	1.0, 		1.0,		-22.66		)
RPERA_SensorTorques.configure

### PERA Homing ###
loadComponent("RPERA_Homing","AMIGOPERA::PeraHoming")
addPeer("Supervisor","RPERA_Homing")
addPeer("RPERA_Homing","RPERA_Safety")
setActivity("RPERA_Homing",TS,HighestPriority,ORO_SCHED_RT)
RPERA_Homing.requireHoming			= REQUIREHOMING
RPERA_Homing.requireGripperHoming	= REQUIREGRIPPERHOMING
RPERA_Homing.maxJointErrors 		= MAXERRORS
RPERA_Homing.jointNames				= JOINT_NAMES
RPERA_Homing.controllerName			= "RPERA_Safety"
RPERA_Homing.stepSize 				= 0.5
RPERA_Homing.startJoint 			= 7
RPERA_Homing.absSenDir 				= array (	1.0,	-1.0,	1.0,	1.0,	1.0,	1.0,	-1.0		)
RPERA_Homing.homedPos 				= HOMED_POS
RPERA_Homing.absOrRel 				= array (	0.0,	0.0, 	1.0,	1.0,	1.0,	1.0,	1.0,	1.0	)
RPERA_Homing.endPose				= array (  -0.1,   -0.2, 	0.2, 	0.8,	0.0,	0.0, 	0.0)
RPERA_Homing.configure

#### Diagnostics ###
loadComponent("RPERA_Diagnostics","ROS::RosDiagnostics")
addPeer("Supervisor","RPERA_Diagnostics")
setActivity("RPERA_Diagnostics",1.0,LowestPriority,ORO_SCHED_OTHER)
RPERA_Diagnostics.statusname 			= "RPERA"
RPERA_Diagnostics.NumberOfVectorPorts 	= 3
RPERA_Diagnostics.NumberOfBoolPorts 	= 1
RPERA_Diagnostics.configure
RPERA_Diagnostics.vecname1 				= "Reference Interpolator"
RPERA_Diagnostics.vecname2 				= "Joint Errors"
RPERA_Diagnostics.vecname3 				= "Reference Path Planning"
RPERA_Diagnostics.boolname1 			= "Safe"

#### SET UP JOINTSTATE AGGREGATOR ####
JointStateAggregator.addJointNames(JOINT_NAMES)
JointStateAggregator.addJointNames(DUMMY_JOINT_NAMES)
JointStateAggregator.addAggregationPort(BODYNAME)

#### CONNECT COMPONENTS ####
## Control loop	## 
connect (RIGHT_ARM_SHOULDER+".encoderAngle1",		"RPERA_ReadEncoders.enc1_in", 				ConnPolicy() ) 
connect (RIGHT_ARM_SHOULDER+".encoderAngle2",		"RPERA_ReadEncoders.enc2_in", 				ConnPolicy() ) 
connect (RIGHT_ARM_UPPERARM+".encoderAngle1",		"RPERA_ReadEncoders.enc3_in", 				ConnPolicy() ) 
connect (RIGHT_ARM_UPPERARM+".encoderAngle2",		"RPERA_ReadEncoders.enc4_in", 				ConnPolicy() ) 
connect (RIGHT_ARM_UPPERARM+".encoderAngle3",		"RPERA_ReadEncoders.enc5_in", 				ConnPolicy() ) 
connect (RIGHT_ARM_LOWERARM+".encoderAngle1",		"RPERA_ReadEncoders.enc6_in", 				ConnPolicy() ) 
connect (RIGHT_ARM_LOWERARM+".encoderAngle2",		"RPERA_ReadEncoders.enc7_in", 				ConnPolicy() ) 
connect (RIGHT_ARM_LOWERARM+".encoderAngle3",		"RPERA_ReadEncoders.enc8_in", 				ConnPolicy() )
connect ("RPERA_ReadEncoders.out",					"RPERA_MotorToJointSpace.in", 				ConnPolicy() ) 
connect ("RPERA_MotorToJointSpace.out",				"RPERA_Controller.pos_in", 					ConnPolicy() )
connect ("RPERA_Controller.out",					"RPERA_JointToMotorSpace.in", 				ConnPolicy() )
connect ("RPERA_JointToMotorSpace.out",				"RPERA_AnalogOuts.in1", 					ConnPolicy() )

## References ##
connect ("RPERA_ReadReferences.pos_out",			"RPERA_VectorConcatenate.in1",				ConnPolicy() )
connect ("RPERA_GripperControl.gripper_ref",		"RPERA_VectorConcatenate.in2",				ConnPolicy() )
connect ("RPERA_VectorConcatenate.out",				"RPERA_ReferenceInterpolator.posin", 		ConnPolicy() )
connect ("RPERA_ReferenceInterpolator.posout",		"RPERA_Controller.ref_in", 					ConnPolicy() )

## Gripper control ##
connect ("RPERA_AnalogIns.out1",					"RPERA_SensorTorques.voltage_in", 			ConnPolicy() )
connect ("RPERA_SensorTorques.measured_torques_out","RPERA_GripperControl.torque_in", 			ConnPolicy() )
connect ("RPERA_MotorToJointSpace.out", 			"RPERA_GripperControl.position_in", 		ConnPolicy() )
connect ("RPERA_GripperControl.gripper_measurement","RPERA_Homing.gripper_measurement", 		ConnPolicy() )
connect ("RPERA_Homing.gripper_command",			"RPERA_GripperControl.gripper_command", 	ConnPolicy() )

## Ros communication ##
connect ("RPERA_MotorToJointSpace.out",				"RPERA_JointOutputLimiter.in", 				ConnPolicy() )
connect ("RPERA_JointOutputLimiter.out",			"RPERA_WriteClippedJointAngles.pos_in", 	ConnPolicy() )
connect ("RPERA_WriteClippedJointAngles.out", 		"JointStateAggregator.right_arm", 			ConnPolicy() )

## Safety ##
connect ("RPERA_Controller.jointErrors",			"RPERA_Safety.jointErrors", 				ConnPolicy() )
connect ("RPERA_Controller.out",					"RPERA_Safety.controlEffort", 				ConnPolicy() )
connect ("RPERA_Safety.safe",						"Supervisor.right_arm_error", 				ConnPolicy() )
connect ("RPERA_Safety.safe",						RIGHT_ARM_SHOULDER+".enablePort", 			ConnPolicy() )
connect ("RPERA_Safety.safe",						RIGHT_ARM_UPPERARM+".enablePort", 			ConnPolicy() )
connect ("RPERA_Safety.safe",						RIGHT_ARM_LOWERARM+".enablePort", 			ConnPolicy() )

## Homing ##
connect ("RPERA_Homing.homing_finished",			"Supervisor.right_arm_homingfinished", 		ConnPolicy() )
connect ("RPERA_AnalogIns.out2",					"RPERA_Homing.measAbsJointAnglesPort", 		ConnPolicy() )
connect ("RPERA_Homing.homJntAnglesPort",			"RPERA_VectorConcatenate.in1", 				ConnPolicy() )
connect ("RPERA_Homing.resetInterpolatorPort",		"RPERA_ReferenceInterpolator.resetValues", 	ConnPolicy() )
connect ("RPERA_Homing.reNullPort",					"RPERA_ReadEncoders.in_reNull", 			ConnPolicy() )
connect ("RPERA_Homing.reNullPort",					"RPERA_GripperControl.reNullPort", 			ConnPolicy() )
connect ("RPERA_Controller.jointErrors",			"RPERA_Homing.errorPort", 					ConnPolicy() )
connect ("RPERA_MotorToJointSpace.out",				"RPERA_Homing.measRelJointAnglesPort", 		ConnPolicy() )
connect ("RPERA_Homing.endpos_out",					"RPERA_VectorConcatenate.in1", 				ConnPolicy() ) 

## Diagnostics ##
connect ("RPERA_VectorConcatenate.out", 			"RPERA_Diagnostics.vec1", 					ConnPolicy() )
connect ("RPERA_Controller.jointErrors",			"RPERA_Diagnostics.vec2", 					ConnPolicy() )
connect ("RPERA_ReadReferences.pos_out", 			"RPERA_Diagnostics.vec3", 					ConnPolicy() )
connect ("RPERA_Safety.safe", 						"RPERA_Diagnostics.bool1", 					ConnPolicy() )

#### CONNECT ROS STREAMS ####
stream ("RPERA_WriteClippedJointAngles.out", 		ros.topic("/amigo/right_arm/measurements"))
stream ("RPERA_ReadReferences.in", 					ros.topic("/amigo/right_arm/references"))
stream ("RPERA_GripperControl.gripper_measurement", ros.topic("/amigo/right_gripper/measurements"))
stream ("RPERA_GripperControl.gripper_command", 	ros.topic("/amigo/right_gripper/references"))
stream ("RPERA_Diagnostics.diagnostics", 			ros.topic("/diagnostics"));

#### START COMPONENTS ####
Supervisor.AddAllwaysOnPeer ("RPERA_Diagnostics")
Supervisor.AddAllwaysOnPeer ("RPERA_WriteClippedJointAngles")
Supervisor.AddAllwaysOnPeer ("RPERA_ReadEncoders")
Supervisor.AddAllwaysOnPeer ("RPERA_Controller")
Supervisor.AddAllwaysOnPeer ("RPERA_ReferenceInterpolator")

Supervisor.AddHomingOnlyPeer ("RPERA_Homing", BODYNUMBER )

Supervisor.AddOpOnlyPeer ("RPERA_ReadReferences", BODYNUMBER )

Supervisor.AddEnabledPeer ("RPERA_VectorConcatenate", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_MotorToJointSpace", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_JointToMotorSpace", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_JointOutputLimiter", BODYNUMBER )
#Supervisor.AddEnabledPeer ("RPERA_SensorTorques", BODYNUMBER )
#Supervisor.AddEnabledPeer ("RPERA_GripperControl", BODYNUMBER )
Supervisor.AddEnabledPeer ("RPERA_Safety", BODYNUMBER)
